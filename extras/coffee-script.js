/**
 * CoffeeScript Compiler v1.10.0
 * http://coffeescript.org
 *
 * Copyright 2011, Jeremy Ashkenas
 * Released under the MIT License
 */
(function(root) {
  var CoffeeScript = function() {
    function require(path){ return require[path]; }
    require['./helpers'] = (function() {
  var exports = {}, module = {exports: exports};
  // Generated by CoffeeScript 1.10.0
(function() {
  var buildLocationData, extend, flatten, ref, repeat, syntaxErrorToString;

  exports.starts = function(string, literal, start) {
    return literal === string.substr(start, literal.length);
  };

  exports.ends = function(string, literal, back) {
    var len;
    len = literal.length;
    return literal === string.substr(string.length - len - (back || 0), len);
  };

  exports.repeat = repeat = function(str, n) {
    var res;
    res = '';
    while (n > 0) {
      if (n & 1) {
        res += str;
      }
      n >>>= 1;
      str += str;
    }
    return res;
  };

  exports.compact = function(array) {
    var i, item, len1, results;
    results = [];
    for (i = 0, len1 = array.length; i < len1; i++) {
      item = array[i];
      if (item) {
        results.push(item);
      }
    }
    return results;
  };

  exports.count = function(string, substr) {
    var num, pos;
    num = pos = 0;
    if (!substr.length) {
      return 1 / 0;
    }
    while (pos = 1 + string.indexOf(substr, pos)) {
      num++;
    }
    return num;
  };

  exports.merge = function(options, overrides) {
    return extend(extend({}, options), overrides);
  };

  extend = exports.extend = function(object, properties) {
    var key, val;
    for (key in properties) {
      val = properties[key];
      object[key] = val;
    }
    return object;
  };

  exports.flatten = flatten = function(array) {
    var element, flattened, i, len1;
    flattened = [];
    for (i = 0, len1 = array.length; i < len1; i++) {
      element = array[i];
      if ('[object Array]' === Object.prototype.toString.call(element)) {
        flattened = flattened.concat(flatten(element));
      } else {
        flattened.push(element);
      }
    }
    return flattened;
  };

  exports.del = function(obj, key) {
    var val;
    val = obj[key];
    delete obj[key];
    return val;
  };

  exports.some = (ref = Array.prototype.some) != null ? ref : function(fn) {
    var e, i, len1;
    for (i = 0, len1 = this.length; i < len1; i++) {
      e = this[i];
      if (fn(e)) {
        return true;
      }
    }
    return false;
  };

  exports.invertLiterate = function(code) {
    var line, lines, maybe_code;
    maybe_code = true;
    lines = (function() {
      var i, len1, ref1, results;
      ref1 = code.split('\n');
      results = [];
      for (i = 0, len1 = ref1.length; i < len1; i++) {
        line = ref1[i];
        if (maybe_code && /^([ ]{4}|[ ]{0,3}\t)/.test(line)) {
          results.push(line);
        } else if (maybe_code = /^\s*$/.test(line)) {
          results.push(line);
        } else {
          results.push('# ' + line);
        }
      }
      return results;
    })();
    return lines.join('\n');
  };

  buildLocationData = function(first, last) {
    if (!last) {
      return first;
    } else {
      return {
        first_line: first.first_line,
        first_column: first.first_column,
        last_line: last.last_line,
        last_column: last.last_column
      };
    }
  };

  exports.addLocationDataFn = function(first, last) {
    return function(obj) {
      if (((typeof obj) === 'object') && (!!obj['updateLocationDataIfMissing'])) {
        obj.updateLocationDataIfMissing(buildLocationData(first, last));
      }
      return obj;
    };
  };

  exports.locationDataToString = function(obj) {
    var locationData;
    if (("2" in obj) && ("first_line" in obj[2])) {
      locationData = obj[2];
    } else if ("first_line" in obj) {
      locationData = obj;
    }
    if (locationData) {
      return ((locationData.first_line + 1) + ":" + (locationData.first_column + 1) + "-") + ((locationData.last_line + 1) + ":" + (locationData.last_column + 1));
    } else {
      return "No location data";
    }
  };

  exports.baseFileName = function(file, stripExt, useWinPathSep) {
    var parts, pathSep;
    if (stripExt == null) {
      stripExt = false;
    }
    if (useWinPathSep == null) {
      useWinPathSep = false;
    }
    pathSep = useWinPathSep ? /\\|\// : /\//;
    parts = file.split(pathSep);
    file = parts[parts.length - 1];
    if (!(stripExt && file.indexOf('.') >= 0)) {
      return file;
    }
    parts = file.split('.');
    parts.pop();
    if (parts[parts.length - 1] === 'coffee' && parts.length > 1) {
      parts.pop();
    }
    return parts.join('.');
  };

  exports.isCoffee = function(file) {
    return /\.((lit)?coffee|coffee\.md)$/.test(file);
  };

  exports.isLiterate = function(file) {
    return /\.(litcoffee|coffee\.md)$/.test(file);
  };

  exports.throwSyntaxError = function(message, location) {
    var error;
    error = new SyntaxError(message);
    error.location = location;
    error.toString = syntaxErrorToString;
    error.stack = error.toString();
    throw error;
  };

  exports.updateSyntaxError = function(error, code, filename) {
    if (error.toString === syntaxErrorToString) {
      error.code || (error.code = code);
      error.filename || (error.filename = filename);
      error.stack = error.toString();
    }
    return error;
  };

  syntaxErrorToString = function() {
    var codeLine, colorize, colorsEnabled, end, filename, first_column, first_line, last_column, last_line, marker, ref1, ref2, ref3, ref4, start;
    if (!(this.code && this.location)) {
      return Error.prototype.toString.call(this);
    }
    ref1 = this.location, first_line = ref1.first_line, first_column = ref1.first_column, last_line = ref1.last_line, last_column = ref1.last_column;
    if (last_line == null) {
      last_line = first_line;
    }
    if (last_column == null) {
      last_column = first_column;
    }
    filename = this.filename || '[stdin]';
    codeLine = this.code.split('\n')[first_line];
    start = first_column;
    end = first_line === last_line ? last_column + 1 : codeLine.length;
    marker = codeLine.slice(0, start).replace(/[^\s]/g, ' ') + repeat('^', end - start);
    if (typeof process !== "undefined" && process !== null) {
      colorsEnabled = ((ref2 = process.stdout) != null ? ref2.isTTY : void 0) && !((ref3 = process.env) != null ? ref3.NODE_DISABLE_COLORS : void 0);
    }
    if ((ref4 = this.colorful) != null ? ref4 : colorsEnabled) {
      colorize = function(str) {
        return "\x1B[1;31m" + str + "\x1B[0m";
      };
      codeLine = codeLine.slice(0, start) + colorize(codeLine.slice(start, end)) + codeLine.slice(end);
      marker = colorize(marker);
    }
    return filename + ":" + (first_line + 1) + ":" + (first_column + 1) + ": error: " + this.message + "\n" + codeLine + "\n" + marker;
  };

  exports.nameWhitespaceCharacter = function(string) {
    switch (string) {
      case ' ':
        return 'space';
      case '\n':
        return 'newline';
      case '\r':
        return 'carriage return';
      case '\t':
        return 'tab';
      default:
        return string;
    }
  };

}).call(this);

  return module.exports;
})();require['./rewriter'] = (function() {
  var exports = {}, module = {exports: exports};
  // Generated by CoffeeScript 1.10.0
(function() {
  var BALANCED_PAIRS, CALL_CLOSERS, EXPRESSION_CLOSE, EXPRESSION_END, EXPRESSION_START, IMPLICIT_CALL, IMPLICIT_END, IMPLICIT_FUNC, IMPLICIT_UNSPACED_CALL, INVERSES, LINEBREAKS, SINGLE_CLOSERS, SINGLE_LINERS, generate, k, left, len, ref, rite,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    slice = [].slice;

  generate = function(tag, value, origin) {
    var tok;
    tok = [tag, value];
    tok.generated = true;
    if (origin) {
      tok.origin = origin;
    }
    return tok;
  };

  exports.Rewriter = (function() {
    function Rewriter() {}

    Rewriter.prototype.rewrite = function(tokens1) {
      this.tokens = tokens1;
      this.removeLeadingNewlines();
      this.closeOpenCalls();
      this.closeOpenIndexes();
      this.normalizeLines();
      this.tagPostfixConditionals();
      this.addImplicitBracesAndParens();
      this.addLocationDataToGeneratedTokens();
      return this.tokens;
    };

    Rewriter.prototype.scanTokens = function(block) {
      var i, token, tokens;
      tokens = this.tokens;
      i = 0;
      while (token = tokens[i]) {
        i += block.call(this, token, i, tokens);
      }
      return true;
    };

    Rewriter.prototype.detectEnd = function(i, condition, action) {
      var levels, ref, ref1, token, tokens;
      tokens = this.tokens;
      levels = 0;
      while (token = tokens[i]) {
        if (levels === 0 && condition.call(this, token, i)) {
          return action.call(this, token, i);
        }
        if (!token || levels < 0) {
          return action.call(this, token, i - 1);
        }
        if (ref = token[0], indexOf.call(EXPRESSION_START, ref) >= 0) {
          levels += 1;
        } else if (ref1 = token[0], indexOf.call(EXPRESSION_END, ref1) >= 0) {
          levels -= 1;
        }
        i += 1;
      }
      return i - 1;
    };

    Rewriter.prototype.removeLeadingNewlines = function() {
      var i, k, len, ref, tag;
      ref = this.tokens;
      for (i = k = 0, len = ref.length; k < len; i = ++k) {
        tag = ref[i][0];
        if (tag !== 'TERMINATOR') {
          break;
        }
      }
      if (i) {
        return this.tokens.splice(0, i);
      }
    };

    Rewriter.prototype.closeOpenCalls = function() {
      var action, condition;
      condition = function(token, i) {
        var ref;
        return ((ref = token[0]) === ')' || ref === 'CALL_END') || token[0] === 'OUTDENT' && this.tag(i - 1) === ')';
      };
      action = function(token, i) {
        return this.tokens[token[0] === 'OUTDENT' ? i - 1 : i][0] = 'CALL_END';
      };
      return this.scanTokens(function(token, i) {
        if (token[0] === 'CALL_START') {
          this.detectEnd(i + 1, condition, action);
        }
        return 1;
      });
    };

    Rewriter.prototype.closeOpenIndexes = function() {
      var action, condition;
      condition = function(token, i) {
        var ref;
        return (ref = token[0]) === ']' || ref === 'INDEX_END';
      };
      action = function(token, i) {
        return token[0] = 'INDEX_END';
      };
      return this.scanTokens(function(token, i) {
        if (token[0] === 'INDEX_START') {
          this.detectEnd(i + 1, condition, action);
        }
        return 1;
      });
    };

    Rewriter.prototype.indexOfTag = function() {
      var fuzz, i, j, k, pattern, ref, ref1;
      i = arguments[0], pattern = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      fuzz = 0;
      for (j = k = 0, ref = pattern.length; 0 <= ref ? k < ref : k > ref; j = 0 <= ref ? ++k : --k) {
        while (this.tag(i + j + fuzz) === 'HERECOMMENT') {
          fuzz += 2;
        }
        if (pattern[j] == null) {
          continue;
        }
        if (typeof pattern[j] === 'string') {
          pattern[j] = [pattern[j]];
        }
        if (ref1 = this.tag(i + j + fuzz), indexOf.call(pattern[j], ref1) < 0) {
          return -1;
        }
      }
      return i + j + fuzz - 1;
    };

    Rewriter.prototype.looksObjectish = function(j) {
      var end, index;
      if (this.indexOfTag(j, '@', null, ':') > -1 || this.indexOfTag(j, null, ':') > -1) {
        return true;
      }
      index = this.indexOfTag(j, EXPRESSION_START);
      if (index > -1) {
        end = null;
        this.detectEnd(index + 1, (function(token) {
          var ref;
          return ref = token[0], indexOf.call(EXPRESSION_END, ref) >= 0;
        }), (function(token, i) {
          return end = i;
        }));
        if (this.tag(end + 1) === ':') {
          return true;
        }
      }
      return false;
    };

    Rewriter.prototype.findTagsBackwards = function(i, tags) {
      var backStack, ref, ref1, ref2, ref3, ref4, ref5;
      backStack = [];
      while (i >= 0 && (backStack.length || (ref2 = this.tag(i), indexOf.call(tags, ref2) < 0) && ((ref3 = this.tag(i), indexOf.call(EXPRESSION_START, ref3) < 0) || this.tokens[i].generated) && (ref4 = this.tag(i), indexOf.call(LINEBREAKS, ref4) < 0))) {
        if (ref = this.tag(i), indexOf.call(EXPRESSION_END, ref) >= 0) {
          backStack.push(this.tag(i));
        }
        if ((ref1 = this.tag(i), indexOf.call(EXPRESSION_START, ref1) >= 0) && backStack.length) {
          backStack.pop();
        }
        i -= 1;
      }
      return ref5 = this.tag(i), indexOf.call(tags, ref5) >= 0;
    };

    Rewriter.prototype.addImplicitBracesAndParens = function() {
      var stack, start;
      stack = [];
      start = null;
      return this.scanTokens(function(token, i, tokens) {
        var endImplicitCall, endImplicitObject, forward, inImplicit, inImplicitCall, inImplicitControl, inImplicitObject, newLine, nextTag, offset, prevTag, prevToken, ref, ref1, ref2, ref3, ref4, ref5, s, sameLine, stackIdx, stackTag, stackTop, startIdx, startImplicitCall, startImplicitObject, startsLine, tag;
        tag = token[0];
        prevTag = (prevToken = i > 0 ? tokens[i - 1] : [])[0];
        nextTag = (i < tokens.length - 1 ? tokens[i + 1] : [])[0];
        stackTop = function() {
          return stack[stack.length - 1];
        };
        startIdx = i;
        forward = function(n) {
          return i - startIdx + n;
        };
        inImplicit = function() {
          var ref, ref1;
          return (ref = stackTop()) != null ? (ref1 = ref[2]) != null ? ref1.ours : void 0 : void 0;
        };
        inImplicitCall = function() {
          var ref;
          return inImplicit() && ((ref = stackTop()) != null ? ref[0] : void 0) === '(';
        };
        inImplicitObject = function() {
          var ref;
          return inImplicit() && ((ref = stackTop()) != null ? ref[0] : void 0) === '{';
        };
        inImplicitControl = function() {
          var ref;
          return inImplicit && ((ref = stackTop()) != null ? ref[0] : void 0) === 'CONTROL';
        };
        startImplicitCall = function(j) {
          var idx;
          idx = j != null ? j : i;
          stack.push([
            '(', idx, {
              ours: true
            }
          ]);
          tokens.splice(idx, 0, generate('CALL_START', '('));
          if (j == null) {
            return i += 1;
          }
        };
        endImplicitCall = function() {
          stack.pop();
          tokens.splice(i, 0, generate('CALL_END', ')', ['', 'end of input', token[2]]));
          return i += 1;
        };
        startImplicitObject = function(j, startsLine) {
          var idx, val;
          if (startsLine == null) {
            startsLine = true;
          }
          idx = j != null ? j : i;
          stack.push([
            '{', idx, {
              sameLine: true,
              startsLine: startsLine,
              ours: true
            }
          ]);
          val = new String('{');
          val.generated = true;
          tokens.splice(idx, 0, generate('{', val, token));
          if (j == null) {
            return i += 1;
          }
        };
        endImplicitObject = function(j) {
          j = j != null ? j : i;
          stack.pop();
          tokens.splice(j, 0, generate('}', '}', token));
          return i += 1;
        };
        if (inImplicitCall() && (tag === 'IF' || tag === 'TRY' || tag === 'FINALLY' || tag === 'CATCH' || tag === 'CLASS' || tag === 'SWITCH')) {
          stack.push([
            'CONTROL', i, {
              ours: true
            }
          ]);
          return forward(1);
        }
        if (tag === 'INDENT' && inImplicit()) {
          if (prevTag !== '=>' && prevTag !== '->' && prevTag !== '[' && prevTag !== '(' && prevTag !== ',' && prevTag !== '{' && prevTag !== 'TRY' && prevTag !== 'ELSE' && prevTag !== '=') {
            while (inImplicitCall()) {
              endImplicitCall();
            }
          }
          if (inImplicitControl()) {
            stack.pop();
          }
          stack.push([tag, i]);
          return forward(1);
        }
        if (indexOf.call(EXPRESSION_START, tag) >= 0) {
          stack.push([tag, i]);
          return forward(1);
        }
        if (indexOf.call(EXPRESSION_END, tag) >= 0) {
          while (inImplicit()) {
            if (inImplicitCall()) {
              endImplicitCall();
            } else if (inImplicitObject()) {
              endImplicitObject();
            } else {
              stack.pop();
            }
          }
          start = stack.pop();
        }
        if ((indexOf.call(IMPLICIT_FUNC, tag) >= 0 && token.spaced || tag === '?' && i > 0 && !tokens[i - 1].spaced) && (indexOf.call(IMPLICIT_CALL, nextTag) >= 0 || indexOf.call(IMPLICIT_UNSPACED_CALL, nextTag) >= 0 && !((ref = tokens[i + 1]) != null ? ref.spaced : void 0) && !((ref1 = tokens[i + 1]) != null ? ref1.newLine : void 0))) {
          if (tag === '?') {
            tag = token[0] = 'FUNC_EXIST';
          }
          startImplicitCall(i + 1);
          return forward(2);
        }
        if (indexOf.call(IMPLICIT_FUNC, tag) >= 0 && this.indexOfTag(i + 1, 'INDENT') > -1 && this.looksObjectish(i + 2) && !this.findTagsBackwards(i, ['CLASS', 'EXTENDS', 'IF', 'CATCH', 'SWITCH', 'LEADING_WHEN', 'FOR', 'WHILE', 'UNTIL'])) {
          startImplicitCall(i + 1);
          stack.push(['INDENT', i + 2]);
          return forward(3);
        }
        if (tag === ':') {
          s = (function() {
            var ref2;
            switch (false) {
              case ref2 = this.tag(i - 1), indexOf.call(EXPRESSION_END, ref2) < 0:
                return start[1];
              case this.tag(i - 2) !== '@':
                return i - 2;
              default:
                return i - 1;
            }
          }).call(this);
          while (this.tag(s - 2) === 'HERECOMMENT') {
            s -= 2;
          }
          this.insideForDeclaration = nextTag === 'FOR';
          startsLine = s === 0 || (ref2 = this.tag(s - 1), indexOf.call(LINEBREAKS, ref2) >= 0) || tokens[s - 1].newLine;
          if (stackTop()) {
            ref3 = stackTop(), stackTag = ref3[0], stackIdx = ref3[1];
            if ((stackTag === '{' || stackTag === 'INDENT' && this.tag(stackIdx - 1) === '{') && (startsLine || this.tag(s - 1) === ',' || this.tag(s - 1) === '{')) {
              return forward(1);
            }
          }
          startImplicitObject(s, !!startsLine);
          return forward(2);
        }
        if (inImplicitObject() && indexOf.call(LINEBREAKS, tag) >= 0) {
          stackTop()[2].sameLine = false;
        }
        newLine = prevTag === 'OUTDENT' || prevToken.newLine;
        if (indexOf.call(IMPLICIT_END, tag) >= 0 || indexOf.call(CALL_CLOSERS, tag) >= 0 && newLine) {
          while (inImplicit()) {
            ref4 = stackTop(), stackTag = ref4[0], stackIdx = ref4[1], (ref5 = ref4[2], sameLine = ref5.sameLine, startsLine = ref5.startsLine);
            if (inImplicitCall() && prevTag !== ',') {
              endImplicitCall();
            } else if (inImplicitObject() && !this.insideForDeclaration && sameLine && tag !== 'TERMINATOR' && prevTag !== ':') {
              endImplicitObject();
            } else if (inImplicitObject() && tag === 'TERMINATOR' && prevTag !== ',' && !(startsLine && this.looksObjectish(i + 1))) {
              if (nextTag === 'HERECOMMENT') {
                return forward(1);
              }
              endImplicitObject();
            } else {
              break;
            }
          }
        }
        if (tag === ',' && !this.looksObjectish(i + 1) && inImplicitObject() && !this.insideForDeclaration && (nextTag !== 'TERMINATOR' || !this.looksObjectish(i + 2))) {
          offset = nextTag === 'OUTDENT' ? 1 : 0;
          while (inImplicitObject()) {
            endImplicitObject(i + offset);
          }
        }
        return forward(1);
      });
    };

    Rewriter.prototype.addLocationDataToGeneratedTokens = function() {
      return this.scanTokens(function(token, i, tokens) {
        var column, line, nextLocation, prevLocation, ref, ref1;
        if (token[2]) {
          return 1;
        }
        if (!(token.generated || token.explicit)) {
          return 1;
        }
        if (token[0] === '{' && (nextLocation = (ref = tokens[i + 1]) != null ? ref[2] : void 0)) {
          line = nextLocation.first_line, column = nextLocation.first_column;
        } else if (prevLocation = (ref1 = tokens[i - 1]) != null ? ref1[2] : void 0) {
          line = prevLocation.last_line, column = prevLocation.last_column;
        } else {
          line = column = 0;
        }
        token[2] = {
          first_line: line,
          first_column: column,
          last_line: line,
          last_column: column
        };
        return 1;
      });
    };

    Rewriter.prototype.normalizeLines = function() {
      var action, condition, indent, outdent, starter;
      starter = indent = outdent = null;
      condition = function(token, i) {
        var ref, ref1, ref2, ref3;
        return token[1] !== ';' && (ref = token[0], indexOf.call(SINGLE_CLOSERS, ref) >= 0) && !(token[0] === 'TERMINATOR' && (ref1 = this.tag(i + 1), indexOf.call(EXPRESSION_CLOSE, ref1) >= 0)) && !(token[0] === 'ELSE' && starter !== 'THEN') && !(((ref2 = token[0]) === 'CATCH' || ref2 === 'FINALLY') && (starter === '->' || starter === '=>')) || (ref3 = token[0], indexOf.call(CALL_CLOSERS, ref3) >= 0) && this.tokens[i - 1].newLine;
      };
      action = function(token, i) {
        return this.tokens.splice((this.tag(i - 1) === ',' ? i - 1 : i), 0, outdent);
      };
      return this.scanTokens(function(token, i, tokens) {
        var j, k, ref, ref1, ref2, tag;
        tag = token[0];
        if (tag === 'TERMINATOR') {
          if (this.tag(i + 1) === 'ELSE' && this.tag(i - 1) !== 'OUTDENT') {
            tokens.splice.apply(tokens, [i, 1].concat(slice.call(this.indentation())));
            return 1;
          }
          if (ref = this.tag(i + 1), indexOf.call(EXPRESSION_CLOSE, ref) >= 0) {
            tokens.splice(i, 1);
            return 0;
          }
        }
        if (tag === 'CATCH') {
          for (j = k = 1; k <= 2; j = ++k) {
            if (!((ref1 = this.tag(i + j)) === 'OUTDENT' || ref1 === 'TERMINATOR' || ref1 === 'FINALLY')) {
              continue;
            }
            tokens.splice.apply(tokens, [i + j, 0].concat(slice.call(this.indentation())));
            return 2 + j;
          }
        }
        if (indexOf.call(SINGLE_LINERS, tag) >= 0 && this.tag(i + 1) !== 'INDENT' && !(tag === 'ELSE' && this.tag(i + 1) === 'IF')) {
          starter = tag;
          ref2 = this.indentation(tokens[i]), indent = ref2[0], outdent = ref2[1];
          if (starter === 'THEN') {
            indent.fromThen = true;
          }
          tokens.splice(i + 1, 0, indent);
          this.detectEnd(i + 2, condition, action);
          if (tag === 'THEN') {
            tokens.splice(i, 1);
          }
          return 1;
        }
        return 1;
      });
    };

    Rewriter.prototype.tagPostfixConditionals = function() {
      var action, condition, original;
      original = null;
      condition = function(token, i) {
        var prevTag, tag;
        tag = token[0];
        prevTag = this.tokens[i - 1][0];
        return tag === 'TERMINATOR' || (tag === 'INDENT' && indexOf.call(SINGLE_LINERS, prevTag) < 0);
      };
      action = function(token, i) {
        if (token[0] !== 'INDENT' || (token.generated && !token.fromThen)) {
          return original[0] = 'POST_' + original[0];
        }
      };
      return this.scanTokens(function(token, i) {
        if (token[0] !== 'IF') {
          return 1;
        }
        original = token;
        this.detectEnd(i + 1, condition, action);
        return 1;
      });
    };

    Rewriter.prototype.indentation = function(origin) {
      var indent, outdent;
      indent = ['INDENT', 2];
      outdent = ['OUTDENT', 2];
      if (origin) {
        indent.generated = outdent.generated = true;
        indent.origin = outdent.origin = origin;
      } else {
        indent.explicit = outdent.explicit = true;
      }
      return [indent, outdent];
    };

    Rewriter.prototype.generate = generate;

    Rewriter.prototype.tag = function(i) {
      var ref;
      return (ref = this.tokens[i]) != null ? ref[0] : void 0;
    };

    return Rewriter;

  })();

  BALANCED_PAIRS = [['(', ')'], ['[', ']'], ['{', '}'], ['INDENT', 'OUTDENT'], ['CALL_START', 'CALL_END'], ['PARAM_START', 'PARAM_END'], ['INDEX_START', 'INDEX_END'], ['STRING_START', 'STRING_END'], ['REGEX_START', 'REGEX_END']];

  exports.INVERSES = INVERSES = {};

  EXPRESSION_START = [];

  EXPRESSION_END = [];

  for (k = 0, len = BALANCED_PAIRS.length; k < len; k++) {
    ref = BALANCED_PAIRS[k], left = ref[0], rite = ref[1];
    EXPRESSION_START.push(INVERSES[rite] = left);
    EXPRESSION_END.push(INVERSES[left] = rite);
  }

  EXPRESSION_CLOSE = ['CATCH', 'THEN', 'ELSE', 'FINALLY'].concat(EXPRESSION_END);

  IMPLICIT_FUNC = ['IDENTIFIER', 'SUPER', ')', 'CALL_END', ']', 'INDEX_END', '@', 'THIS'];

  IMPLICIT_CALL = ['IDENTIFIER', 'NUMBER', 'STRING', 'STRING_START', 'JS', 'REGEX', 'REGEX_START', 'NEW', 'PARAM_START', 'CLASS', 'IF', 'TRY', 'SWITCH', 'THIS', 'BOOL', 'NULL', 'UNDEFINED', 'UNARY', 'YIELD', 'UNARY_MATH', 'SUPER', 'THROW', '@', '->', '=>', '[', '(', '{', '--', '++'];

  IMPLICIT_UNSPACED_CALL = ['+', '-'];

  IMPLICIT_END = ['POST_IF', 'FOR', 'WHILE', 'UNTIL', 'WHEN', 'BY', 'LOOP', 'TERMINATOR'];

  SINGLE_LINERS = ['ELSE', '->', '=>', 'TRY', 'FINALLY', 'THEN'];

  SINGLE_CLOSERS = ['TERMINATOR', 'CATCH', 'FINALLY', 'ELSE', 'OUTDENT', 'LEADING_WHEN'];

  LINEBREAKS = ['TERMINATOR', 'INDENT', 'OUTDENT'];

  CALL_CLOSERS = ['.', '?.', '::', '?::'];

}).call(this);

  return module.exports;
})();require['./lexer'] = (function() {
  var exports = {}, module = {exports: exports};
  // Generated by CoffeeScript 1.10.0
(function() {
  var BOM, BOOL, CALLABLE, CODE, COFFEE_ALIASES, COFFEE_ALIAS_MAP, COFFEE_KEYWORDS, COMMENT, COMPARE, COMPOUND_ASSIGN, HERECOMMENT_ILLEGAL, HEREDOC_DOUBLE, HEREDOC_INDENT, HEREDOC_SINGLE, HEREGEX, HEREGEX_OMIT, IDENTIFIER, INDENTABLE_CLOSERS, INDEXABLE, INVALID_ESCAPE, INVERSES, JSTOKEN, JS_FORBIDDEN, JS_KEYWORDS, LEADING_BLANK_LINE, LINE_BREAK, LINE_CONTINUER, LOGIC, Lexer, MATH, MULTI_DENT, NOT_REGEX, NUMBER, OPERATOR, POSSIBLY_DIVISION, REGEX, REGEX_FLAGS, REGEX_ILLEGAL, RELATION, RESERVED, Rewriter, SHIFT, SIMPLE_STRING_OMIT, STRICT_PROSCRIBED, STRING_DOUBLE, STRING_OMIT, STRING_SINGLE, STRING_START, TRAILING_BLANK_LINE, TRAILING_SPACES, UNARY, UNARY_MATH, VALID_FLAGS, WHITESPACE, compact, count, invertLiterate, key, locationDataToString, ref, ref1, repeat, starts, throwSyntaxError,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  ref = require('./rewriter'), Rewriter = ref.Rewriter, INVERSES = ref.INVERSES;

  ref1 = require('./helpers'), count = ref1.count, starts = ref1.starts, compact = ref1.compact, repeat = ref1.repeat, invertLiterate = ref1.invertLiterate, locationDataToString = ref1.locationDataToString, throwSyntaxError = ref1.throwSyntaxError;

  exports.Lexer = Lexer = (function() {
    function Lexer() {}

    Lexer.prototype.tokenize = function(code, opts) {
      var consumed, end, i, ref2;
      if (opts == null) {
        opts = {};
      }
      this.literate = opts.literate;
      this.indent = 0;
      this.baseIndent = 0;
      this.indebt = 0;
      this.outdebt = 0;
      this.indents = [];
      this.ends = [];
      this.tokens = [];
      this.seenFor = false;
      this.chunkLine = opts.line || 0;
      this.chunkColumn = opts.column || 0;
      code = this.clean(code);
      i = 0;
      while (this.chunk = code.slice(i)) {
        consumed = this.identifierToken() || this.commentToken() || this.whitespaceToken() || this.lineToken() || this.stringToken() || this.numberToken() || this.regexToken() || this.jsToken() || this.literalToken();
        ref2 = this.getLineAndColumnFromChunk(consumed), this.chunkLine = ref2[0], this.chunkColumn = ref2[1];
        i += consumed;
        if (opts.untilBalanced && this.ends.length === 0) {
          return {
            tokens: this.tokens,
            index: i
          };
        }
      }
      this.closeIndentation();
      if (end = this.ends.pop()) {
        this.error("missing " + end.tag, end.origin[2]);
      }
      if (opts.rewrite === false) {
        return this.tokens;
      }
      return (new Rewriter).rewrite(this.tokens);
    };

    Lexer.prototype.clean = function(code) {
      if (code.charCodeAt(0) === BOM) {
        code = code.slice(1);
      }
      code = code.replace(/\r/g, '').replace(TRAILING_SPACES, '');
      if (WHITESPACE.test(code)) {
        code = "\n" + code;
        this.chunkLine--;
      }
      if (this.literate) {
        code = invertLiterate(code);
      }
      return code;
    };

    Lexer.prototype.identifierToken = function() {
      var alias, colon, colonOffset, forcedIdentifier, id, idLength, input, match, poppedToken, prev, ref2, ref3, ref4, ref5, tag, tagToken;
      if (!(match = IDENTIFIER.exec(this.chunk))) {
        return 0;
      }
      input = match[0], id = match[1], colon = match[2];
      idLength = id.length;
      poppedToken = void 0;
      if (id === 'own' && this.tag() === 'FOR') {
        this.token('OWN', id);
        return id.length;
      }
      if (id === 'from' && this.tag() === 'YIELD') {
        this.token('FROM', id);
        return id.length;
      }
      ref2 = this.tokens, prev = ref2[ref2.length - 1];
      forcedIdentifier = colon || (prev != null) && (((ref3 = prev[0]) === '.' || ref3 === '?.' || ref3 === '::' || ref3 === '?::') || !prev.spaced && prev[0] === '@');
      tag = 'IDENTIFIER';
      if (!forcedIdentifier && (indexOf.call(JS_KEYWORDS, id) >= 0 || indexOf.call(COFFEE_KEYWORDS, id) >= 0)) {
        tag = id.toUpperCase();
        if (tag === 'WHEN' && (ref4 = this.tag(), indexOf.call(LINE_BREAK, ref4) >= 0)) {
          tag = 'LEADING_WHEN';
        } else if (tag === 'FOR') {
          this.seenFor = true;
        } else if (tag === 'UNLESS') {
          tag = 'IF';
        } else if (tag === 'TYPEOF') {
          tag = 'TYPEOF';
        } else if (indexOf.call(UNARY, tag) >= 0) {
          tag = 'UNARY';
        } else if (indexOf.call(RELATION, tag) >= 0) {
          if (tag !== 'INSTANCEOF' && this.seenFor) {
            tag = 'FOR' + tag;
            this.seenFor = false;
          } else {
            tag = 'RELATION';
            if (this.value() === '!') {
              poppedToken = this.tokens.pop();
              id = '!' + id;
            }
          }
        }
      }
      if (indexOf.call(JS_FORBIDDEN, id) >= 0) {
        if (forcedIdentifier) {
          tag = 'IDENTIFIER';
          id = new String(id);
          id.reserved = true;
        } else if (indexOf.call(RESERVED, id) >= 0) {
          this.error("reserved word '" + id + "'", {
            length: id.length
          });
        }
      }
      if (!forcedIdentifier) {
        if (indexOf.call(COFFEE_ALIASES, id) >= 0) {
          alias = id;
          id = COFFEE_ALIAS_MAP[id];
        }
        tag = (function() {
          switch (id) {
            case '!':
              return 'UNARY';
            case '==':
            case '!=':
              return 'COMPARE';
            case '&&':
            case '||':
              return 'LOGIC';
            case 'true':
            case 'false':
              return 'BOOL';
            case 'break':
            case 'continue':
              return 'STATEMENT';
            default:
              return tag;
          }
        })();
      }
      tagToken = this.token(tag, id, 0, idLength);
      if (alias) {
        tagToken.origin = [tag, alias, tagToken[2]];
      }
      tagToken.variable = !forcedIdentifier;
      if (poppedToken) {
        ref5 = [poppedToken[2].first_line, poppedToken[2].first_column], tagToken[2].first_line = ref5[0], tagToken[2].first_column = ref5[1];
      }
      if (colon) {
        colonOffset = input.lastIndexOf(':');
        this.token(':', ':', colonOffset, colon.length);
      }
      return input.length;
    };

    Lexer.prototype.numberToken = function() {
      var binaryLiteral, lexedLength, match, number, octalLiteral;
      if (!(match = NUMBER.exec(this.chunk))) {
        return 0;
      }
      number = match[0];
      lexedLength = number.length;
      if (/^0[BOX]/.test(number)) {
        this.error("radix prefix in '" + number + "' must be lowercase", {
          offset: 1
        });
      } else if (/E/.test(number) && !/^0x/.test(number)) {
        this.error("exponential notation in '" + number + "' must be indicated with a lowercase 'e'", {
          offset: number.indexOf('E')
        });
      } else if (/^0\d*[89]/.test(number)) {
        this.error("decimal literal '" + number + "' must not be prefixed with '0'", {
          length: lexedLength
        });
      } else if (/^0\d+/.test(number)) {
        this.error("octal literal '" + number + "' must be prefixed with '0o'", {
          length: lexedLength
        });
      }
      if (octalLiteral = /^0o([0-7]+)/.exec(number)) {
        number = '0x' + parseInt(octalLiteral[1], 8).toString(16);
      }
      if (binaryLiteral = /^0b([01]+)/.exec(number)) {
        number = '0x' + parseInt(binaryLiteral[1], 2).toString(16);
      }
      this.token('NUMBER', number, 0, lexedLength);
      return lexedLength;
    };

    Lexer.prototype.stringToken = function() {
      var $, attempt, delimiter, doc, end, heredoc, i, indent, indentRegex, match, quote, ref2, ref3, regex, token, tokens;
      quote = (STRING_START.exec(this.chunk) || [])[0];
      if (!quote) {
        return 0;
      }
      regex = (function() {
        switch (quote) {
          case "'":
            return STRING_SINGLE;
          case '"':
            return STRING_DOUBLE;
          case "'''":
            return HEREDOC_SINGLE;
          case '"""':
            return HEREDOC_DOUBLE;
        }
      })();
      heredoc = quote.length === 3;
      ref2 = this.matchWithInterpolations(regex, quote), tokens = ref2.tokens, end = ref2.index;
      $ = tokens.length - 1;
      delimiter = quote.charAt(0);
      if (heredoc) {
        indent = null;
        doc = ((function() {
          var j, len, results;
          results = [];
          for (i = j = 0, len = tokens.length; j < len; i = ++j) {
            token = tokens[i];
            if (token[0] === 'NEOSTRING') {
              results.push(token[1]);
            }
          }
          return results;
        })()).join('#{}');
        while (match = HEREDOC_INDENT.exec(doc)) {
          attempt = match[1];
          if (indent === null || (0 < (ref3 = attempt.length) && ref3 < indent.length)) {
            indent = attempt;
          }
        }
        if (indent) {
          indentRegex = RegExp("^" + indent, "gm");
        }
        this.mergeInterpolationTokens(tokens, {
          delimiter: delimiter
        }, (function(_this) {
          return function(value, i) {
            value = _this.formatString(value);
            if (i === 0) {
              value = value.replace(LEADING_BLANK_LINE, '');
            }
            if (i === $) {
              value = value.replace(TRAILING_BLANK_LINE, '');
            }
            if (indentRegex) {
              value = value.replace(indentRegex, '');
            }
            return value;
          };
        })(this));
      } else {
        this.mergeInterpolationTokens(tokens, {
          delimiter: delimiter
        }, (function(_this) {
          return function(value, i) {
            value = _this.formatString(value);
            value = value.replace(SIMPLE_STRING_OMIT, function(match, offset) {
              if ((i === 0 && offset === 0) || (i === $ && offset + match.length === value.length)) {
                return '';
              } else {
                return ' ';
              }
            });
            return value;
          };
        })(this));
      }
      return end;
    };

    Lexer.prototype.commentToken = function() {
      var comment, here, match;
      if (!(match = this.chunk.match(COMMENT))) {
        return 0;
      }
      comment = match[0], here = match[1];
      if (here) {
        if (match = HERECOMMENT_ILLEGAL.exec(comment)) {
          this.error("block comments cannot contain " + match[0], {
            offset: match.index,
            length: match[0].length
          });
        }
        if (here.indexOf('\n') >= 0) {
          here = here.replace(RegExp("\\n" + (repeat(' ', this.indent)), "g"), '\n');
        }
        this.token('HERECOMMENT', here, 0, comment.length);
      }
      return comment.length;
    };

    Lexer.prototype.jsToken = function() {
      var match, script;
      if (!(this.chunk.charAt(0) === '`' && (match = JSTOKEN.exec(this.chunk)))) {
        return 0;
      }
      this.token('JS', (script = match[0]).slice(1, -1), 0, script.length);
      return script.length;
    };

    Lexer.prototype.regexToken = function() {
      var body, closed, end, flags, index, match, origin, prev, ref2, ref3, ref4, regex, tokens;
      switch (false) {
        case !(match = REGEX_ILLEGAL.exec(this.chunk)):
          this.error("regular expressions cannot begin with " + match[2], {
            offset: match.index + match[1].length
          });
          break;
        case !(match = this.matchWithInterpolations(HEREGEX, '///')):
          tokens = match.tokens, index = match.index;
          break;
        case !(match = REGEX.exec(this.chunk)):
          regex = match[0], body = match[1], closed = match[2];
          this.validateEscapes(body, {
            isRegex: true,
            offsetInChunk: 1
          });
          index = regex.length;
          ref2 = this.tokens, prev = ref2[ref2.length - 1];
          if (prev) {
            if (prev.spaced && (ref3 = prev[0], indexOf.call(CALLABLE, ref3) >= 0)) {
              if (!closed || POSSIBLY_DIVISION.test(regex)) {
                return 0;
              }
            } else if (ref4 = prev[0], indexOf.call(NOT_REGEX, ref4) >= 0) {
              return 0;
            }
          }
          if (!closed) {
            this.error('missing / (unclosed regex)');
          }
          break;
        default:
          return 0;
      }
      flags = REGEX_FLAGS.exec(this.chunk.slice(index))[0];
      end = index + flags.length;
      origin = this.makeToken('REGEX', null, 0, end);
      switch (false) {
        case !!VALID_FLAGS.test(flags):
          this.error("invalid regular expression flags " + flags, {
            offset: index,
            length: flags.length
          });
          break;
        case !(regex || tokens.length === 1):
          if (body == null) {
            body = this.formatHeregex(tokens[0][1]);
          }
          this.token('REGEX', "" + (this.makeDelimitedLiteral(body, {
            delimiter: '/'
          })) + flags, 0, end, origin);
          break;
        default:
          this.token('REGEX_START', '(', 0, 0, origin);
          this.token('IDENTIFIER', 'RegExp', 0, 0);
          this.token('CALL_START', '(', 0, 0);
          this.mergeInterpolationTokens(tokens, {
            delimiter: '"',
            double: true
          }, this.formatHeregex);
          if (flags) {
            this.token(',', ',', index, 0);
            this.token('STRING', '"' + flags + '"', index, flags.length);
          }
          this.token(')', ')', end, 0);
          this.token('REGEX_END', ')', end, 0);
      }
      return end;
    };

    Lexer.prototype.lineToken = function() {
      var diff, indent, match, noNewlines, size;
      if (!(match = MULTI_DENT.exec(this.chunk))) {
        return 0;
      }
      indent = match[0];
      this.seenFor = false;
      size = indent.length - 1 - indent.lastIndexOf('\n');
      noNewlines = this.unfinished();
      if (size - this.indebt === this.indent) {
        if (noNewlines) {
          this.suppressNewlines();
        } else {
          this.newlineToken(0);
        }
        return indent.length;
      }
      if (size > this.indent) {
        if (noNewlines) {
          this.indebt = size - this.indent;
          this.suppressNewlines();
          return indent.length;
        }
        if (!this.tokens.length) {
          this.baseIndent = this.indent = size;
          return indent.length;
        }
        diff = size - this.indent + this.outdebt;
        this.token('INDENT', diff, indent.length - size, size);
        this.indents.push(diff);
        this.ends.push({
          tag: 'OUTDENT'
        });
        this.outdebt = this.indebt = 0;
        this.indent = size;
      } else if (size < this.baseIndent) {
        this.error('missing indentation', {
          offset: indent.length
        });
      } else {
        this.indebt = 0;
        this.outdentToken(this.indent - size, noNewlines, indent.length);
      }
      return indent.length;
    };

    Lexer.prototype.outdentToken = function(moveOut, noNewlines, outdentLength) {
      var decreasedIndent, dent, lastIndent, ref2;
      decreasedIndent = this.indent - moveOut;
      while (moveOut > 0) {
        lastIndent = this.indents[this.indents.length - 1];
        if (!lastIndent) {
          moveOut = 0;
        } else if (lastIndent === this.outdebt) {
          moveOut -= this.outdebt;
          this.outdebt = 0;
        } else if (lastIndent < this.outdebt) {
          this.outdebt -= lastIndent;
          moveOut -= lastIndent;
        } else {
          dent = this.indents.pop() + this.outdebt;
          if (outdentLength && (ref2 = this.chunk[outdentLength], indexOf.call(INDENTABLE_CLOSERS, ref2) >= 0)) {
            decreasedIndent -= dent - moveOut;
            moveOut = dent;
          }
          this.outdebt = 0;
          this.pair('OUTDENT');
          this.token('OUTDENT', moveOut, 0, outdentLength);
          moveOut -= dent;
        }
      }
      if (dent) {
        this.outdebt -= moveOut;
      }
      while (this.value() === ';') {
        this.tokens.pop();
      }
      if (!(this.tag() === 'TERMINATOR' || noNewlines)) {
        this.token('TERMINATOR', '\n', outdentLength, 0);
      }
      this.indent = decreasedIndent;
      return this;
    };

    Lexer.prototype.whitespaceToken = function() {
      var match, nline, prev, ref2;
      if (!((match = WHITESPACE.exec(this.chunk)) || (nline = this.chunk.charAt(0) === '\n'))) {
        return 0;
      }
      ref2 = this.tokens, prev = ref2[ref2.length - 1];
      if (prev) {
        prev[match ? 'spaced' : 'newLine'] = true;
      }
      if (match) {
        return match[0].length;
      } else {
        return 0;
      }
    };

    Lexer.prototype.newlineToken = function(offset) {
      while (this.value() === ';') {
        this.tokens.pop();
      }
      if (this.tag() !== 'TERMINATOR') {
        this.token('TERMINATOR', '\n', offset, 0);
      }
      return this;
    };

    Lexer.prototype.suppressNewlines = function() {
      if (this.value() === '\\') {
        this.tokens.pop();
      }
      return this;
    };

    Lexer.prototype.literalToken = function() {
      var match, prev, ref2, ref3, ref4, ref5, ref6, tag, token, value;
      if (match = OPERATOR.exec(this.chunk)) {
        value = match[0];
        if (CODE.test(value)) {
          this.tagParameters();
        }
      } else {
        value = this.chunk.charAt(0);
      }
      tag = value;
      ref2 = this.tokens, prev = ref2[ref2.length - 1];
      if (value === '=' && prev) {
        if (!prev[1].reserved && (ref3 = prev[1], indexOf.call(JS_FORBIDDEN, ref3) >= 0)) {
          if (prev.origin) {
            prev = prev.origin;
          }
          this.error("reserved word '" + prev[1] + "' can't be assigned", prev[2]);
        }
        if ((ref4 = prev[1]) === '||' || ref4 === '&&') {
          prev[0] = 'COMPOUND_ASSIGN';
          prev[1] += '=';
          return value.length;
        }
      }
      if (value === ';') {
        this.seenFor = false;
        tag = 'TERMINATOR';
      } else if (value === '<') {
        tag = '<';
      } else if (value === '>') {
        tag = '>';
      } else if (value === '|') {
        tag = '|';
      } else if (value === '&') {
        tag = '&';
      } else if (indexOf.call(MATH, value) >= 0) {
        tag = 'MATH';
      } else if (indexOf.call(COMPARE, value) >= 0) {
        tag = 'COMPARE';
      } else if (indexOf.call(COMPOUND_ASSIGN, value) >= 0) {
        tag = 'COMPOUND_ASSIGN';
      } else if (indexOf.call(UNARY, value) >= 0) {
        tag = 'UNARY';
      } else if (indexOf.call(UNARY_MATH, value) >= 0) {
        tag = 'UNARY_MATH';
      } else if (indexOf.call(SHIFT, value) >= 0) {
        tag = 'SHIFT';
      } else if (indexOf.call(LOGIC, value) >= 0 || value === '?' && (prev != null ? prev.spaced : void 0)) {
        tag = 'LOGIC';
      } else if (prev && !prev.spaced) {
        if (value === '(' && (ref5 = prev[0], indexOf.call(CALLABLE, ref5) >= 0)) {
          if (prev[0] === '?') {
            prev[0] = 'FUNC_EXIST';
          }
          tag = 'CALL_START';
        } else if (value === '[' && (ref6 = prev[0], indexOf.call(INDEXABLE, ref6) >= 0)) {
          tag = 'INDEX_START';
          switch (prev[0]) {
            case '?':
              prev[0] = 'INDEX_SOAK';
          }
        }
      }
      token = this.makeToken(tag, value);
      switch (value) {
        case '(':
        case '{':
        case '[':
          this.ends.push({
            tag: INVERSES[value],
            origin: token
          });
          break;
        case ')':
        case '}':
        case ']':
          this.pair(value);
      }
      this.tokens.push(token);
      return value.length;
    };

    Lexer.prototype.tagParameters = function() {
      var i, stack, tok, tokens;
      if (this.tag() !== ')') {
        return this;
      }
      stack = [];
      tokens = this.tokens;
      i = tokens.length;
      tokens[--i][0] = 'PARAM_END';
      while (tok = tokens[--i]) {
        switch (tok[0]) {
          case ')':
            stack.push(tok);
            break;
          case '(':
          case 'CALL_START':
            if (stack.length) {
              stack.pop();
            } else if (tok[0] === '(') {
              tok[0] = 'PARAM_START';
              return this;
            } else {
              return this;
            }
        }
      }
      return this;
    };

    Lexer.prototype.closeIndentation = function() {
      return this.outdentToken(this.indent);
    };

    Lexer.prototype.matchWithInterpolations = function(regex, delimiter) {
      var close, column, firstToken, index, lastToken, line, nested, offsetInChunk, open, ref2, ref3, ref4, str, strPart, tokens;
      tokens = [];
      offsetInChunk = delimiter.length;
      if (this.chunk.slice(0, offsetInChunk) !== delimiter) {
        return null;
      }
      str = this.chunk.slice(offsetInChunk);
      while (true) {
        strPart = regex.exec(str)[0];
        this.validateEscapes(strPart, {
          isRegex: delimiter.charAt(0) === '/',
          offsetInChunk: offsetInChunk
        });
        tokens.push(this.makeToken('NEOSTRING', strPart, offsetInChunk));
        str = str.slice(strPart.length);
        offsetInChunk += strPart.length;
        if (str.slice(0, 2) !== '#{') {
          break;
        }
        ref2 = this.getLineAndColumnFromChunk(offsetInChunk + 1), line = ref2[0], column = ref2[1];
        ref3 = new Lexer().tokenize(str.slice(1), {
          line: line,
          column: column,
          untilBalanced: true
        }), nested = ref3.tokens, index = ref3.index;
        index += 1;
        open = nested[0], close = nested[nested.length - 1];
        open[0] = open[1] = '(';
        close[0] = close[1] = ')';
        close.origin = ['', 'end of interpolation', close[2]];
        if (((ref4 = nested[1]) != null ? ref4[0] : void 0) === 'TERMINATOR') {
          nested.splice(1, 1);
        }
        tokens.push(['TOKENS', nested]);
        str = str.slice(index);
        offsetInChunk += index;
      }
      if (str.slice(0, delimiter.length) !== delimiter) {
        this.error("missing " + delimiter, {
          length: delimiter.length
        });
      }
      firstToken = tokens[0], lastToken = tokens[tokens.length - 1];
      firstToken[2].first_column -= delimiter.length;
      lastToken[2].last_column += delimiter.length;
      if (lastToken[1].length === 0) {
        lastToken[2].last_column -= 1;
      }
      return {
        tokens: tokens,
        index: offsetInChunk + delimiter.length
      };
    };

    Lexer.prototype.mergeInterpolationTokens = function(tokens, options, fn) {
      var converted, firstEmptyStringIndex, firstIndex, i, j, lastToken, len, locationToken, lparen, plusToken, ref2, rparen, tag, token, tokensToPush, value;
      if (tokens.length > 1) {
        lparen = this.token('STRING_START', '(', 0, 0);
      }
      firstIndex = this.tokens.length;
      for (i = j = 0, len = tokens.length; j < len; i = ++j) {
        token = tokens[i];
        tag = token[0], value = token[1];
        switch (tag) {
          case 'TOKENS':
            if (value.length === 2) {
              continue;
            }
            locationToken = value[0];
            tokensToPush = value;
            break;
          case 'NEOSTRING':
            converted = fn(token[1], i);
            if (converted.length === 0) {
              if (i === 0) {
                firstEmptyStringIndex = this.tokens.length;
              } else {
                continue;
              }
            }
            if (i === 2 && (firstEmptyStringIndex != null)) {
              this.tokens.splice(firstEmptyStringIndex, 2);
            }
            token[0] = 'STRING';
            token[1] = this.makeDelimitedLiteral(converted, options);
            locationToken = token;
            tokensToPush = [token];
        }
        if (this.tokens.length > firstIndex) {
          plusToken = this.token('+', '+');
          plusToken[2] = {
            first_line: locationToken[2].first_line,
            first_column: locationToken[2].first_column,
            last_line: locationToken[2].first_line,
            last_column: locationToken[2].first_column
          };
        }
        (ref2 = this.tokens).push.apply(ref2, tokensToPush);
      }
      if (lparen) {
        lastToken = tokens[tokens.length - 1];
        lparen.origin = [
          'STRING', null, {
            first_line: lparen[2].first_line,
            first_column: lparen[2].first_column,
            last_line: lastToken[2].last_line,
            last_column: lastToken[2].last_column
          }
        ];
        rparen = this.token('STRING_END', ')');
        return rparen[2] = {
          first_line: lastToken[2].last_line,
          first_column: lastToken[2].last_column,
          last_line: lastToken[2].last_line,
          last_column: lastToken[2].last_column
        };
      }
    };

    Lexer.prototype.pair = function(tag) {
      var lastIndent, prev, ref2, ref3, wanted;
      ref2 = this.ends, prev = ref2[ref2.length - 1];
      if (tag !== (wanted = prev != null ? prev.tag : void 0)) {
        if ('OUTDENT' !== wanted) {
          this.error("unmatched " + tag);
        }
        ref3 = this.indents, lastIndent = ref3[ref3.length - 1];
        this.outdentToken(lastIndent, true);
        return this.pair(tag);
      }
      return this.ends.pop();
    };

    Lexer.prototype.getLineAndColumnFromChunk = function(offset) {
      var column, lastLine, lineCount, ref2, string;
      if (offset === 0) {
        return [this.chunkLine, this.chunkColumn];
      }
      if (offset >= this.chunk.length) {
        string = this.chunk;
      } else {
        string = this.chunk.slice(0, +(offset - 1) + 1 || 9e9);
      }
      lineCount = count(string, '\n');
      column = this.chunkColumn;
      if (lineCount > 0) {
        ref2 = string.split('\n'), lastLine = ref2[ref2.length - 1];
        column = lastLine.length;
      } else {
        column += string.length;
      }
      return [this.chunkLine + lineCount, column];
    };

    Lexer.prototype.makeToken = function(tag, value, offsetInChunk, length) {
      var lastCharacter, locationData, ref2, ref3, token;
      if (offsetInChunk == null) {
        offsetInChunk = 0;
      }
      if (length == null) {
        length = value.length;
      }
      locationData = {};
      ref2 = this.getLineAndColumnFromChunk(offsetInChunk), locationData.first_line = ref2[0], locationData.first_column = ref2[1];
      lastCharacter = Math.max(0, length - 1);
      ref3 = this.getLineAndColumnFromChunk(offsetInChunk + lastCharacter), locationData.last_line = ref3[0], locationData.last_column = ref3[1];
      token = [tag, value, locationData];
      return token;
    };

    Lexer.prototype.token = function(tag, value, offsetInChunk, length, origin) {
      var token;
      token = this.makeToken(tag, value, offsetInChunk, length);
      if (origin) {
        token.origin = origin;
      }
      this.tokens.push(token);
      return token;
    };

    Lexer.prototype.tag = function() {
      var ref2, token;
      ref2 = this.tokens, token = ref2[ref2.length - 1];
      return token != null ? token[0] : void 0;
    };

    Lexer.prototype.value = function() {
      var ref2, token;
      ref2 = this.tokens, token = ref2[ref2.length - 1];
      return token != null ? token[1] : void 0;
    };

    Lexer.prototype.unfinished = function() {
      var ref2;
      return LINE_CONTINUER.test(this.chunk) || ((ref2 = this.tag()) === '\\' || ref2 === '.' || ref2 === '?.' || ref2 === '?::' || ref2 === 'UNARY' || ref2 === 'MATH' || ref2 === 'UNARY_MATH' || ref2 === '+' || ref2 === '-' || ref2 === '**' || ref2 === 'SHIFT' || ref2 === 'RELATION' || ref2 === 'COMPARE' || ref2 === 'LOGIC' || ref2 === 'THROW' || ref2 === 'EXTENDS');
    };

    Lexer.prototype.formatString = function(str) {
      return str.replace(STRING_OMIT, '$1');
    };

    Lexer.prototype.formatHeregex = function(str) {
      return str.replace(HEREGEX_OMIT, '$1$2');
    };

    Lexer.prototype.validateEscapes = function(str, options) {
      var before, hex, invalidEscape, match, message, octal, ref2, unicode;
      if (options == null) {
        options = {};
      }
      match = INVALID_ESCAPE.exec(str);
      if (!match) {
        return;
      }
      match[0], before = match[1], octal = match[2], hex = match[3], unicode = match[4];
      if (options.isRegex && octal && octal.charAt(0) !== '0') {
        return;
      }
      message = octal ? "octal escape sequences are not allowed" : "invalid escape sequence";
      invalidEscape = "\\" + (octal || hex || unicode);
      return this.error(message + " " + invalidEscape, {
        offset: ((ref2 = options.offsetInChunk) != null ? ref2 : 0) + match.index + before.length,
        length: invalidEscape.length
      });
    };

    Lexer.prototype.makeDelimitedLiteral = function(body, options) {
      var regex;
      if (options == null) {
        options = {};
      }
      if (body === '' && options.delimiter === '/') {
        body = '(?:)';
      }
      regex = RegExp("(\\\\\\\\)|(\\\\0(?=[1-7]))|\\\\?(" + options.delimiter + ")|\\\\?(?:(\\n)|(\\r)|(\\u2028)|(\\u2029))|(\\\\.)", "g");
      body = body.replace(regex, function(match, backslash, nul, delimiter, lf, cr, ls, ps, other) {
        switch (false) {
          case !backslash:
            if (options.double) {
              return backslash + backslash;
            } else {
              return backslash;
            }
          case !nul:
            return '\\x00';
          case !delimiter:
            return "\\" + delimiter;
          case !lf:
            return '\\n';
          case !cr:
            return '\\r';
          case !ls:
            return '\\u2028';
          case !ps:
            return '\\u2029';
          case !other:
            if (options.double) {
              return "\\" + other;
            } else {
              return other;
            }
        }
      });
      return "" + options.delimiter + body + options.delimiter;
    };

    Lexer.prototype.error = function(message, options) {
      var first_column, first_line, location, ref2, ref3, ref4;
      if (options == null) {
        options = {};
      }
      location = 'first_line' in options ? options : ((ref3 = this.getLineAndColumnFromChunk((ref2 = options.offset) != null ? ref2 : 0), first_line = ref3[0], first_column = ref3[1], ref3), {
        first_line: first_line,
        first_column: first_column,
        last_column: first_column + ((ref4 = options.length) != null ? ref4 : 1) - 1
      });
      return throwSyntaxError(message, location);
    };

    return Lexer;

  })();

  JS_KEYWORDS = ['true', 'false', 'null', 'this', 'new', 'delete', 'typeof', 'in', 'instanceof', 'return', 'throw', 'break', 'continue', 'debugger', 'yield', 'if', 'else', 'switch', 'for', 'while', 'do', 'try', 'catch', 'finally', 'class', 'extends', 'super'];

  COFFEE_KEYWORDS = ['undefined', 'then', 'unless', 'until', 'loop', 'of', 'by', 'when'];

  COFFEE_ALIAS_MAP = {
    and: '&&',
    or: '||',
    is: '==',
    isnt: '!=',
    not: '!',
    yes: 'true',
    no: 'false',
    on: 'true',
    off: 'false'
  };

  COFFEE_ALIASES = (function() {
    var results;
    results = [];
    for (key in COFFEE_ALIAS_MAP) {
      results.push(key);
    }
    return results;
  })();

  COFFEE_KEYWORDS = COFFEE_KEYWORDS.concat(COFFEE_ALIASES);

  RESERVED = ['case', 'default', 'function', 'var', 'with', 'const', 'let', 'enum', 'export', 'import', 'native', 'implements', 'interface', 'package', 'private', 'protected', 'public', 'static'];

  STRICT_PROSCRIBED = ['arguments', 'eval', 'yield*'];

  JS_FORBIDDEN = JS_KEYWORDS.concat(RESERVED).concat(STRICT_PROSCRIBED);

  exports.RESERVED = RESERVED.concat(JS_KEYWORDS).concat(COFFEE_KEYWORDS).concat(STRICT_PROSCRIBED);

  exports.STRICT_PROSCRIBED = STRICT_PROSCRIBED;

  BOM = 65279;

  IDENTIFIER = /^(?!\d)((?:(?!\s)[$\w\x7f-\uffff])+)([^\n\S]*:(?!:))?/;

  NUMBER = /^0b[01]+|^0o[0-7]+|^0x[\da-f]+|^\d*\.?\d+(?:e[+-]?\d+)?/i;

  OPERATOR = /^(?:[-=]>|\~\>|:::|[-+*\/%<>&|^!?=]=|>>>=?|([-+:])\1|([&|<>*\/%])\2=?|\?(\.|::)|\.{2,3})/;

  WHITESPACE = /^[^\n\S]+/;

  COMMENT = /^###([^#][\s\S]*?)(?:###[^\n\S]*|###$)|^(?:\s*#(?!##[^#]).*)+/;

  CODE = /^[-=]>/;

  MULTI_DENT = /^(?:\n[^\n\S]*)+/;

  JSTOKEN = /^`[^\\`]*(?:\\.[^\\`]*)*`/;

  STRING_START = /^(?:'''|"""|'|")/;

  STRING_SINGLE = /^(?:[^\\']|\\[\s\S])*/;

  STRING_DOUBLE = /^(?:[^\\"#]|\\[\s\S]|\#(?!\{))*/;

  HEREDOC_SINGLE = /^(?:[^\\']|\\[\s\S]|'(?!''))*/;

  HEREDOC_DOUBLE = /^(?:[^\\"#]|\\[\s\S]|"(?!"")|\#(?!\{))*/;

  STRING_OMIT = /((?:\\\\)+)|\\[^\S\n]*\n\s*/g;

  SIMPLE_STRING_OMIT = /\s*\n\s*/g;

  HEREDOC_INDENT = /\n+([^\n\S]*)(?=\S)/g;

  REGEX = /^\/(?!\/)((?:[^[\/\n\\]|\\[^\n]|\[(?:\\[^\n]|[^\]\n\\])*\])*)(\/)?/;

  REGEX_FLAGS = /^\w*/;

  VALID_FLAGS = /^(?!.*(.).*\1)[imgy]*$/;

  HEREGEX = /^(?:[^\\\/#]|\\[\s\S]|\/(?!\/\/)|\#(?!\{))*/;

  HEREGEX_OMIT = /((?:\\\\)+)|\\(\s)|\s+(?:#.*)?/g;

  REGEX_ILLEGAL = /^(\/|\/{3}\s*)(\*)/;

  POSSIBLY_DIVISION = /^\/=?\s/;

  HERECOMMENT_ILLEGAL = /\*\//;

  LINE_CONTINUER = /^\s*(?:,|\??\.(?![.\d])|::)/;

  INVALID_ESCAPE = /((?:^|[^\\])(?:\\\\)*)\\(?:(0[0-7]|[1-7])|(x(?![\da-fA-F]{2}).{0,2})|(u(?![\da-fA-F]{4}).{0,4}))/;

  LEADING_BLANK_LINE = /^[^\n\S]*\n/;

  TRAILING_BLANK_LINE = /\n[^\n\S]*$/;

  TRAILING_SPACES = /\s+$/;

  COMPOUND_ASSIGN = ['-=', '+=', '/=', '*=', '%=', '||=', '&&=', '?=', '<<=', '>>=', '>>>=', '&=', '^=', '|=', '**=', '//=', '%%='];

  UNARY = ['NEW', 'TYPEOF', 'DELETE', 'DO'];

  UNARY_MATH = ['!', '~'];

  LOGIC = ['&&', '||', '&', '|', '^'];

  SHIFT = ['<<', '>>', '>>>'];

  COMPARE = ['==', '!=', '<', '>', '<=', '>='];

  MATH = ['*', '/', '%', '//', '%%'];

  RELATION = ['IN', 'OF', 'INSTANCEOF'];

  BOOL = ['TRUE', 'FALSE'];

  CALLABLE = ['IDENTIFIER', ')', ']', '?', '@', 'THIS', 'SUPER'];

  INDEXABLE = CALLABLE.concat(['NUMBER', 'STRING', 'STRING_END', 'REGEX', 'REGEX_END', 'BOOL', 'NULL', 'UNDEFINED', '}', '::']);

  NOT_REGEX = INDEXABLE.concat(['++', '--']);

  LINE_BREAK = ['INDENT', 'OUTDENT', 'TERMINATOR'];

  INDENTABLE_CLOSERS = [')', '}', ']'];

}).call(this);

  return module.exports;
})();require['./parser'] = (function() {
  var exports = {}, module = {exports: exports};
  /* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,23],$V1=[1,24],$V2=[1,78],$V3=[1,74],$V4=[1,79],$V5=[1,80],$V6=[1,76],$V7=[1,77],$V8=[1,53],$V9=[1,55],$Va=[1,56],$Vb=[1,57],$Vc=[1,58],$Vd=[1,50],$Ve=[1,51],$Vf=[1,30],$Vg=[1,63],$Vh=[1,64],$Vi=[1,73],$Vj=[1,46],$Vk=[1,29],$Vl=[1,61],$Vm=[1,62],$Vn=[1,60],$Vo=[1,41],$Vp=[1,47],$Vq=[1,59],$Vr=[1,68],$Vs=[1,69],$Vt=[1,70],$Vu=[1,71],$Vv=[1,45],$Vw=[1,67],$Vx=[1,32],$Vy=[1,33],$Vz=[1,34],$VA=[1,35],$VB=[1,36],$VC=[1,37],$VD=[1,38],$VE=[1,81],$VF=[1,6,32,40,115],$VG=[1,95],$VH=[1,84],$VI=[1,83],$VJ=[1,82],$VK=[1,85],$VL=[1,86],$VM=[1,87],$VN=[1,88],$VO=[1,89],$VP=[1,90],$VQ=[1,91],$VR=[1,92],$VS=[1,93],$VT=[1,94],$VU=[1,98],$VV=[1,6,31,32,40,62,67,70,86,91,99,104,106,115,117,118,119,123,124,139,143,144,147,148,149,150,151,152,153,154,155,156,157],$VW=[1,104],$VX=[1,105],$VY=[1,106],$VZ=[1,107],$V_=[1,109],$V$=[1,110],$V01=[1,103],$V11=[2,123],$V21=[1,6,31,32,40,62,67,70,79,80,81,82,84,86,87,91,97,98,99,104,106,115,117,118,119,123,124,139,143,144,147,148,149,150,151,152,153,154,155,156,157],$V31=[2,90],$V41=[2,239],$V51=[1,115],$V61=[1,6,32,40,115,117,119,123,139],$V71=[2,26],$V81=[1,120],$V91=[1,118],$Va1=[1,122],$Vb1=[2,69],$Vc1=[1,126],$Vd1=[1,131],$Ve1=[1,132],$Vf1=[1,134],$Vg1=[1,6,31,32,40,52,62,67,70,79,80,81,82,84,86,87,91,97,98,99,104,106,115,117,118,119,123,124,139,143,144,147,148,149,150,151,152,153,154,155,156,157,167],$Vh1=[2,87],$Vi1=[1,6,32,40,62,67,70,86,91,99,104,106,115,117,118,119,123,124,139,143,144,147,148,149,150,151,152,153,154,155,156,157],$Vj1=[2,59],$Vk1=[1,166],$Vl1=[1,168],$Vm1=[1,163],$Vn1=[1,6,31,32,40,52,62,67,70,79,80,81,82,84,86,87,91,93,97,98,99,104,106,115,117,118,119,123,124,139,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,167],$Vo1=[2,106],$Vp1=[1,6,31,32,40,55,62,67,70,79,80,81,82,84,86,87,91,97,98,99,104,106,115,117,118,119,123,124,139,143,144,147,148,149,150,151,152,153,154,155,156,157],$Vq1=[1,6,31,32,40,52,55,62,67,70,79,80,81,82,84,86,87,91,93,97,98,99,104,106,115,117,118,119,123,124,130,131,139,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,167],$Vr1=[1,6,31,32,40,55,62,67,70,79,80,81,82,84,86,87,91,97,98,99,104,106,115,117,118,119,123,124,139,143,144,147,148,149,150,151,152,153,154,155,156,157,167,190],$Vs1=[1,222],$Vt1=[1,221],$Vu1=[2,240],$Vv1=[1,247],$Vw1=[1,243],$Vx1=[1,244],$Vy1=[1,232],$Vz1=[1,245],$VA1=[1,231],$VB1=[1,6,31,32,40,62,67,70,86,91,99,104,106,115,117,118,119,123,124,139],$VC1=[1,6,31,32,40,44,62,67,70,79,80,81,82,84,86,87,91,97,98,99,104,106,115,117,118,119,123,124,139,143,144,147,148,149,150,151,152,153,154,155,156,157],$VD1=[2,67],$VE1=[1,254],$VF1=[6,31,32,62,67],$VG1=[6,31,32,52,62,67,70],$VH1=[1,6,31,32,40,62,67,70,86,91,99,104,106,115,117,118,119,123,124,139,143,144,148,149,150,151,152,153,154,155,156,157],$VI1=[1,6,31,32,40,62,67,70,86,91,99,104,106,115,117,118,119,123,124,139,143,144,148,150,151,152,153,154,155,156,157],$VJ1=[79,80,81,82,84,87,97,98],$VK1=[1,272],$VL1=[2,58],$VM1=[2,144],$VN1=[1,6,31,32,40,52,62,67,70,79,80,81,82,84,86,87,91,97,98,99,104,106,115,117,118,119,123,124,130,131,139,143,144,147,148,149,150,151,152,153,154,155,156,157,167],$VO1=[1,281],$VP1=[6,31,32,67,99,104],$VQ1=[1,6,31,32,40,62,67,70,86,91,99,104,106,115,124,139],$VR1=[1,6,31,32,40,62,67,70,86,91,99,104,106,115,118,124,139],$VS1=[130,131],$VT1=[67,130,131],$VU1=[1,292],$VV1=[6,31,32,67,91],$VW1=[6,31,32,55,67,91],$VX1=[6,31,32,52,55,67,91],$VY1=[1,6,31,32,40,62,67,70,86,91,99,104,106,115,117,118,119,123,124,139,143,144,150,151,152,153,154,155,156,157],$VZ1=[1,6,31,32,40,62,67,70,86,91,99,104,106,115,117,118,119,123,124,139,151,152,153,154,155,156],$V_1=[1,6,31,32,40,62,67,70,86,91,99,104,106,115,117,118,119,123,124,139,154,155,156],$V$1=[14,28,34,36,38,39,42,43,46,47,48,49,50,58,59,60,64,65,86,89,92,96,101,102,103,109,113,114,117,119,121,123,132,138,140,141,142,143,144,145,146],$V02=[2,133],$V12=[1,6,32,40,52,67,91,104,115,117,119,123,139,153,190],$V22=[1,6,32,40,52,67,91,104,115,117,119,123,139,153,155,190],$V32=[1,304],$V42=[1,6,32,40,52,67,91,104,115,117,119,123,139,153,155,156,190],$V52=[1,308],$V62=[1,6,32,40,52,67,84,91,104,115,117,119,123,139,153,155,156,190],$V72=[1,323],$V82=[1,325],$V92=[1,319],$Va2=[1,6,32,40,52,67,79,84,91,104,115,117,119,123,139,152,153,155,156,190],$Vb2=[6,31,32],$Vc2=[2,68],$Vd2=[1,334],$Ve2=[1,335],$Vf2=[1,6,31,32,40,62,67,70,86,91,99,104,106,111,112,115,117,118,119,123,124,134,136,139,143,144,147,148,149,150,151,152,153,154,155,156,157],$Vg2=[32,134,136],$Vh2=[1,6,32,40,62,67,70,86,91,99,104,106,115,118,124,139],$Vi2=[2,82],$Vj2=[1,357],$Vk2=[1,358],$Vl2=[1,6,31,32,40,62,67,70,86,91,99,104,106,115,117,118,119,123,124,134,139,143,144,147,148,149,150,151,152,153,154,155,156,157],$Vm2=[1,6,31,32,40,62,67,70,86,91,99,104,106,115,117,119,123,124,139],$Vn2=[1,369],$Vo2=[1,370],$Vp2=[1,380],$Vq2=[67,91,190],$Vr2=[67,91,147,167,190],$Vs2=[67,104],$Vt2=[1,6,32,40,52,67,79,84,91,104,115,117,119,123,139,153,155,156,190],$Vu2=[6,31,32,67],$Vv2=[1,6,31,32,40,62,67,70,86,91,99,104,106,111,115,117,118,119,123,124,139,143,144,147,148,149,150,151,152,153,154,155,156,157],$Vw2=[31,67],$Vx2=[67,153];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"Root":3,"Body":4,"Line":5,"TERMINATOR":6,"Expression":7,"Statement":8,"YieldReturn":9,"Assignable":10,"TypeAnnotation":11,"Return":12,"Comment":13,"STATEMENT":14,"Value":15,"Invocation":16,"Code":17,"Operation":18,"Assign":19,"If":20,"Try":21,"While":22,"For":23,"Switch":24,"Class":25,"Throw":26,"Yield":27,"YIELD":28,"FROM":29,"Block":30,"INDENT":31,"OUTDENT":32,"Identifier":33,"IDENTIFIER":34,"AlphaNumeric":35,"NUMBER":36,"String":37,"STRING":38,"STRING_START":39,"STRING_END":40,"Regex":41,"REGEX":42,"REGEX_START":43,"REGEX_END":44,"Literal":45,"JS":46,"DEBUGGER":47,"UNDEFINED":48,"NULL":49,"BOOL":50,"OptTypeAnnotation":51,"=":52,"AssignObj":53,"ObjAssignable":54,":":55,"SimpleObjAssignable":56,"ThisProperty":57,"RETURN":58,"HERECOMMENT":59,"PARAM_START":60,"ParamList":61,"PARAM_END":62,"FuncGlyph":63,"->":64,"=>":65,"OptComma":66,",":67,"Param":68,"ParamVar":69,"...":70,"Array":71,"Object":72,"Splat":73,"SimpleAssignable":74,"Accessor":75,"Parenthetical":76,"Range":77,"This":78,".":79,"?.":80,"::":81,"?::":82,"Index":83,"INDEX_START":84,"IndexValue":85,"INDEX_END":86,"INDEX_SOAK":87,"Slice":88,"{":89,"AssignList":90,"}":91,"CLASS":92,"EXTENDS":93,"OptFuncExist":94,"Arguments":95,"SUPER":96,"FUNC_EXIST":97,"CALL_START":98,"CALL_END":99,"ArgList":100,"THIS":101,"@":102,"[":103,"]":104,"RangeDots":105,"..":106,"Arg":107,"SimpleArgs":108,"TRY":109,"Catch":110,"FINALLY":111,"CATCH":112,"THROW":113,"(":114,")":115,"WhileSource":116,"WHILE":117,"WHEN":118,"UNTIL":119,"Loop":120,"LOOP":121,"ForBody":122,"FOR":123,"BY":124,"ForStart":125,"ForSource":126,"ForVariables":127,"OWN":128,"ForValue":129,"FORIN":130,"FOROF":131,"SWITCH":132,"Whens":133,"ELSE":134,"When":135,"LEADING_WHEN":136,"IfBlock":137,"IF":138,"POST_IF":139,"UNARY":140,"TYPEOF":141,"UNARY_MATH":142,"-":143,"+":144,"--":145,"++":146,"?":147,"MATH":148,"**":149,"SHIFT":150,"COMPARE":151,"<":152,">":153,"LOGIC":154,"|":155,"&":156,"RELATION":157,"COMPOUND_ASSIGN":158,"IdentifierName":159,"IdentifierReference":160,"BindingIdentifier":161,"BindingPattern":162,"ObjectBindingPattern":163,"ArrayBindingPattern":164,"StringLiteral":165,"NumericLiteral":166,":::":167,"Type":168,"UnionOrIntersectionOrPrimaryType":169,"FunctionType":170,"UnionType":171,"IntersectionOrPrimaryType":172,"IntersectionType":173,"PrimaryType":174,"ParenthesizedType":175,"PredefinedType":176,"TypeReference":177,"ObjectType":178,"ArrayType":179,"TupleType":180,"TypeQuery":181,"TypeName":182,"TypeArguments":183,"TypeArgumentList":184,"TypeArgument":185,"TupleElementTypes":186,"TypeQueryExpression":187,"TypeBody":188,"TypeMemberList":189,";":190,"TypeMember":191,"PropertySignature":192,"IndexSignature":193,"PropertyName":194,"~>":195,"TypeParameters":196,"TypeParameterList":197,"TypeParameter":198,"$accept":0,"$end":1},
terminals_: {2:"error",6:"TERMINATOR",14:"STATEMENT",28:"YIELD",29:"FROM",31:"INDENT",32:"OUTDENT",34:"IDENTIFIER",36:"NUMBER",38:"STRING",39:"STRING_START",40:"STRING_END",42:"REGEX",43:"REGEX_START",44:"REGEX_END",46:"JS",47:"DEBUGGER",48:"UNDEFINED",49:"NULL",50:"BOOL",52:"=",55:":",58:"RETURN",59:"HERECOMMENT",60:"PARAM_START",62:"PARAM_END",64:"->",65:"=>",67:",",70:"...",79:".",80:"?.",81:"::",82:"?::",84:"INDEX_START",86:"INDEX_END",87:"INDEX_SOAK",89:"{",91:"}",92:"CLASS",93:"EXTENDS",96:"SUPER",97:"FUNC_EXIST",98:"CALL_START",99:"CALL_END",101:"THIS",102:"@",103:"[",104:"]",106:"..",109:"TRY",111:"FINALLY",112:"CATCH",113:"THROW",114:"(",115:")",117:"WHILE",118:"WHEN",119:"UNTIL",121:"LOOP",123:"FOR",124:"BY",128:"OWN",130:"FORIN",131:"FOROF",132:"SWITCH",134:"ELSE",136:"LEADING_WHEN",138:"IF",139:"POST_IF",140:"UNARY",141:"TYPEOF",142:"UNARY_MATH",143:"-",144:"+",145:"--",146:"++",147:"?",148:"MATH",149:"**",150:"SHIFT",151:"COMPARE",152:"<",153:">",154:"LOGIC",155:"|",156:"&",157:"RELATION",158:"COMPOUND_ASSIGN",167:":::",190:";",195:"~>"},
productions_: [0,[3,0],[3,1],[4,1],[4,3],[4,2],[5,1],[5,1],[5,1],[8,2],[8,1],[8,1],[8,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[27,1],[27,2],[27,3],[30,2],[30,3],[33,1],[35,1],[35,1],[37,1],[37,3],[41,1],[41,3],[45,1],[45,1],[45,1],[45,1],[45,1],[45,1],[45,1],[19,4],[19,5],[19,6],[53,1],[53,3],[53,5],[53,3],[53,5],[53,1],[56,1],[56,1],[54,1],[54,1],[12,2],[12,1],[9,3],[9,2],[13,1],[17,5],[17,2],[63,1],[63,1],[66,0],[66,1],[61,0],[61,1],[61,3],[61,4],[61,6],[68,1],[68,2],[68,3],[68,1],[69,1],[69,1],[69,1],[69,1],[73,2],[74,1],[74,2],[74,2],[74,1],[10,1],[10,1],[10,1],[15,1],[15,1],[15,1],[15,1],[15,1],[75,2],[75,2],[75,2],[75,2],[75,1],[75,1],[83,3],[83,2],[85,1],[85,1],[72,4],[90,0],[90,1],[90,3],[90,4],[90,6],[25,1],[25,2],[25,3],[25,4],[25,2],[25,3],[25,4],[25,5],[16,3],[16,3],[16,1],[16,2],[94,0],[94,1],[95,2],[95,4],[78,1],[78,1],[57,2],[71,2],[71,4],[105,1],[105,1],[77,5],[88,3],[88,2],[88,2],[88,1],[100,1],[100,3],[100,4],[100,4],[100,6],[107,1],[107,1],[107,1],[108,1],[108,3],[21,2],[21,3],[21,4],[21,5],[110,3],[110,3],[110,2],[26,2],[76,3],[76,5],[116,2],[116,4],[116,2],[116,4],[22,2],[22,2],[22,2],[22,1],[120,2],[120,2],[23,2],[23,2],[23,2],[122,2],[122,4],[122,2],[125,2],[125,3],[129,1],[129,1],[129,1],[129,1],[127,1],[127,3],[126,2],[126,2],[126,4],[126,4],[126,4],[126,6],[126,6],[24,5],[24,7],[24,4],[24,6],[133,1],[133,2],[135,3],[135,4],[137,3],[137,5],[20,1],[20,3],[20,3],[20,3],[18,2],[18,2],[18,2],[18,2],[18,2],[18,2],[18,2],[18,2],[18,2],[18,2],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,5],[18,4],[18,3],[159,1],[160,1],[161,1],[162,1],[162,1],[163,1],[164,1],[165,1],[166,1],[51,0],[51,1],[11,2],[168,1],[168,1],[169,1],[169,1],[172,1],[172,1],[174,1],[174,1],[174,1],[174,1],[174,1],[174,1],[174,1],[175,3],[177,1],[177,2],[182,1],[182,3],[183,3],[184,1],[184,3],[185,1],[179,3],[180,3],[186,1],[186,3],[171,3],[173,3],[181,2],[187,1],[187,3],[178,2],[178,3],[188,1],[188,2],[188,2],[189,1],[189,3],[189,3],[191,1],[191,1],[192,2],[192,3],[194,1],[194,1],[194,1],[193,5],[170,2],[170,4],[196,3],[197,1],[197,3],[198,1],[198,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Block);
break;
case 2:
return this.$ = $$[$0];
break;
case 3:
this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(yy.Block.wrap([$$[$0]]));
break;
case 4:
this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])($$[$0-2].push($$[$0]));
break;
case 5: case 9:
this.$ = $$[$0-1];
break;
case 6: case 7: case 8: case 10: case 11: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 33: case 38: case 40: case 53: case 54: case 55: case 56: case 57: case 67: case 68: case 78: case 79: case 80: case 81: case 86: case 87: case 90: case 94: case 100: case 144: case 145: case 147: case 177: case 178: case 194: case 200: case 230: case 231: case 232: case 233: case 234: case 235: case 236: case 237: case 238: case 240: case 242: case 243: case 244: case 245: case 246: case 247: case 248: case 249: case 250: case 251: case 252: case 253: case 254: case 263: case 275: case 281: case 282: case 285: case 286: case 287:
this.$ = $$[$0];
break;
case 12: case 31: case 32: case 34: case 36: case 39: case 41:
this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Literal($$[$0]));
break;
case 26:
this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Op($$[$0], new yy.Value(new yy.Literal(''))));
break;
case 27: case 204: case 205: case 206:
this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Op($$[$0-1], $$[$0]));
break;
case 28:
this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.Op($$[$0-2].concat($$[$0-1]), $$[$0]));
break;
case 29:
this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Block);
break;
case 30: case 37: case 101: case 255: case 260: case 291:
this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])($$[$0-1]);
break;
case 35: case 157:
this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.Parens($$[$0-1]));
break;
case 42:
this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Undefined);
break;
case 43:
this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Null);
break;
case 44:
this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Bool($$[$0]));
break;
case 45:
this.$ = yy.addLocationDataFn(_$[$0-3], _$[$0])(new yy.Assign($$[$0-3], $$[$0], null, null, $$[$0-2]));
break;
case 46:
this.$ = yy.addLocationDataFn(_$[$0-4], _$[$0])(new yy.Assign($$[$0-4], $$[$0], null, null, $$[$0-3]));
break;
case 47:
this.$ = yy.addLocationDataFn(_$[$0-5], _$[$0])(new yy.Assign($$[$0-5], $$[$0-1], null, null, $$[$0-4]));
break;
case 48: case 83: case 88: case 89: case 91: case 92: case 93: case 179: case 180:
this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Value($$[$0]));
break;
case 49:
this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.Assign(yy.addLocationDataFn(_$[$0-2])(new yy.Value($$[$0-2])), $$[$0], 'object', {
          operatorToken: yy.addLocationDataFn(_$[$0-1])(new yy.Literal($$[$0-1]))
        }));
break;
case 50:
this.$ = yy.addLocationDataFn(_$[$0-4], _$[$0])(new yy.Assign(yy.addLocationDataFn(_$[$0-4])(new yy.Value($$[$0-4])), $$[$0-1], 'object', {
          operatorToken: yy.addLocationDataFn(_$[$0-3])(new yy.Literal($$[$0-3]))
        }));
break;
case 51:
this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.Assign(yy.addLocationDataFn(_$[$0-2])(new yy.Value($$[$0-2])), $$[$0], null, {
          operatorToken: yy.addLocationDataFn(_$[$0-1])(new yy.Literal($$[$0-1]))
        }));
break;
case 52:
this.$ = yy.addLocationDataFn(_$[$0-4], _$[$0])(new yy.Assign(yy.addLocationDataFn(_$[$0-4])(new yy.Value($$[$0-4])), $$[$0-1], null, {
          operatorToken: yy.addLocationDataFn(_$[$0-3])(new yy.Literal($$[$0-3]))
        }));
break;
case 58:
this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Return($$[$0]));
break;
case 59:
this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Return);
break;
case 60:
this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.YieldReturn($$[$0]));
break;
case 61:
this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.YieldReturn);
break;
case 62:
this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Comment($$[$0]));
break;
case 63:
this.$ = yy.addLocationDataFn(_$[$0-4], _$[$0])(new yy.Code($$[$0-3], $$[$0], $$[$0-1]));
break;
case 64:
this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Code([], $$[$0], $$[$0-1]));
break;
case 65:
this.$ = yy.addLocationDataFn(_$[$0], _$[$0])('func');
break;
case 66:
this.$ = yy.addLocationDataFn(_$[$0], _$[$0])('boundfunc');
break;
case 69: case 106:
this.$ = yy.addLocationDataFn(_$[$0], _$[$0])([]);
break;
case 70: case 107: case 139: case 181: case 258: case 261: case 266: case 271: case 278: case 292:
this.$ = yy.addLocationDataFn(_$[$0], _$[$0])([$$[$0]]);
break;
case 71: case 108: case 140: case 259: case 262: case 272: case 279: case 280: case 293:
this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])($$[$0-2].concat($$[$0]));
break;
case 72: case 109: case 141:
this.$ = yy.addLocationDataFn(_$[$0-3], _$[$0])($$[$0-3].concat($$[$0]));
break;
case 73: case 110: case 143:
this.$ = yy.addLocationDataFn(_$[$0-5], _$[$0])($$[$0-5].concat($$[$0-2]));
break;
case 74:
this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Param($$[$0]));
break;
case 75:
this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Param($$[$0-1], null, true));
break;
case 76:
this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.Param($$[$0-2], $$[$0]));
break;
case 77: case 146:
this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Expansion);
break;
case 82:
this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Splat($$[$0-1]));
break;
case 84:
this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])($$[$0-1].add($$[$0]));
break;
case 85:
this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Value($$[$0-1], [].concat($$[$0])));
break;
case 95:
this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Access($$[$0]));
break;
case 96:
this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Access($$[$0], 'soak'));
break;
case 97:
this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])([yy.addLocationDataFn(_$[$0-1])(new yy.Access(new yy.Literal('prototype'))), yy.addLocationDataFn(_$[$0])(new yy.Access($$[$0]))]);
break;
case 98:
this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])([yy.addLocationDataFn(_$[$0-1])(new yy.Access(new yy.Literal('prototype'), 'soak')), yy.addLocationDataFn(_$[$0])(new yy.Access($$[$0]))]);
break;
case 99:
this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Access(new yy.Literal('prototype')));
break;
case 102:
this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(yy.extend($$[$0], {
          soak: true
        }));
break;
case 103:
this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Index($$[$0]));
break;
case 104:
this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Slice($$[$0]));
break;
case 105:
this.$ = yy.addLocationDataFn(_$[$0-3], _$[$0])(new yy.Obj($$[$0-2], $$[$0-3].generated));
break;
case 111:
this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Class);
break;
case 112:
this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Class(null, null, $$[$0]));
break;
case 113:
this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.Class(null, $$[$0]));
break;
case 114:
this.$ = yy.addLocationDataFn(_$[$0-3], _$[$0])(new yy.Class(null, $$[$0-1], $$[$0]));
break;
case 115:
this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Class($$[$0]));
break;
case 116:
this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.Class($$[$0-1], null, $$[$0]));
break;
case 117:
this.$ = yy.addLocationDataFn(_$[$0-3], _$[$0])(new yy.Class($$[$0-2], $$[$0]));
break;
case 118:
this.$ = yy.addLocationDataFn(_$[$0-4], _$[$0])(new yy.Class($$[$0-3], $$[$0-1], $$[$0]));
break;
case 119: case 120:
this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.Call($$[$0-2], $$[$0], $$[$0-1]));
break;
case 121:
this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Call('super', [new yy.Splat(new yy.Literal('arguments'))]));
break;
case 122:
this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Call('super', $$[$0]));
break;
case 123:
this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(false);
break;
case 124:
this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(true);
break;
case 125:
this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])([]);
break;
case 126: case 142:
this.$ = yy.addLocationDataFn(_$[$0-3], _$[$0])($$[$0-2]);
break;
case 127: case 128:
this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Value(new yy.Literal('this')));
break;
case 129:
this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Value(yy.addLocationDataFn(_$[$0-1])(new yy.Literal('this')), [yy.addLocationDataFn(_$[$0])(new yy.Access($$[$0]))], 'this'));
break;
case 130:
this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Arr([]));
break;
case 131:
this.$ = yy.addLocationDataFn(_$[$0-3], _$[$0])(new yy.Arr($$[$0-2]));
break;
case 132:
this.$ = yy.addLocationDataFn(_$[$0], _$[$0])('inclusive');
break;
case 133:
this.$ = yy.addLocationDataFn(_$[$0], _$[$0])('exclusive');
break;
case 134:
this.$ = yy.addLocationDataFn(_$[$0-4], _$[$0])(new yy.Range($$[$0-3], $$[$0-1], $$[$0-2]));
break;
case 135:
this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.Range($$[$0-2], $$[$0], $$[$0-1]));
break;
case 136:
this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Range($$[$0-1], null, $$[$0]));
break;
case 137:
this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Range(null, $$[$0], $$[$0-1]));
break;
case 138:
this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Range(null, null, $$[$0]));
break;
case 148:
this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])([].concat($$[$0-2], $$[$0]));
break;
case 149:
this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Try($$[$0]));
break;
case 150:
this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.Try($$[$0-1], $$[$0][0], $$[$0][1]));
break;
case 151:
this.$ = yy.addLocationDataFn(_$[$0-3], _$[$0])(new yy.Try($$[$0-2], null, null, $$[$0]));
break;
case 152:
this.$ = yy.addLocationDataFn(_$[$0-4], _$[$0])(new yy.Try($$[$0-3], $$[$0-2][0], $$[$0-2][1], $$[$0]));
break;
case 153:
this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])([$$[$0-1], $$[$0]]);
break;
case 154:
this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])([yy.addLocationDataFn(_$[$0-1])(new yy.Value($$[$0-1])), $$[$0]]);
break;
case 155:
this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])([null, $$[$0]]);
break;
case 156:
this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Throw($$[$0]));
break;
case 158:
this.$ = yy.addLocationDataFn(_$[$0-4], _$[$0])(new yy.Parens($$[$0-2]));
break;
case 159:
this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.While($$[$0]));
break;
case 160:
this.$ = yy.addLocationDataFn(_$[$0-3], _$[$0])(new yy.While($$[$0-2], {
          guard: $$[$0]
        }));
break;
case 161:
this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.While($$[$0], {
          invert: true
        }));
break;
case 162:
this.$ = yy.addLocationDataFn(_$[$0-3], _$[$0])(new yy.While($$[$0-2], {
          invert: true,
          guard: $$[$0]
        }));
break;
case 163:
this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])($$[$0-1].addBody($$[$0]));
break;
case 164: case 165:
this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])($$[$0].addBody(yy.addLocationDataFn(_$[$0-1])(yy.Block.wrap([$$[$0-1]]))));
break;
case 166:
this.$ = yy.addLocationDataFn(_$[$0], _$[$0])($$[$0]);
break;
case 167:
this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.While(yy.addLocationDataFn(_$[$0-1])(new yy.Literal('true'))).addBody($$[$0]));
break;
case 168:
this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.While(yy.addLocationDataFn(_$[$0-1])(new yy.Literal('true'))).addBody(yy.addLocationDataFn(_$[$0])(yy.Block.wrap([$$[$0]]))));
break;
case 169: case 170:
this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.For($$[$0-1], $$[$0]));
break;
case 171:
this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.For($$[$0], $$[$0-1]));
break;
case 172:
this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])({
          source: yy.addLocationDataFn(_$[$0])(new yy.Value($$[$0]))
        });
break;
case 173:
this.$ = yy.addLocationDataFn(_$[$0-3], _$[$0])({
          source: yy.addLocationDataFn(_$[$0-2])(new yy.Value($$[$0-2])),
          step: $$[$0]
        });
break;
case 174:
this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])((function () {
        $$[$0].own = $$[$0-1].own;
        $$[$0].name = $$[$0-1][0];
        $$[$0].index = $$[$0-1][1];
        return $$[$0];
      }()));
break;
case 175:
this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])($$[$0]);
break;
case 176:
this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])((function () {
        $$[$0].own = true;
        return $$[$0];
      }()));
break;
case 182:
this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])([$$[$0-2], $$[$0]]);
break;
case 183:
this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])({
          source: $$[$0]
        });
break;
case 184:
this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])({
          source: $$[$0],
          object: true
        });
break;
case 185:
this.$ = yy.addLocationDataFn(_$[$0-3], _$[$0])({
          source: $$[$0-2],
          guard: $$[$0]
        });
break;
case 186:
this.$ = yy.addLocationDataFn(_$[$0-3], _$[$0])({
          source: $$[$0-2],
          guard: $$[$0],
          object: true
        });
break;
case 187:
this.$ = yy.addLocationDataFn(_$[$0-3], _$[$0])({
          source: $$[$0-2],
          step: $$[$0]
        });
break;
case 188:
this.$ = yy.addLocationDataFn(_$[$0-5], _$[$0])({
          source: $$[$0-4],
          guard: $$[$0-2],
          step: $$[$0]
        });
break;
case 189:
this.$ = yy.addLocationDataFn(_$[$0-5], _$[$0])({
          source: $$[$0-4],
          step: $$[$0-2],
          guard: $$[$0]
        });
break;
case 190:
this.$ = yy.addLocationDataFn(_$[$0-4], _$[$0])(new yy.Switch($$[$0-3], $$[$0-1]));
break;
case 191:
this.$ = yy.addLocationDataFn(_$[$0-6], _$[$0])(new yy.Switch($$[$0-5], $$[$0-3], $$[$0-1]));
break;
case 192:
this.$ = yy.addLocationDataFn(_$[$0-3], _$[$0])(new yy.Switch(null, $$[$0-1]));
break;
case 193:
this.$ = yy.addLocationDataFn(_$[$0-5], _$[$0])(new yy.Switch(null, $$[$0-3], $$[$0-1]));
break;
case 195:
this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])($$[$0-1].concat($$[$0]));
break;
case 196:
this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])([[$$[$0-1], $$[$0]]]);
break;
case 197:
this.$ = yy.addLocationDataFn(_$[$0-3], _$[$0])([[$$[$0-2], $$[$0-1]]]);
break;
case 198:
this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.If($$[$0-1], $$[$0], {
          type: $$[$0-2]
        }));
break;
case 199:
this.$ = yy.addLocationDataFn(_$[$0-4], _$[$0])($$[$0-4].addElse(yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.If($$[$0-1], $$[$0], {
          type: $$[$0-2]
        }))));
break;
case 201:
this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])($$[$0-2].addElse($$[$0]));
break;
case 202: case 203:
this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.If($$[$0], yy.addLocationDataFn(_$[$0-2])(yy.Block.wrap([$$[$0-2]])), {
          type: $$[$0-1],
          statement: true
        }));
break;
case 207:
this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Op('-', $$[$0]));
break;
case 208:
this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Op('+', $$[$0]));
break;
case 209:
this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Op('--', $$[$0]));
break;
case 210:
this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Op('++', $$[$0]));
break;
case 211:
this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Op('--', $$[$0-1], null, true));
break;
case 212:
this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Op('++', $$[$0-1], null, true));
break;
case 213:
this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Existence($$[$0-1]));
break;
case 214:
this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.Op('+', $$[$0-2], $$[$0]));
break;
case 215:
this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.Op('-', $$[$0-2], $$[$0]));
break;
case 216: case 217: case 218: case 219: case 220: case 221: case 222: case 223: case 224:
this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.Op($$[$0-1], $$[$0-2], $$[$0]));
break;
case 225:
this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])((function () {
        if ($$[$0-1].charAt(0) === '!') {
          return new yy.Op($$[$0-1].slice(1), $$[$0-2], $$[$0]).invert();
        } else {
          return new yy.Op($$[$0-1], $$[$0-2], $$[$0]);
        }
      }()));
break;
case 226:
this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.Assign($$[$0-2], $$[$0], $$[$0-1]));
break;
case 227:
this.$ = yy.addLocationDataFn(_$[$0-4], _$[$0])(new yy.Assign($$[$0-4], $$[$0-1], $$[$0-3]));
break;
case 228:
this.$ = yy.addLocationDataFn(_$[$0-3], _$[$0])(new yy.Assign($$[$0-3], $$[$0], $$[$0-2]));
break;
case 229:
this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.Extends($$[$0-2], $$[$0]));
break;
case 239:
this.$ = yy.addLocationDataFn(_$[$0], _$[$0])({
          type: "TypeAnnotation",
          Type: {
            type: 'TypeReference',
            TypeName: ["any"]
          }
        });
break;
case 241:
this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])({
          type: "TypeAnnotation",
          Type: $$[$0]
        });
break;
case 256:
this.$ = yy.addLocationDataFn(_$[$0], _$[$0])({
          type: "TypeReference",
          TypeName: $$[$0]
        });
break;
case 257:
this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])({
          type: "TypeReference",
          TypeName: $$[$0-1],
          TypeArguments: $$[$0]
        });
break;
case 264:
this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])({
          type: "ArrayType",
          PrimaryType: $$[$0-2]
        });
break;
case 265:
this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])({
          type: "TupleType",
          TupleElementTypes: $$[$0-1]
        });
break;
case 267:
this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])($$[$0-2].concat([$$[$0]]));
break;
case 268:
this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])({
          type: "UnionType",
          UnionOrIntersectionOrPrimaryType: $$[$0-2],
          IntersectionOrPrimaryType: $$[$0]
        });
break;
case 269:
this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])({
          type: "IntersectionType",
          IntersectionOrPrimaryType: $$[$0-2],
          PrimaryType: $$[$0]
        });
break;
case 270:
this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])({
          type: "TypeQuery",
          TypeQueryExpression: $$[$0]
        });
break;
case 273:
this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])({
          type: "ObjectType",
          TypeBody: null
        });
break;
case 274:
this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])({
          type: "ObjectType",
          TypeBody: $$[$0-1]
        });
break;
case 276: case 277:
this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])($$[$0-1]);
break;
case 283:
this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])({
          type: "PropertySignature",
          PropertyName: $$[$0-1],
          TypeAnnotation: $$[$0]
        });
break;
case 284:
this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])({
          type: "PropertySignature",
          PropertyName: $$[$0-2],
          TypeAnnotation: $$[$0],
          optional: true
        });
break;
case 288:
this.$ = yy.addLocationDataFn(_$[$0-4], _$[$0])({
          type: "IndexSignature",
          BindingIdentifier: $$[$0-3],
          IndexType: $$[$0-2],
          TypeAnnotation: $$[$0]
        });
break;
case 289:
this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])({
          type: "FunctionType",
          Type: $$[$0]
        });
break;
case 290:
this.$ = yy.addLocationDataFn(_$[$0-3], _$[$0])({
          type: "FunctionType",
          Type: $$[$0]
        });
break;
case 294:
this.$ = yy.addLocationDataFn(_$[$0], _$[$0])({
          type: "TypeParameter",
          BindingIdentifier: $$[$0]
        });
break;
case 295:
this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])({
          type: "TypeParameter",
          Constraint: $$[$0]
        });
break;
}
},
table: [{1:[2,1],3:1,4:2,5:3,7:4,8:5,9:6,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V1,33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,71:48,72:49,74:39,76:26,77:27,78:28,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},{1:[3]},{1:[2,2],6:$VE},o($VF,[2,3]),o($VF,[2,6],{125:72,116:96,122:97,117:$Vr,119:$Vs,123:$Vu,139:$VG,143:$VH,144:$VI,147:$VJ,148:$VK,149:$VL,150:$VM,151:$VN,152:$VO,153:$VP,154:$VQ,155:$VR,156:$VS,157:$VT}),o($VF,[2,7],{125:72,116:99,122:100,117:$Vr,119:$Vs,123:$Vu,139:$VU}),o($VF,[2,8]),o($VV,[2,13],{94:101,75:102,83:108,79:$VW,80:$VX,81:$VY,82:$VZ,84:$V_,87:$V$,97:$V01,98:$V11}),o($VV,[2,14],{83:108,94:111,75:112,79:$VW,80:$VX,81:$VY,82:$VZ,84:$V_,87:$V$,97:$V01,98:$V11}),o($VV,[2,15]),o($VV,[2,16]),o($VV,[2,17]),o($VV,[2,18]),o($VV,[2,19]),o($VV,[2,20]),o($VV,[2,21]),o($VV,[2,22]),o($VV,[2,23]),o($VV,[2,24]),o($VV,[2,25]),o($V21,$V31,{11:113,51:114,52:$V41,167:$V51}),o($V61,[2,10]),o($V61,[2,11]),o($V61,[2,12]),o([1,6,32,40,115,117,119,123,139,147,148,149,150,151,152,153,154,155,156,157],$V71,{15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,10:20,12:21,13:22,45:25,76:26,77:27,78:28,63:31,74:39,137:40,116:42,120:43,122:44,71:48,72:49,35:52,41:54,33:65,57:66,125:72,37:75,7:117,8:119,14:$V0,28:$V81,29:$V91,34:$V2,36:$V3,38:$V4,39:$V5,42:$V6,43:$V7,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,58:[1,116],59:$Ve,60:$Vf,64:$Vg,65:$Vh,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,121:$Vt,132:$Vv,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD}),o($V21,[2,91]),o($V21,[2,92]),o($V21,[2,93]),o($V21,[2,94]),o([1,6,31,32,40,44,62,67,70,79,80,81,82,84,86,87,91,97,99,104,106,115,117,118,119,123,124,139,143,144,147,148,149,150,151,152,153,154,155,156,157],[2,121],{95:121,98:$Va1}),o([6,31,62,67],$Vb1,{61:123,68:124,69:125,33:127,57:128,71:129,72:130,34:$V2,70:$Vc1,89:$Vi,102:$Vd1,103:$Ve1}),{30:133,31:$Vf1},{7:135,8:119,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V81,33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,71:48,72:49,74:39,76:26,77:27,78:28,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},{7:136,8:119,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V81,33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,71:48,72:49,74:39,76:26,77:27,78:28,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},{7:137,8:119,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V81,33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,71:48,72:49,74:39,76:26,77:27,78:28,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},{7:138,8:119,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V81,33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,71:48,72:49,74:39,76:26,77:27,78:28,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},{7:139,8:119,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V81,33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,71:48,72:49,74:39,76:26,77:27,78:28,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},{10:143,15:141,16:142,33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,71:48,72:49,74:140,76:26,77:27,78:28,89:$Vi,96:$Vk,101:$Vl,102:$Vm,103:$Vn,114:$Vq},{10:143,15:141,16:142,33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,71:48,72:49,74:144,76:26,77:27,78:28,89:$Vi,96:$Vk,101:$Vl,102:$Vm,103:$Vn,114:$Vq},o($Vg1,$Vh1,{93:[1,148],145:[1,145],146:[1,146],158:[1,147]}),o($VV,[2,200],{134:[1,149]}),{30:150,31:$Vf1},{30:151,31:$Vf1},o($VV,[2,166]),{30:152,31:$Vf1},{7:153,8:119,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V81,31:[1,154],33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,71:48,72:49,74:39,76:26,77:27,78:28,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},o($Vi1,[2,111],{45:25,76:26,77:27,78:28,71:48,72:49,35:52,41:54,33:65,57:66,37:75,15:141,16:142,10:143,30:155,74:157,31:$Vf1,34:$V2,36:$V3,38:$V4,39:$V5,42:$V6,43:$V7,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,89:$Vi,93:[1,156],96:$Vk,101:$Vl,102:$Vm,103:$Vn,114:$Vq}),{7:158,8:119,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V81,33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,71:48,72:49,74:39,76:26,77:27,78:28,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},o($Vg1,[2,88]),o($Vg1,[2,89]),o($V61,$Vj1,{15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,10:20,12:21,13:22,45:25,76:26,77:27,78:28,63:31,74:39,137:40,116:42,120:43,122:44,71:48,72:49,35:52,41:54,33:65,57:66,125:72,37:75,8:119,7:159,14:$V0,28:$V81,34:$V2,36:$V3,38:$V4,39:$V5,42:$V6,43:$V7,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,58:$Vd,59:$Ve,60:$Vf,64:$Vg,65:$Vh,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,121:$Vt,132:$Vv,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD}),o([1,6,31,32,40,67,91,115,117,119,123,139],[2,62]),o($V21,[2,38]),o($V21,[2,39]),o($V21,[2,40]),o($V21,[2,41]),o($V21,[2,42]),o($V21,[2,43]),o($V21,[2,44]),{4:160,5:3,7:4,8:5,9:6,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V1,31:[1,161],33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,71:48,72:49,74:39,76:26,77:27,78:28,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},{7:162,8:119,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V81,31:$Vk1,33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,70:$Vl1,71:48,72:49,73:167,74:39,76:26,77:27,78:28,89:$Vi,92:$Vj,96:$Vk,100:164,101:$Vl,102:$Vm,103:$Vn,104:$Vm1,107:165,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},o($V21,[2,127]),o($V21,[2,128],{33:169,34:$V2}),{31:[2,65]},{31:[2,66]},o($Vn1,[2,83]),o($Vn1,[2,86]),{7:170,8:119,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V81,33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,71:48,72:49,74:39,76:26,77:27,78:28,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},{7:171,8:119,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V81,33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,71:48,72:49,74:39,76:26,77:27,78:28,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},{7:172,8:119,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V81,33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,71:48,72:49,74:39,76:26,77:27,78:28,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},{7:174,8:119,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V81,30:173,31:$Vf1,33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,71:48,72:49,74:39,76:26,77:27,78:28,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},{33:179,34:$V2,57:180,71:181,72:182,77:175,89:$Vi,102:$Vd1,103:$Vn,127:176,128:[1,177],129:178},{126:183,130:[1,184],131:[1,185]},o([6,31,67,91],$Vo1,{37:75,90:186,53:187,54:188,56:189,13:190,35:191,33:192,57:193,34:$V2,36:$V3,38:$V4,39:$V5,59:$Ve,102:$Vd1}),o($Vp1,[2,32]),o($Vp1,[2,33]),o($V21,[2,36]),{10:143,15:141,16:194,33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,71:48,72:49,74:195,76:26,77:27,78:28,89:$Vi,96:$Vk,101:$Vl,102:$Vm,103:$Vn,114:$Vq},o($Vq1,[2,31]),o($Vr1,[2,34]),{4:196,5:3,7:4,8:5,9:6,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V1,33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,71:48,72:49,74:39,76:26,77:27,78:28,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},o($VF,[2,5],{7:4,8:5,9:6,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,10:20,12:21,13:22,45:25,76:26,77:27,78:28,63:31,74:39,137:40,116:42,120:43,122:44,71:48,72:49,35:52,41:54,33:65,57:66,125:72,37:75,5:197,14:$V0,28:$V1,34:$V2,36:$V3,38:$V4,39:$V5,42:$V6,43:$V7,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,58:$Vd,59:$Ve,60:$Vf,64:$Vg,65:$Vh,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,117:$Vr,119:$Vs,121:$Vt,123:$Vu,132:$Vv,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD}),o($VV,[2,213]),{7:198,8:119,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V81,33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,71:48,72:49,74:39,76:26,77:27,78:28,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},{7:199,8:119,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V81,33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,71:48,72:49,74:39,76:26,77:27,78:28,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},{7:200,8:119,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V81,33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,71:48,72:49,74:39,76:26,77:27,78:28,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},{7:201,8:119,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V81,33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,71:48,72:49,74:39,76:26,77:27,78:28,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},{7:202,8:119,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V81,33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,71:48,72:49,74:39,76:26,77:27,78:28,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},{7:203,8:119,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V81,33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,71:48,72:49,74:39,76:26,77:27,78:28,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},{7:204,8:119,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V81,33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,71:48,72:49,74:39,76:26,77:27,78:28,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},{7:205,8:119,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V81,33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,71:48,72:49,74:39,76:26,77:27,78:28,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},{7:206,8:119,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V81,33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,71:48,72:49,74:39,76:26,77:27,78:28,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},{7:207,8:119,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V81,33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,71:48,72:49,74:39,76:26,77:27,78:28,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},{7:208,8:119,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V81,33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,71:48,72:49,74:39,76:26,77:27,78:28,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},{7:209,8:119,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V81,33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,71:48,72:49,74:39,76:26,77:27,78:28,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},{7:210,8:119,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V81,33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,71:48,72:49,74:39,76:26,77:27,78:28,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},o($VV,[2,165]),o($VV,[2,170]),{7:211,8:119,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V81,33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,71:48,72:49,74:39,76:26,77:27,78:28,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},o($VV,[2,164]),o($VV,[2,169]),{95:212,98:$Va1},o($Vn1,[2,84]),{98:[2,124]},{33:213,34:$V2},{33:214,34:$V2},o($Vn1,[2,99],{33:215,34:$V2}),{33:216,34:$V2},o($Vn1,[2,100]),{7:218,8:119,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V81,33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,70:$Vs1,71:48,72:49,74:39,76:26,77:27,78:28,85:217,88:219,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,105:220,106:$Vt1,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},{83:223,84:$V_,87:$V$},{95:224,98:$Va1},o($Vn1,[2,85]),o($V61,[2,9],{52:$Vu1}),{52:[1,225]},{34:$Vv1,89:$Vw1,103:$Vx1,114:$Vy1,141:$Vz1,160:246,168:226,169:227,170:228,171:229,172:230,173:233,174:234,175:235,176:236,177:237,178:238,179:239,180:240,181:241,182:242,195:$VA1},o($VF,[2,61],{15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,10:20,12:21,13:22,45:25,76:26,77:27,78:28,63:31,74:39,137:40,116:42,120:43,122:44,71:48,72:49,35:52,41:54,33:65,57:66,125:72,37:75,8:119,7:248,14:$V0,28:$V81,34:$V2,36:$V3,38:$V4,39:$V5,42:$V6,43:$V7,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,58:$Vd,59:$Ve,60:$Vf,64:$Vg,65:$Vh,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,117:$Vj1,119:$Vj1,123:$Vj1,139:$Vj1,121:$Vt,132:$Vv,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD}),o($VB1,[2,27],{125:72,116:96,122:97,143:$VH,144:$VI,147:$VJ,148:$VK,149:$VL,150:$VM,151:$VN,152:$VO,153:$VP,154:$VQ,155:$VR,156:$VS,157:$VT}),{7:249,8:119,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V81,33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,71:48,72:49,74:39,76:26,77:27,78:28,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},{116:99,117:$Vr,119:$Vs,122:100,123:$Vu,125:72,139:$VU},o([1,6,31,32,40,62,67,70,86,91,99,104,106,115,117,118,119,123,124,139,147,148,149,150,151,152,153,154,155,156,157],$V71,{15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,10:20,12:21,13:22,45:25,76:26,77:27,78:28,63:31,74:39,137:40,116:42,120:43,122:44,71:48,72:49,35:52,41:54,33:65,57:66,125:72,37:75,7:117,8:119,14:$V0,28:$V81,29:$V91,34:$V2,36:$V3,38:$V4,39:$V5,42:$V6,43:$V7,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,58:$Vd,59:$Ve,60:$Vf,64:$Vg,65:$Vh,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,121:$Vt,132:$Vv,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD}),o($VC1,[2,122]),{7:252,8:119,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V81,31:$Vk1,33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,70:$Vl1,71:48,72:49,73:167,74:39,76:26,77:27,78:28,89:$Vi,92:$Vj,96:$Vk,99:[1,250],100:251,101:$Vl,102:$Vm,103:$Vn,107:165,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},o([6,31],$VD1,{66:255,62:[1,253],67:$VE1}),o($VF1,[2,70]),o($VF1,[2,74],{52:[1,257],70:[1,256]}),o($VF1,[2,77]),o($VG1,[2,78]),o($VG1,[2,79]),o($VG1,[2,80]),o($VG1,[2,81]),{33:169,34:$V2},{7:252,8:119,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V81,31:$Vk1,33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,70:$Vl1,71:48,72:49,73:167,74:39,76:26,77:27,78:28,89:$Vi,92:$Vj,96:$Vk,100:164,101:$Vl,102:$Vm,103:$Vn,104:$Vm1,107:165,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},o($VV,[2,64]),{4:259,5:3,7:4,8:5,9:6,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V1,32:[1,258],33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,71:48,72:49,74:39,76:26,77:27,78:28,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},o($VH1,[2,204],{125:72,116:96,122:97,147:$VJ}),o($VH1,[2,205],{125:72,116:96,122:97,147:$VJ}),o($VI1,[2,206],{125:72,116:96,122:97,147:$VJ,149:$VL}),o($VI1,[2,207],{125:72,116:96,122:97,147:$VJ,149:$VL}),o($VI1,[2,208],{125:72,116:96,122:97,147:$VJ,149:$VL}),o($VV,[2,209],{79:$Vh1,80:$Vh1,81:$Vh1,82:$Vh1,84:$Vh1,87:$Vh1,97:$Vh1,98:$Vh1}),{75:102,79:$VW,80:$VX,81:$VY,82:$VZ,83:108,84:$V_,87:$V$,94:101,97:$V01,98:$V11},{75:112,79:$VW,80:$VX,81:$VY,82:$VZ,83:108,84:$V_,87:$V$,94:111,97:$V01,98:$V11},o($VJ1,$V31),o($VV,[2,210],{79:$Vh1,80:$Vh1,81:$Vh1,82:$Vh1,84:$Vh1,87:$Vh1,97:$Vh1,98:$Vh1}),o($VV,[2,211]),o($VV,[2,212]),{6:[1,262],7:260,8:119,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V81,31:[1,261],33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,71:48,72:49,74:39,76:26,77:27,78:28,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},{7:263,8:119,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V81,33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,71:48,72:49,74:39,76:26,77:27,78:28,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},{30:264,31:$Vf1,138:[1,265]},o($VV,[2,149],{110:266,111:[1,267],112:[1,268]}),o($VV,[2,163]),o($VV,[2,171]),{31:[1,269],116:96,117:$Vr,119:$Vs,122:97,123:$Vu,125:72,139:$VG,143:$VH,144:$VI,147:$VJ,148:$VK,149:$VL,150:$VM,151:$VN,152:$VO,153:$VP,154:$VQ,155:$VR,156:$VS,157:$VT},{133:270,135:271,136:$VK1},o($VV,[2,112]),{7:273,8:119,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V81,33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,71:48,72:49,74:39,76:26,77:27,78:28,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},o($Vi1,[2,115],{30:274,31:$Vf1,79:$Vh1,80:$Vh1,81:$Vh1,82:$Vh1,84:$Vh1,87:$Vh1,97:$Vh1,98:$Vh1,93:[1,275]}),o($VB1,[2,156],{125:72,116:96,122:97,143:$VH,144:$VI,147:$VJ,148:$VK,149:$VL,150:$VM,151:$VN,152:$VO,153:$VP,154:$VQ,155:$VR,156:$VS,157:$VT}),o($V61,$VL1,{125:72,116:96,122:97,143:$VH,144:$VI,147:$VJ,148:$VK,149:$VL,150:$VM,151:$VN,152:$VO,153:$VP,154:$VQ,155:$VR,156:$VS,157:$VT}),{6:$VE,115:[1,276]},{4:277,5:3,7:4,8:5,9:6,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V1,33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,71:48,72:49,74:39,76:26,77:27,78:28,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},o([6,31,67,104],$VM1,{125:72,116:96,122:97,105:278,70:[1,279],106:$Vt1,117:$Vr,119:$Vs,123:$Vu,139:$VG,143:$VH,144:$VI,147:$VJ,148:$VK,149:$VL,150:$VM,151:$VN,152:$VO,153:$VP,154:$VQ,155:$VR,156:$VS,157:$VT}),o($VN1,[2,130]),o([6,31,104],$VD1,{66:280,67:$VO1}),o($VP1,[2,139]),{7:252,8:119,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V81,31:$Vk1,33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,70:$Vl1,71:48,72:49,73:167,74:39,76:26,77:27,78:28,89:$Vi,92:$Vj,96:$Vk,100:282,101:$Vl,102:$Vm,103:$Vn,107:165,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},o($VP1,[2,145]),o($VP1,[2,146]),o($Vq1,[2,129]),{30:283,31:$Vf1,116:96,117:$Vr,119:$Vs,122:97,123:$Vu,125:72,139:$VG,143:$VH,144:$VI,147:$VJ,148:$VK,149:$VL,150:$VM,151:$VN,152:$VO,153:$VP,154:$VQ,155:$VR,156:$VS,157:$VT},o($VQ1,[2,159],{125:72,116:96,122:97,117:$Vr,118:[1,284],119:$Vs,123:$Vu,143:$VH,144:$VI,147:$VJ,148:$VK,149:$VL,150:$VM,151:$VN,152:$VO,153:$VP,154:$VQ,155:$VR,156:$VS,157:$VT}),o($VQ1,[2,161],{125:72,116:96,122:97,117:$Vr,118:[1,285],119:$Vs,123:$Vu,143:$VH,144:$VI,147:$VJ,148:$VK,149:$VL,150:$VM,151:$VN,152:$VO,153:$VP,154:$VQ,155:$VR,156:$VS,157:$VT}),o($VV,[2,167]),o($VR1,[2,168],{125:72,116:96,122:97,117:$Vr,119:$Vs,123:$Vu,143:$VH,144:$VI,147:$VJ,148:$VK,149:$VL,150:$VM,151:$VN,152:$VO,153:$VP,154:$VQ,155:$VR,156:$VS,157:$VT}),o([1,6,31,32,40,62,67,70,86,91,99,104,106,115,117,118,119,123,139,143,144,147,148,149,150,151,152,153,154,155,156,157],[2,172],{124:[1,286]}),o($VS1,[2,175]),{33:179,34:$V2,57:180,71:181,72:182,89:$Vi,102:$Vd1,103:$Ve1,127:287,129:178},o($VS1,[2,181],{67:[1,288]}),o($VT1,[2,177]),o($VT1,[2,178]),o($VT1,[2,179]),o($VT1,[2,180]),o($VV,[2,174]),{7:289,8:119,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V81,33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,71:48,72:49,74:39,76:26,77:27,78:28,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},{7:290,8:119,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V81,33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,71:48,72:49,74:39,76:26,77:27,78:28,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},o([6,31,91],$VD1,{66:291,67:$VU1}),o($VV1,[2,107]),o($VV1,[2,48],{55:[1,293]}),o($VW1,[2,56],{52:[1,294]}),o($VV1,[2,53]),o($VW1,[2,57]),o($VX1,[2,54]),o($VX1,[2,55]),{44:[1,295],75:112,79:$VW,80:$VX,81:$VY,82:$VZ,83:108,84:$V_,87:$V$,94:111,97:$V01,98:$V11},o($VJ1,$Vh1),{6:$VE,40:[1,296]},o($VF,[2,4]),o($VY1,[2,214],{125:72,116:96,122:97,147:$VJ,148:$VK,149:$VL}),o($VY1,[2,215],{125:72,116:96,122:97,147:$VJ,148:$VK,149:$VL}),o($VI1,[2,216],{125:72,116:96,122:97,147:$VJ,149:$VL}),o($VI1,[2,217],{125:72,116:96,122:97,147:$VJ,149:$VL}),o([1,6,31,32,40,62,67,70,86,91,99,104,106,115,117,118,119,123,124,139,150,151,152,153,154,155,156,157],[2,218],{125:72,116:96,122:97,143:$VH,144:$VI,147:$VJ,148:$VK,149:$VL}),o($VZ1,[2,219],{125:72,116:96,122:97,143:$VH,144:$VI,147:$VJ,148:$VK,149:$VL,150:$VM,157:$VT}),o($VZ1,[2,220],{125:72,116:96,122:97,143:$VH,144:$VI,147:$VJ,148:$VK,149:$VL,150:$VM,157:$VT}),o($VZ1,[2,221],{125:72,116:96,122:97,143:$VH,144:$VI,147:$VJ,148:$VK,149:$VL,150:$VM,157:$VT}),o($V_1,[2,222],{125:72,116:96,122:97,143:$VH,144:$VI,147:$VJ,148:$VK,149:$VL,150:$VM,151:$VN,152:$VO,153:$VP,157:$VT}),o($V_1,[2,223],{125:72,116:96,122:97,143:$VH,144:$VI,147:$VJ,148:$VK,149:$VL,150:$VM,151:$VN,152:$VO,153:$VP,157:$VT}),o($V_1,[2,224],{125:72,116:96,122:97,143:$VH,144:$VI,147:$VJ,148:$VK,149:$VL,150:$VM,151:$VN,152:$VO,153:$VP,157:$VT}),o([1,6,31,32,40,62,67,70,86,91,99,104,106,115,117,118,119,123,124,139,151,152,153,154,155,156,157],[2,225],{125:72,116:96,122:97,143:$VH,144:$VI,147:$VJ,148:$VK,149:$VL,150:$VM}),o($VR1,[2,203],{125:72,116:96,122:97,117:$Vr,119:$Vs,123:$Vu,143:$VH,144:$VI,147:$VJ,148:$VK,149:$VL,150:$VM,151:$VN,152:$VO,153:$VP,154:$VQ,155:$VR,156:$VS,157:$VT}),o($VR1,[2,202],{125:72,116:96,122:97,117:$Vr,119:$Vs,123:$Vu,143:$VH,144:$VI,147:$VJ,148:$VK,149:$VL,150:$VM,151:$VN,152:$VO,153:$VP,154:$VQ,155:$VR,156:$VS,157:$VT}),o($VC1,[2,119]),o($Vn1,[2,95]),o($Vn1,[2,96]),o($Vn1,[2,97]),o($Vn1,[2,98]),{86:[1,297]},{70:$Vs1,86:[2,103],105:298,106:$Vt1,116:96,117:$Vr,119:$Vs,122:97,123:$Vu,125:72,139:$VG,143:$VH,144:$VI,147:$VJ,148:$VK,149:$VL,150:$VM,151:$VN,152:$VO,153:$VP,154:$VQ,155:$VR,156:$VS,157:$VT},{86:[2,104]},{7:299,8:119,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V81,33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,71:48,72:49,74:39,76:26,77:27,78:28,86:[2,138],89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},o($V$1,[2,132]),o($V$1,$V02),o($Vn1,[2,102]),o($VC1,[2,120]),{6:[1,301],7:300,8:119,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V81,31:[1,302],33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,71:48,72:49,74:39,76:26,77:27,78:28,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},o([1,6,32,40,52,67,91,104,115,117,119,123,139,190],[2,241]),o($V12,[2,242],{155:[1,303]}),o($V12,[2,243]),o($V22,[2,244]),o($V22,[2,245],{156:$V32}),{34:$Vv1,89:$Vw1,103:$Vx1,114:$Vy1,141:$Vz1,160:246,168:305,169:227,170:228,171:229,172:230,173:233,174:234,175:235,176:236,177:237,178:238,179:239,180:240,181:241,182:242,195:$VA1},{34:$Vv1,89:$Vw1,103:$Vx1,114:$Vy1,115:[1,306],141:$Vz1,160:246,168:307,169:227,170:228,171:229,172:230,173:233,174:234,175:235,176:236,177:237,178:238,179:239,180:240,181:241,182:242,195:$VA1},o($V42,[2,246]),o($V42,[2,247],{84:$V52}),o($V62,[2,248]),o($V62,[2,249]),o($V62,[2,250]),o($V62,[2,251]),o($V62,[2,252]),o($V62,[2,253]),o($V62,[2,254]),o($V62,[2,256],{183:309,79:[1,310],152:[1,311]}),{34:$V72,36:$V82,37:324,38:$V4,39:$V5,91:[1,312],103:$V92,159:320,165:321,166:322,188:313,189:314,191:315,192:316,193:317,194:318},{34:$Vv1,89:$Vw1,103:$Vx1,114:$Vy1,141:$Vz1,160:246,168:327,169:227,170:228,171:229,172:230,173:233,174:234,175:235,176:236,177:237,178:238,179:239,180:240,181:241,182:242,186:326,195:$VA1},{34:$Vv1,160:329,187:328},o($Va2,[2,258]),o($Va2,[2,231]),o($VF,[2,60],{125:72,116:96,122:97,117:$VL1,119:$VL1,123:$VL1,139:$VL1,143:$VH,144:$VI,147:$VJ,148:$VK,149:$VL,150:$VM,151:$VN,152:$VO,153:$VP,154:$VQ,155:$VR,156:$VS,157:$VT}),o($VB1,[2,28],{125:72,116:96,122:97,143:$VH,144:$VI,147:$VJ,148:$VK,149:$VL,150:$VM,151:$VN,152:$VO,153:$VP,154:$VQ,155:$VR,156:$VS,157:$VT}),o($VC1,[2,125]),o([6,31,99],$VD1,{66:330,67:$VO1}),o($VP1,$VM1,{125:72,116:96,122:97,70:[1,331],117:$Vr,119:$Vs,123:$Vu,139:$VG,143:$VH,144:$VI,147:$VJ,148:$VK,149:$VL,150:$VM,151:$VN,152:$VO,153:$VP,154:$VQ,155:$VR,156:$VS,157:$VT}),{63:332,64:$Vg,65:$Vh},o($Vb2,$Vc2,{69:125,33:127,57:128,71:129,72:130,68:333,34:$V2,70:$Vc1,89:$Vi,102:$Vd1,103:$Ve1}),{6:$Vd2,31:$Ve2},o($VF1,[2,75]),{7:336,8:119,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V81,33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,71:48,72:49,74:39,76:26,77:27,78:28,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},o($Vf2,[2,29]),{6:$VE,32:[1,337]},o($VB1,[2,226],{125:72,116:96,122:97,143:$VH,144:$VI,147:$VJ,148:$VK,149:$VL,150:$VM,151:$VN,152:$VO,153:$VP,154:$VQ,155:$VR,156:$VS,157:$VT}),{7:338,8:119,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V81,33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,71:48,72:49,74:39,76:26,77:27,78:28,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},{7:339,8:119,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V81,33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,71:48,72:49,74:39,76:26,77:27,78:28,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},o($VB1,[2,229],{125:72,116:96,122:97,143:$VH,144:$VI,147:$VJ,148:$VK,149:$VL,150:$VM,151:$VN,152:$VO,153:$VP,154:$VQ,155:$VR,156:$VS,157:$VT}),o($VV,[2,201]),{7:340,8:119,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V81,33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,71:48,72:49,74:39,76:26,77:27,78:28,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},o($VV,[2,150],{111:[1,341]}),{30:342,31:$Vf1},{30:345,31:$Vf1,33:343,34:$V2,72:344,89:$Vi},{133:346,135:271,136:$VK1},{32:[1,347],134:[1,348],135:349,136:$VK1},o($Vg2,[2,194]),{7:351,8:119,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V81,33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,71:48,72:49,74:39,76:26,77:27,78:28,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,108:350,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},o($Vh2,[2,113],{125:72,116:96,122:97,30:352,31:$Vf1,117:$Vr,119:$Vs,123:$Vu,143:$VH,144:$VI,147:$VJ,148:$VK,149:$VL,150:$VM,151:$VN,152:$VO,153:$VP,154:$VQ,155:$VR,156:$VS,157:$VT}),o($VV,[2,116]),{7:353,8:119,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V81,33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,71:48,72:49,74:39,76:26,77:27,78:28,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},o($V21,[2,157]),{6:$VE,32:[1,354]},{7:355,8:119,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V81,33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,71:48,72:49,74:39,76:26,77:27,78:28,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},o([14,28,34,36,38,39,42,43,46,47,48,49,50,58,59,60,64,65,89,92,96,101,102,103,109,113,114,117,119,121,123,132,138,140,141,142,143,144,145,146],$V02,{6:$Vi2,31:$Vi2,67:$Vi2,104:$Vi2}),{6:$Vj2,31:$Vk2,104:[1,356]},o([6,31,32,99,104],$Vc2,{15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,10:20,12:21,13:22,45:25,76:26,77:27,78:28,63:31,74:39,137:40,116:42,120:43,122:44,71:48,72:49,35:52,41:54,33:65,57:66,125:72,37:75,8:119,73:167,7:252,107:359,14:$V0,28:$V81,34:$V2,36:$V3,38:$V4,39:$V5,42:$V6,43:$V7,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,58:$Vd,59:$Ve,60:$Vf,64:$Vg,65:$Vh,70:$Vl1,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,117:$Vr,119:$Vs,121:$Vt,123:$Vu,132:$Vv,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD}),o($Vb2,$VD1,{66:360,67:$VO1}),o($Vl2,[2,198]),{7:361,8:119,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V81,33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,71:48,72:49,74:39,76:26,77:27,78:28,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},{7:362,8:119,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V81,33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,71:48,72:49,74:39,76:26,77:27,78:28,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},{7:363,8:119,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V81,33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,71:48,72:49,74:39,76:26,77:27,78:28,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},o($VS1,[2,176]),{33:179,34:$V2,57:180,71:181,72:182,89:$Vi,102:$Vd1,103:$Ve1,129:364},o([1,6,31,32,40,62,67,70,86,91,99,104,106,115,117,119,123,139],[2,183],{125:72,116:96,122:97,118:[1,365],124:[1,366],143:$VH,144:$VI,147:$VJ,148:$VK,149:$VL,150:$VM,151:$VN,152:$VO,153:$VP,154:$VQ,155:$VR,156:$VS,157:$VT}),o($Vm2,[2,184],{125:72,116:96,122:97,118:[1,367],143:$VH,144:$VI,147:$VJ,148:$VK,149:$VL,150:$VM,151:$VN,152:$VO,153:$VP,154:$VQ,155:$VR,156:$VS,157:$VT}),{6:$Vn2,31:$Vo2,91:[1,368]},o([6,31,32,91],$Vc2,{37:75,54:188,56:189,13:190,35:191,33:192,57:193,53:371,34:$V2,36:$V3,38:$V4,39:$V5,59:$Ve,102:$Vd1}),{7:372,8:119,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V81,31:[1,373],33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,71:48,72:49,74:39,76:26,77:27,78:28,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},{7:374,8:119,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V81,31:[1,375],33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,71:48,72:49,74:39,76:26,77:27,78:28,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},o($V21,[2,37]),o($Vr1,[2,35]),o($Vn1,[2,101]),{7:376,8:119,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V81,33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,71:48,72:49,74:39,76:26,77:27,78:28,86:[2,136],89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},{86:[2,137],116:96,117:$Vr,119:$Vs,122:97,123:$Vu,125:72,139:$VG,143:$VH,144:$VI,147:$VJ,148:$VK,149:$VL,150:$VM,151:$VN,152:$VO,153:$VP,154:$VQ,155:$VR,156:$VS,157:$VT},o($VB1,[2,45],{125:72,116:96,122:97,143:$VH,144:$VI,147:$VJ,148:$VK,149:$VL,150:$VM,151:$VN,152:$VO,153:$VP,154:$VQ,155:$VR,156:$VS,157:$VT}),{7:377,8:119,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V81,33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,71:48,72:49,74:39,76:26,77:27,78:28,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},{7:378,8:119,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V81,33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,71:48,72:49,74:39,76:26,77:27,78:28,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},{34:$Vv1,89:$Vw1,103:$Vx1,114:$Vp2,141:$Vz1,160:246,172:379,173:233,174:234,175:235,176:236,177:237,178:238,179:239,180:240,181:241,182:242},{34:$Vv1,89:$Vw1,103:$Vx1,114:$Vp2,141:$Vz1,160:246,174:381,175:235,176:236,177:237,178:238,179:239,180:240,181:241,182:242},o($V12,[2,289]),{195:[1,382]},{115:[1,383]},{86:[1,384]},o($V62,[2,257]),{34:$Vv1,160:385},{34:$Vv1,89:$Vw1,103:$Vx1,114:$Vy1,141:$Vz1,160:246,168:388,169:227,170:228,171:229,172:230,173:233,174:234,175:235,176:236,177:237,178:238,179:239,180:240,181:241,182:242,184:386,185:387,195:$VA1},o($V62,[2,273]),{91:[1,389]},{67:[1,391],91:[2,275],190:[1,390]},o($Vq2,[2,278]),o($Vq2,[2,281]),o($Vq2,[2,282]),o($Vq2,$V41,{51:392,11:394,147:[1,393],167:$V51}),{34:[1,396],161:395},o($Vr2,[2,285]),o($Vr2,[2,286]),o($Vr2,[2,287]),o([1,6,32,40,52,67,79,84,91,104,115,117,119,123,139,147,153,155,156,167,190],[2,230]),o($Vr2,[2,237]),o($Vr2,[2,238]),{67:[1,398],104:[1,397]},o($Vs2,[2,266]),o($V62,[2,270],{79:[1,399]}),o($Vt2,[2,271]),{6:$Vj2,31:$Vk2,99:[1,400]},o($VP1,$Vi2),{30:401,31:$Vf1},o($VF1,[2,71]),{33:127,34:$V2,57:128,68:402,69:125,70:$Vc1,71:129,72:130,89:$Vi,102:$Vd1,103:$Ve1},o($Vu2,$Vb1,{68:124,69:125,33:127,57:128,71:129,72:130,61:403,34:$V2,70:$Vc1,89:$Vi,102:$Vd1,103:$Ve1}),o($VF1,[2,76],{125:72,116:96,122:97,117:$Vr,119:$Vs,123:$Vu,139:$VG,143:$VH,144:$VI,147:$VJ,148:$VK,149:$VL,150:$VM,151:$VN,152:$VO,153:$VP,154:$VQ,155:$VR,156:$VS,157:$VT}),o($Vf2,[2,30]),{32:[1,404],116:96,117:$Vr,119:$Vs,122:97,123:$Vu,125:72,139:$VG,143:$VH,144:$VI,147:$VJ,148:$VK,149:$VL,150:$VM,151:$VN,152:$VO,153:$VP,154:$VQ,155:$VR,156:$VS,157:$VT},o($VB1,[2,228],{125:72,116:96,122:97,143:$VH,144:$VI,147:$VJ,148:$VK,149:$VL,150:$VM,151:$VN,152:$VO,153:$VP,154:$VQ,155:$VR,156:$VS,157:$VT}),{30:405,31:$Vf1,116:96,117:$Vr,119:$Vs,122:97,123:$Vu,125:72,139:$VG,143:$VH,144:$VI,147:$VJ,148:$VK,149:$VL,150:$VM,151:$VN,152:$VO,153:$VP,154:$VQ,155:$VR,156:$VS,157:$VT},{30:406,31:$Vf1},o($VV,[2,151]),{30:407,31:$Vf1},{30:408,31:$Vf1},o($Vv2,[2,155]),{32:[1,409],134:[1,410],135:349,136:$VK1},o($VV,[2,192]),{30:411,31:$Vf1},o($Vg2,[2,195]),{30:412,31:$Vf1,67:[1,413]},o($Vw2,[2,147],{125:72,116:96,122:97,117:$Vr,119:$Vs,123:$Vu,139:$VG,143:$VH,144:$VI,147:$VJ,148:$VK,149:$VL,150:$VM,151:$VN,152:$VO,153:$VP,154:$VQ,155:$VR,156:$VS,157:$VT}),o($VV,[2,114]),o($Vh2,[2,117],{125:72,116:96,122:97,30:414,31:$Vf1,117:$Vr,119:$Vs,123:$Vu,143:$VH,144:$VI,147:$VJ,148:$VK,149:$VL,150:$VM,151:$VN,152:$VO,153:$VP,154:$VQ,155:$VR,156:$VS,157:$VT}),{115:[1,415]},{104:[1,416],116:96,117:$Vr,119:$Vs,122:97,123:$Vu,125:72,139:$VG,143:$VH,144:$VI,147:$VJ,148:$VK,149:$VL,150:$VM,151:$VN,152:$VO,153:$VP,154:$VQ,155:$VR,156:$VS,157:$VT},o($VN1,[2,131]),{7:252,8:119,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V81,33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,70:$Vl1,71:48,72:49,73:167,74:39,76:26,77:27,78:28,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,107:417,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},{7:252,8:119,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V81,31:$Vk1,33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,70:$Vl1,71:48,72:49,73:167,74:39,76:26,77:27,78:28,89:$Vi,92:$Vj,96:$Vk,100:418,101:$Vl,102:$Vm,103:$Vn,107:165,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},o($VP1,[2,140]),{6:$Vj2,31:$Vk2,32:[1,419]},o($VR1,[2,160],{125:72,116:96,122:97,117:$Vr,119:$Vs,123:$Vu,143:$VH,144:$VI,147:$VJ,148:$VK,149:$VL,150:$VM,151:$VN,152:$VO,153:$VP,154:$VQ,155:$VR,156:$VS,157:$VT}),o($VR1,[2,162],{125:72,116:96,122:97,117:$Vr,119:$Vs,123:$Vu,143:$VH,144:$VI,147:$VJ,148:$VK,149:$VL,150:$VM,151:$VN,152:$VO,153:$VP,154:$VQ,155:$VR,156:$VS,157:$VT}),o($VR1,[2,173],{125:72,116:96,122:97,117:$Vr,119:$Vs,123:$Vu,143:$VH,144:$VI,147:$VJ,148:$VK,149:$VL,150:$VM,151:$VN,152:$VO,153:$VP,154:$VQ,155:$VR,156:$VS,157:$VT}),o($VS1,[2,182]),{7:420,8:119,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V81,33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,71:48,72:49,74:39,76:26,77:27,78:28,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},{7:421,8:119,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V81,33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,71:48,72:49,74:39,76:26,77:27,78:28,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},{7:422,8:119,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V81,33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,71:48,72:49,74:39,76:26,77:27,78:28,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},o($VN1,[2,105]),{13:190,33:192,34:$V2,35:191,36:$V3,37:75,38:$V4,39:$V5,53:423,54:188,56:189,57:193,59:$Ve,102:$Vd1},o($Vu2,$Vo1,{37:75,53:187,54:188,56:189,13:190,35:191,33:192,57:193,90:424,34:$V2,36:$V3,38:$V4,39:$V5,59:$Ve,102:$Vd1}),o($VV1,[2,108]),o($VV1,[2,49],{125:72,116:96,122:97,117:$Vr,119:$Vs,123:$Vu,139:$VG,143:$VH,144:$VI,147:$VJ,148:$VK,149:$VL,150:$VM,151:$VN,152:$VO,153:$VP,154:$VQ,155:$VR,156:$VS,157:$VT}),{7:425,8:119,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V81,33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,71:48,72:49,74:39,76:26,77:27,78:28,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},o($VV1,[2,51],{125:72,116:96,122:97,117:$Vr,119:$Vs,123:$Vu,139:$VG,143:$VH,144:$VI,147:$VJ,148:$VK,149:$VL,150:$VM,151:$VN,152:$VO,153:$VP,154:$VQ,155:$VR,156:$VS,157:$VT}),{7:426,8:119,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V81,33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,71:48,72:49,74:39,76:26,77:27,78:28,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},{86:[2,135],116:96,117:$Vr,119:$Vs,122:97,123:$Vu,125:72,139:$VG,143:$VH,144:$VI,147:$VJ,148:$VK,149:$VL,150:$VM,151:$VN,152:$VO,153:$VP,154:$VQ,155:$VR,156:$VS,157:$VT},o($VB1,[2,46],{125:72,116:96,122:97,143:$VH,144:$VI,147:$VJ,148:$VK,149:$VL,150:$VM,151:$VN,152:$VO,153:$VP,154:$VQ,155:$VR,156:$VS,157:$VT}),{32:[1,427],116:96,117:$Vr,119:$Vs,122:97,123:$Vu,125:72,139:$VG,143:$VH,144:$VI,147:$VJ,148:$VK,149:$VL,150:$VM,151:$VN,152:$VO,153:$VP,154:$VQ,155:$VR,156:$VS,157:$VT},o($V22,[2,268],{156:$V32}),{34:$Vv1,89:$Vw1,103:$Vx1,114:$Vy1,141:$Vz1,160:246,168:307,169:227,170:228,171:229,172:230,173:233,174:234,175:235,176:236,177:237,178:238,179:239,180:240,181:241,182:242,195:$VA1},o($V42,[2,269],{84:$V52}),{34:$Vv1,89:$Vw1,103:$Vx1,114:$Vy1,141:$Vz1,160:246,168:428,169:227,170:228,171:229,172:230,173:233,174:234,175:235,176:236,177:237,178:238,179:239,180:240,181:241,182:242,195:$VA1},o($V62,[2,255]),o($V62,[2,264]),o($Va2,[2,259]),{67:[1,430],153:[1,429]},o($Vx2,[2,261]),o($Vx2,[2,263]),o($V62,[2,274]),{34:$V72,36:$V82,37:324,38:$V4,39:$V5,91:[2,276],103:$V92,159:320,165:321,166:322,191:431,192:316,193:317,194:318},{34:$V72,36:$V82,37:324,38:$V4,39:$V5,91:[2,277],103:$V92,159:320,165:321,166:322,191:432,192:316,193:317,194:318},o($Vq2,[2,283]),o($Vq2,$V41,{11:394,51:433,167:$V51}),o($Vq2,$Vu1),{11:434,167:$V51},{167:[2,232]},o($V62,[2,265]),{34:$Vv1,89:$Vw1,103:$Vx1,114:$Vy1,141:$Vz1,160:246,168:435,169:227,170:228,171:229,172:230,173:233,174:234,175:235,176:236,177:237,178:238,179:239,180:240,181:241,182:242,195:$VA1},{34:$V72,159:436},o($VC1,[2,126]),o($VV,[2,63]),o($VF1,[2,72]),o($Vb2,$VD1,{66:437,67:$VE1}),o($VV,[2,227]),o($Vl2,[2,199]),o($VV,[2,152]),o($Vv2,[2,153]),o($Vv2,[2,154]),o($VV,[2,190]),{30:438,31:$Vf1},{32:[1,439]},o($Vg2,[2,196],{6:[1,440]}),{7:441,8:119,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V81,33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,71:48,72:49,74:39,76:26,77:27,78:28,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},o($VV,[2,118]),o($V21,[2,158]),o($V21,[2,134]),o($VP1,[2,141]),o($Vb2,$VD1,{66:442,67:$VO1}),o($VP1,[2,142]),o([1,6,31,32,40,62,67,70,86,91,99,104,106,115,117,118,119,123,139],[2,185],{125:72,116:96,122:97,124:[1,443],143:$VH,144:$VI,147:$VJ,148:$VK,149:$VL,150:$VM,151:$VN,152:$VO,153:$VP,154:$VQ,155:$VR,156:$VS,157:$VT}),o($Vm2,[2,187],{125:72,116:96,122:97,118:[1,444],143:$VH,144:$VI,147:$VJ,148:$VK,149:$VL,150:$VM,151:$VN,152:$VO,153:$VP,154:$VQ,155:$VR,156:$VS,157:$VT}),o($VB1,[2,186],{125:72,116:96,122:97,143:$VH,144:$VI,147:$VJ,148:$VK,149:$VL,150:$VM,151:$VN,152:$VO,153:$VP,154:$VQ,155:$VR,156:$VS,157:$VT}),o($VV1,[2,109]),o($Vb2,$VD1,{66:445,67:$VU1}),{32:[1,446],116:96,117:$Vr,119:$Vs,122:97,123:$Vu,125:72,139:$VG,143:$VH,144:$VI,147:$VJ,148:$VK,149:$VL,150:$VM,151:$VN,152:$VO,153:$VP,154:$VQ,155:$VR,156:$VS,157:$VT},{32:[1,447],116:96,117:$Vr,119:$Vs,122:97,123:$Vu,125:72,139:$VG,143:$VH,144:$VI,147:$VJ,148:$VK,149:$VL,150:$VM,151:$VN,152:$VO,153:$VP,154:$VQ,155:$VR,156:$VS,157:$VT},o($VV,[2,47]),o($V12,[2,290]),o($V62,[2,260]),{34:$Vv1,89:$Vw1,103:$Vx1,114:$Vy1,141:$Vz1,160:246,168:388,169:227,170:228,171:229,172:230,173:233,174:234,175:235,176:236,177:237,178:238,179:239,180:240,181:241,182:242,185:448,195:$VA1},o($Vq2,[2,279]),o($Vq2,[2,280]),o($Vq2,[2,284]),{104:[1,449]},o($Vs2,[2,267]),o($Vt2,[2,272]),{6:$Vd2,31:$Ve2,32:[1,450]},{32:[1,451]},o($VV,[2,193]),o($Vg2,[2,197]),o($Vw2,[2,148],{125:72,116:96,122:97,117:$Vr,119:$Vs,123:$Vu,139:$VG,143:$VH,144:$VI,147:$VJ,148:$VK,149:$VL,150:$VM,151:$VN,152:$VO,153:$VP,154:$VQ,155:$VR,156:$VS,157:$VT}),{6:$Vj2,31:$Vk2,32:[1,452]},{7:453,8:119,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V81,33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,71:48,72:49,74:39,76:26,77:27,78:28,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},{7:454,8:119,10:20,12:21,13:22,14:$V0,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V81,33:65,34:$V2,35:52,36:$V3,37:75,38:$V4,39:$V5,41:54,42:$V6,43:$V7,45:25,46:$V8,47:$V9,48:$Va,49:$Vb,50:$Vc,57:66,58:$Vd,59:$Ve,60:$Vf,63:31,64:$Vg,65:$Vh,71:48,72:49,74:39,76:26,77:27,78:28,89:$Vi,92:$Vj,96:$Vk,101:$Vl,102:$Vm,103:$Vn,109:$Vo,113:$Vp,114:$Vq,116:42,117:$Vr,119:$Vs,120:43,121:$Vt,122:44,123:$Vu,125:72,132:$Vv,137:40,138:$Vw,140:$Vx,141:$Vy,142:$Vz,143:$VA,144:$VB,145:$VC,146:$VD},{6:$Vn2,31:$Vo2,32:[1,455]},o($VV1,[2,50]),o($VV1,[2,52]),o($Vx2,[2,262]),{11:456,167:$V51},o($VF1,[2,73]),o($VV,[2,191]),o($VP1,[2,143]),o($VB1,[2,188],{125:72,116:96,122:97,143:$VH,144:$VI,147:$VJ,148:$VK,149:$VL,150:$VM,151:$VN,152:$VO,153:$VP,154:$VQ,155:$VR,156:$VS,157:$VT}),o($VB1,[2,189],{125:72,116:96,122:97,143:$VH,144:$VI,147:$VJ,148:$VK,149:$VL,150:$VM,151:$VN,152:$VO,153:$VP,154:$VQ,155:$VR,156:$VS,157:$VT}),o($VV1,[2,110]),o($Vq2,[2,288])],
defaultActions: {63:[2,65],64:[2,66],103:[2,124],219:[2,104],396:[2,232]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
  return module.exports;
})();require['./scope'] = (function() {
  var exports = {}, module = {exports: exports};
  // Generated by CoffeeScript 1.10.0
(function() {
  var Scope,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  exports.Scope = Scope = (function() {
    function Scope(parent, expressions, method, referencedVars) {
      var ref, ref1;
      this.parent = parent;
      this.expressions = expressions;
      this.method = method;
      this.referencedVars = referencedVars;
      this.variables = [
        {
          name: 'arguments',
          type: 'arguments'
        }
      ];
      this.positions = {};
      if (!this.parent) {
        this.utilities = {};
      }
      this.root = (ref = (ref1 = this.parent) != null ? ref1.root : void 0) != null ? ref : this;
    }

    Scope.prototype.add = function(name, type, immediate) {
      if (this.shared && !immediate) {
        return this.parent.add(name, type, immediate);
      }
      if (Object.prototype.hasOwnProperty.call(this.positions, name)) {
        return this.variables[this.positions[name]].type = type;
      } else {
        return this.positions[name] = this.variables.push({
          name: name,
          type: type
        }) - 1;
      }
    };

    Scope.prototype.namedMethod = function() {
      var ref;
      if (((ref = this.method) != null ? ref.name : void 0) || !this.parent) {
        return this.method;
      }
      return this.parent.namedMethod();
    };

    Scope.prototype.find = function(name) {
      if (this.check(name)) {
        return true;
      }
      this.add(name, 'var');
      return false;
    };

    Scope.prototype.parameter = function(name) {
      if (this.shared && this.parent.check(name, true)) {
        return;
      }
      return this.add(name, 'param');
    };

    Scope.prototype.check = function(name) {
      var ref;
      return !!(this.type(name) || ((ref = this.parent) != null ? ref.check(name) : void 0));
    };

    Scope.prototype.temporary = function(name, index, single) {
      if (single == null) {
        single = false;
      }
      if (single) {
        return (index + parseInt(name, 36)).toString(36).replace(/\d/g, 'a');
      } else {
        return name + (index || '');
      }
    };

    Scope.prototype.type = function(name) {
      var i, len, ref, v;
      ref = this.variables;
      for (i = 0, len = ref.length; i < len; i++) {
        v = ref[i];
        if (v.name === name) {
          return v.type;
        }
      }
      return null;
    };

    Scope.prototype.freeVariable = function(name, options) {
      var index, ref, temp;
      if (options == null) {
        options = {};
      }
      index = 0;
      while (true) {
        temp = this.temporary(name, index, options.single);
        if (!(this.check(temp) || indexOf.call(this.root.referencedVars, temp) >= 0)) {
          break;
        }
        index++;
      }
      if ((ref = options.reserve) != null ? ref : true) {
        this.add(temp, 'var', true);
      }
      return temp;
    };

    Scope.prototype.assign = function(name, value) {
      this.add(name, {
        value: value,
        assigned: true
      }, true);
      return this.hasAssignments = true;
    };

    Scope.prototype.hasDeclarations = function() {
      return !!this.declaredVariables().length;
    };

    Scope.prototype.declaredVariables = function() {
      var v;
      return ((function() {
        var i, len, ref, results;
        ref = this.variables;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          v = ref[i];
          if (v.type === 'var') {
            results.push(v.name);
          }
        }
        return results;
      }).call(this)).sort();
    };

    Scope.prototype.assignedVariables = function() {
      var i, len, ref, results, v;
      ref = this.variables;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        v = ref[i];
        if (v.type.assigned) {
          results.push(v.name + " = " + v.type.value);
        }
      }
      return results;
    };

    return Scope;

  })();

}).call(this);

  return module.exports;
})();require['./nodes'] = (function() {
  var exports = {}, module = {exports: exports};
  // Generated by CoffeeScript 1.10.0
(function() {
  var Access, Arr, Assign, Base, Block, Call, Class, Code, CodeFragment, Comment, Existence, Expansion, Extends, For, HEXNUM, IDENTIFIER, IS_REGEX, IS_STRING, If, In, Index, LEVEL_ACCESS, LEVEL_COND, LEVEL_LIST, LEVEL_OP, LEVEL_PAREN, LEVEL_TOP, Literal, NEGATE, NO, NUMBER, Obj, Op, Param, Parens, RESERVED, Range, Return, SIMPLENUM, STRICT_PROSCRIBED, Scope, Slice, Splat, Switch, TAB, THIS, Throw, Try, UTILITIES, Value, While, YES, YieldReturn, addLocationDataFn, compact, del, ends, extend, flatten, fragmentsToText, isComplexOrAssignable, isLiteralArguments, isLiteralThis, locationDataToString, merge, multident, parseNum, ref1, ref2, some, starts, throwSyntaxError, unfoldSoak, utility,
    extend1 = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    slice = [].slice;

  Error.stackTraceLimit = Infinity;

  Scope = require('./scope').Scope;

  ref1 = require('./lexer'), RESERVED = ref1.RESERVED, STRICT_PROSCRIBED = ref1.STRICT_PROSCRIBED;

  ref2 = require('./helpers'), compact = ref2.compact, flatten = ref2.flatten, extend = ref2.extend, merge = ref2.merge, del = ref2.del, starts = ref2.starts, ends = ref2.ends, some = ref2.some, addLocationDataFn = ref2.addLocationDataFn, locationDataToString = ref2.locationDataToString, throwSyntaxError = ref2.throwSyntaxError;

  exports.extend = extend;

  exports.addLocationDataFn = addLocationDataFn;

  YES = function() {
    return true;
  };

  NO = function() {
    return false;
  };

  THIS = function() {
    return this;
  };

  NEGATE = function() {
    this.negated = !this.negated;
    return this;
  };

  exports.CodeFragment = CodeFragment = (function() {
    function CodeFragment(parent, code) {
      var ref3;
      this.code = "" + code;
      this.locationData = parent != null ? parent.locationData : void 0;
      this.type = (parent != null ? (ref3 = parent.constructor) != null ? ref3.name : void 0 : void 0) || 'unknown';
    }

    CodeFragment.prototype.toString = function() {
      return "" + this.code + (this.locationData ? ": " + locationDataToString(this.locationData) : '');
    };

    return CodeFragment;

  })();

  fragmentsToText = function(fragments) {
    var fragment;
    return ((function() {
      var j, len1, results;
      results = [];
      for (j = 0, len1 = fragments.length; j < len1; j++) {
        fragment = fragments[j];
        results.push(fragment.code);
      }
      return results;
    })()).join('');
  };

  exports.Base = Base = (function() {
    function Base() {}

    Base.prototype.compile = function(o, lvl) {
      return fragmentsToText(this.compileToFragments(o, lvl));
    };

    Base.prototype.compileToFragments = function(o, lvl) {
      var node;
      o = extend({}, o);
      if (lvl) {
        o.level = lvl;
      }
      node = this.unfoldSoak(o) || this;
      node.tab = o.indent;
      if (o.level === LEVEL_TOP || !node.isStatement(o)) {
        return node.compileNode(o);
      } else {
        return node.compileClosure(o);
      }
    };

    Base.prototype.compileClosure = function(o) {
      var args, argumentsNode, func, jumpNode, meth, parts, ref3;
      if (jumpNode = this.jumps()) {
        jumpNode.error('cannot use a pure statement in an expression');
      }
      o.sharedScope = true;
      func = new Code([], Block.wrap([this]));
      args = [];
      if ((argumentsNode = this.contains(isLiteralArguments)) || this.contains(isLiteralThis)) {
        args = [new Literal('this')];
        if (argumentsNode) {
          meth = 'apply';
          args.push(new Literal('arguments'));
        } else {
          meth = 'call';
        }
        func = new Value(func, [new Access(new Literal(meth))]);
      }
      parts = (new Call(func, args)).compileNode(o);
      if (func.isGenerator || ((ref3 = func.base) != null ? ref3.isGenerator : void 0)) {
        parts.unshift(this.makeCode("(yield* "));
        parts.push(this.makeCode(")"));
      }
      return parts;
    };

    Base.prototype.cache = function(o, level, isComplex) {
      var complex, ref, sub;
      complex = isComplex != null ? isComplex(this) : this.isComplex();
      if (complex) {
        ref = new Literal(o.scope.freeVariable('ref'));
        sub = new Assign(ref, this);
        if (level) {
          return [sub.compileToFragments(o, level), [this.makeCode(ref.value)]];
        } else {
          return [sub, ref];
        }
      } else {
        ref = level ? this.compileToFragments(o, level) : this;
        return [ref, ref];
      }
    };

    Base.prototype.cacheToCodeFragments = function(cacheValues) {
      return [fragmentsToText(cacheValues[0]), fragmentsToText(cacheValues[1])];
    };

    Base.prototype.makeReturn = function(res) {
      var me;
      me = this.unwrapAll();
      if (res) {
        return new Call(new Literal(res + ".push"), [me]);
      } else {
        return new Return(me);
      }
    };

    Base.prototype.contains = function(pred) {
      var node;
      node = void 0;
      this.traverseChildren(false, function(n) {
        if (pred(n)) {
          node = n;
          return false;
        }
      });
      return node;
    };

    Base.prototype.lastNonComment = function(list) {
      var i;
      i = list.length;
      while (i--) {
        if (!(list[i] instanceof Comment)) {
          return list[i];
        }
      }
      return null;
    };

    Base.prototype.toString = function(idt, name) {
      var tree;
      if (idt == null) {
        idt = '';
      }
      if (name == null) {
        name = this.constructor.name;
      }
      tree = '\n' + idt + name;
      if (this.soak) {
        tree += '?';
      }
      this.eachChild(function(node) {
        return tree += node.toString(idt + TAB);
      });
      return tree;
    };

    Base.prototype.eachChild = function(func) {
      var attr, child, j, k, len1, len2, ref3, ref4;
      if (!this.children) {
        return this;
      }
      ref3 = this.children;
      for (j = 0, len1 = ref3.length; j < len1; j++) {
        attr = ref3[j];
        if (this[attr]) {
          ref4 = flatten([this[attr]]);
          for (k = 0, len2 = ref4.length; k < len2; k++) {
            child = ref4[k];
            if (func(child) === false) {
              return this;
            }
          }
        }
      }
      return this;
    };

    Base.prototype.traverseChildren = function(crossScope, func) {
      return this.eachChild(function(child) {
        var recur;
        recur = func(child);
        if (recur !== false) {
          return child.traverseChildren(crossScope, func);
        }
      });
    };

    Base.prototype.invert = function() {
      return new Op('!', this);
    };

    Base.prototype.unwrapAll = function() {
      var node;
      node = this;
      while (node !== (node = node.unwrap())) {
        continue;
      }
      return node;
    };

    Base.prototype.children = [];

    Base.prototype.isStatement = NO;

    Base.prototype.jumps = NO;

    Base.prototype.isComplex = YES;

    Base.prototype.isChainable = NO;

    Base.prototype.isAssignable = NO;

    Base.prototype.unwrap = THIS;

    Base.prototype.unfoldSoak = NO;

    Base.prototype.assigns = NO;

    Base.prototype.updateLocationDataIfMissing = function(locationData) {
      if (this.locationData) {
        return this;
      }
      this.locationData = locationData;
      return this.eachChild(function(child) {
        return child.updateLocationDataIfMissing(locationData);
      });
    };

    Base.prototype.error = function(message) {
      return throwSyntaxError(message, this.locationData);
    };

    Base.prototype.makeCode = function(code) {
      return new CodeFragment(this, code);
    };

    Base.prototype.wrapInBraces = function(fragments) {
      return [].concat(this.makeCode('('), fragments, this.makeCode(')'));
    };

    Base.prototype.joinFragmentArrays = function(fragmentsList, joinStr) {
      var answer, fragments, i, j, len1;
      answer = [];
      for (i = j = 0, len1 = fragmentsList.length; j < len1; i = ++j) {
        fragments = fragmentsList[i];
        if (i) {
          answer.push(this.makeCode(joinStr));
        }
        answer = answer.concat(fragments);
      }
      return answer;
    };

    return Base;

  })();

  exports.Block = Block = (function(superClass1) {
    extend1(Block, superClass1);

    function Block(nodes) {
      this.expressions = compact(flatten(nodes || []));
    }

    Block.prototype.children = ['expressions'];

    Block.prototype.push = function(node) {
      this.expressions.push(node);
      return this;
    };

    Block.prototype.pop = function() {
      return this.expressions.pop();
    };

    Block.prototype.unshift = function(node) {
      this.expressions.unshift(node);
      return this;
    };

    Block.prototype.unwrap = function() {
      if (this.expressions.length === 1) {
        return this.expressions[0];
      } else {
        return this;
      }
    };

    Block.prototype.isEmpty = function() {
      return !this.expressions.length;
    };

    Block.prototype.isStatement = function(o) {
      var exp, j, len1, ref3;
      ref3 = this.expressions;
      for (j = 0, len1 = ref3.length; j < len1; j++) {
        exp = ref3[j];
        if (exp.isStatement(o)) {
          return true;
        }
      }
      return false;
    };

    Block.prototype.jumps = function(o) {
      var exp, j, jumpNode, len1, ref3;
      ref3 = this.expressions;
      for (j = 0, len1 = ref3.length; j < len1; j++) {
        exp = ref3[j];
        if (jumpNode = exp.jumps(o)) {
          return jumpNode;
        }
      }
    };

    Block.prototype.makeReturn = function(res) {
      var expr, len;
      len = this.expressions.length;
      while (len--) {
        expr = this.expressions[len];
        if (!(expr instanceof Comment)) {
          this.expressions[len] = expr.makeReturn(res);
          if (expr instanceof Return && !expr.expression) {
            this.expressions.splice(len, 1);
          }
          break;
        }
      }
      return this;
    };

    Block.prototype.compileToFragments = function(o, level) {
      if (o == null) {
        o = {};
      }
      if (o.scope) {
        return Block.__super__.compileToFragments.call(this, o, level);
      } else {
        return this.compileRoot(o);
      }
    };

    Block.prototype.compileNode = function(o) {
      var answer, compiledNodes, fragments, index, j, len1, node, ref3, top;
      this.tab = o.indent;
      top = o.level === LEVEL_TOP;
      compiledNodes = [];
      ref3 = this.expressions;
      for (index = j = 0, len1 = ref3.length; j < len1; index = ++j) {
        node = ref3[index];
        node = node.unwrapAll();
        node = node.unfoldSoak(o) || node;
        if (node instanceof Block) {
          compiledNodes.push(node.compileNode(o));
        } else if (top) {
          node.front = true;
          fragments = node.compileToFragments(o);
          if (!node.isStatement(o)) {
            fragments.unshift(this.makeCode("" + this.tab));
            fragments.push(this.makeCode(";"));
          }
          compiledNodes.push(fragments);
        } else {
          compiledNodes.push(node.compileToFragments(o, LEVEL_LIST));
        }
      }
      if (top) {
        if (this.spaced) {
          return [].concat(this.joinFragmentArrays(compiledNodes, '\n\n'), this.makeCode("\n"));
        } else {
          return this.joinFragmentArrays(compiledNodes, '\n');
        }
      }
      if (compiledNodes.length) {
        answer = this.joinFragmentArrays(compiledNodes, ', ');
      } else {
        answer = [this.makeCode("void 0")];
      }
      if (compiledNodes.length > 1 && o.level >= LEVEL_LIST) {
        return this.wrapInBraces(answer);
      } else {
        return answer;
      }
    };

    Block.prototype.compileRoot = function(o) {
      var exp, fragments, i, j, len1, name, prelude, preludeExps, ref3, ref4, rest;
      o.indent = o.bare ? '' : TAB;
      o.level = LEVEL_TOP;
      this.spaced = true;
      o.scope = new Scope(null, this, null, (ref3 = o.referencedVars) != null ? ref3 : []);
      ref4 = o.locals || [];
      for (j = 0, len1 = ref4.length; j < len1; j++) {
        name = ref4[j];
        o.scope.parameter(name);
      }
      prelude = [];
      if (!o.bare) {
        preludeExps = (function() {
          var k, len2, ref5, results;
          ref5 = this.expressions;
          results = [];
          for (i = k = 0, len2 = ref5.length; k < len2; i = ++k) {
            exp = ref5[i];
            if (!(exp.unwrap() instanceof Comment)) {
              break;
            }
            results.push(exp);
          }
          return results;
        }).call(this);
        rest = this.expressions.slice(preludeExps.length);
        this.expressions = preludeExps;
        if (preludeExps.length) {
          prelude = this.compileNode(merge(o, {
            indent: ''
          }));
          prelude.push(this.makeCode("\n"));
        }
        this.expressions = rest;
      }
      fragments = this.compileWithDeclarations(o);
      if (o.bare) {
        return fragments;
      }
      return [].concat(prelude, this.makeCode("(function() {\n"), fragments, this.makeCode("\n}).call(this);\n"));
    };

    Block.prototype.compileWithDeclarations = function(o) {
      var assigns, declars, exp, fragments, i, j, len1, post, ref3, ref4, ref5, rest, scope, spaced;
      fragments = [];
      post = [];
      ref3 = this.expressions;
      for (i = j = 0, len1 = ref3.length; j < len1; i = ++j) {
        exp = ref3[i];
        exp = exp.unwrap();
        if (!(exp instanceof Comment || exp instanceof Literal)) {
          break;
        }
      }
      o = merge(o, {
        level: LEVEL_TOP
      });
      if (i) {
        rest = this.expressions.splice(i, 9e9);
        ref4 = [this.spaced, false], spaced = ref4[0], this.spaced = ref4[1];
        ref5 = [this.compileNode(o), spaced], fragments = ref5[0], this.spaced = ref5[1];
        this.expressions = rest;
      }
      post = this.compileNode(o);
      scope = o.scope;
      if (scope.expressions === this) {
        declars = o.scope.hasDeclarations();
        assigns = scope.hasAssignments;
        if (declars || assigns) {
          if (i) {
            fragments.push(this.makeCode('\n'));
          }
          fragments.push(this.makeCode(this.tab + "var "));
          if (declars) {
            fragments.push(this.makeCode(scope.declaredVariables().join(', ')));
          }
          if (assigns) {
            if (declars) {
              fragments.push(this.makeCode(",\n" + (this.tab + TAB)));
            }
            fragments.push(this.makeCode(scope.assignedVariables().join(",\n" + (this.tab + TAB))));
          }
          fragments.push(this.makeCode(";\n" + (this.spaced ? '\n' : '')));
        } else if (fragments.length && post.length) {
          fragments.push(this.makeCode("\n"));
        }
      }
      return fragments.concat(post);
    };

    Block.wrap = function(nodes) {
      if (nodes.length === 1 && nodes[0] instanceof Block) {
        return nodes[0];
      }
      return new Block(nodes);
    };

    return Block;

  })(Base);

  exports.Literal = Literal = (function(superClass1) {
    extend1(Literal, superClass1);

    function Literal(value1) {
      this.value = value1;
    }

    Literal.prototype.makeReturn = function() {
      if (this.isStatement()) {
        return this;
      } else {
        return Literal.__super__.makeReturn.apply(this, arguments);
      }
    };

    Literal.prototype.isAssignable = function() {
      return IDENTIFIER.test(this.value);
    };

    Literal.prototype.isStatement = function() {
      var ref3;
      return (ref3 = this.value) === 'break' || ref3 === 'continue' || ref3 === 'debugger';
    };

    Literal.prototype.isComplex = NO;

    Literal.prototype.assigns = function(name) {
      return name === this.value;
    };

    Literal.prototype.jumps = function(o) {
      if (this.value === 'break' && !((o != null ? o.loop : void 0) || (o != null ? o.block : void 0))) {
        return this;
      }
      if (this.value === 'continue' && !(o != null ? o.loop : void 0)) {
        return this;
      }
    };

    Literal.prototype.compileNode = function(o) {
      var answer, code, ref3;
      code = this.value === 'this' ? ((ref3 = o.scope.method) != null ? ref3.bound : void 0) ? o.scope.method.context : this.value : this.value.reserved ? "\"" + this.value + "\"" : this.value;
      answer = this.isStatement() ? "" + this.tab + code + ";" : code;
      return [this.makeCode(answer)];
    };

    Literal.prototype.toString = function() {
      return ' "' + this.value + '"';
    };

    return Literal;

  })(Base);

  exports.Undefined = (function(superClass1) {
    extend1(Undefined, superClass1);

    function Undefined() {
      return Undefined.__super__.constructor.apply(this, arguments);
    }

    Undefined.prototype.isAssignable = NO;

    Undefined.prototype.isComplex = NO;

    Undefined.prototype.compileNode = function(o) {
      return [this.makeCode(o.level >= LEVEL_ACCESS ? '(void 0)' : 'void 0')];
    };

    return Undefined;

  })(Base);

  exports.Null = (function(superClass1) {
    extend1(Null, superClass1);

    function Null() {
      return Null.__super__.constructor.apply(this, arguments);
    }

    Null.prototype.isAssignable = NO;

    Null.prototype.isComplex = NO;

    Null.prototype.compileNode = function() {
      return [this.makeCode("null")];
    };

    return Null;

  })(Base);

  exports.Bool = (function(superClass1) {
    extend1(Bool, superClass1);

    Bool.prototype.isAssignable = NO;

    Bool.prototype.isComplex = NO;

    Bool.prototype.compileNode = function() {
      return [this.makeCode(this.val)];
    };

    function Bool(val1) {
      this.val = val1;
    }

    return Bool;

  })(Base);

  exports.Return = Return = (function(superClass1) {
    extend1(Return, superClass1);

    function Return(expression) {
      this.expression = expression;
    }

    Return.prototype.children = ['expression'];

    Return.prototype.isStatement = YES;

    Return.prototype.makeReturn = THIS;

    Return.prototype.jumps = THIS;

    Return.prototype.compileToFragments = function(o, level) {
      var expr, ref3;
      expr = (ref3 = this.expression) != null ? ref3.makeReturn() : void 0;
      if (expr && !(expr instanceof Return)) {
        return expr.compileToFragments(o, level);
      } else {
        return Return.__super__.compileToFragments.call(this, o, level);
      }
    };

    Return.prototype.compileNode = function(o) {
      var answer;
      answer = [];
      answer.push(this.makeCode(this.tab + ("return" + (this.expression ? " " : ""))));
      if (this.expression) {
        answer = answer.concat(this.expression.compileToFragments(o, LEVEL_PAREN));
      }
      answer.push(this.makeCode(";"));
      return answer;
    };

    return Return;

  })(Base);

  exports.YieldReturn = YieldReturn = (function(superClass1) {
    extend1(YieldReturn, superClass1);

    function YieldReturn() {
      return YieldReturn.__super__.constructor.apply(this, arguments);
    }

    YieldReturn.prototype.compileNode = function(o) {
      if (o.scope.parent == null) {
        this.error('yield can only occur inside functions');
      }
      return YieldReturn.__super__.compileNode.apply(this, arguments);
    };

    return YieldReturn;

  })(Return);

  exports.Value = Value = (function(superClass1) {
    extend1(Value, superClass1);

    function Value(base, props, tag) {
      if (!props && base instanceof Value) {
        return base;
      }
      this.base = base;
      this.properties = props || [];
      if (tag) {
        this[tag] = true;
      }
      return this;
    }

    Value.prototype.children = ['base', 'properties'];

    Value.prototype.add = function(props) {
      this.properties = this.properties.concat(props);
      return this;
    };

    Value.prototype.hasProperties = function() {
      return !!this.properties.length;
    };

    Value.prototype.bareLiteral = function(type) {
      return !this.properties.length && this.base instanceof type;
    };

    Value.prototype.isArray = function() {
      return this.bareLiteral(Arr);
    };

    Value.prototype.isRange = function() {
      return this.bareLiteral(Range);
    };

    Value.prototype.isComplex = function() {
      return this.hasProperties() || this.base.isComplex();
    };

    Value.prototype.isAssignable = function() {
      return this.hasProperties() || this.base.isAssignable();
    };

    Value.prototype.isSimpleNumber = function() {
      return this.bareLiteral(Literal) && SIMPLENUM.test(this.base.value);
    };

    Value.prototype.isString = function() {
      return this.bareLiteral(Literal) && IS_STRING.test(this.base.value);
    };

    Value.prototype.isRegex = function() {
      return this.bareLiteral(Literal) && IS_REGEX.test(this.base.value);
    };

    Value.prototype.isAtomic = function() {
      var j, len1, node, ref3;
      ref3 = this.properties.concat(this.base);
      for (j = 0, len1 = ref3.length; j < len1; j++) {
        node = ref3[j];
        if (node.soak || node instanceof Call) {
          return false;
        }
      }
      return true;
    };

    Value.prototype.isNotCallable = function() {
      return this.isSimpleNumber() || this.isString() || this.isRegex() || this.isArray() || this.isRange() || this.isSplice() || this.isObject();
    };

    Value.prototype.isStatement = function(o) {
      return !this.properties.length && this.base.isStatement(o);
    };

    Value.prototype.assigns = function(name) {
      return !this.properties.length && this.base.assigns(name);
    };

    Value.prototype.jumps = function(o) {
      return !this.properties.length && this.base.jumps(o);
    };

    Value.prototype.isObject = function(onlyGenerated) {
      if (this.properties.length) {
        return false;
      }
      return (this.base instanceof Obj) && (!onlyGenerated || this.base.generated);
    };

    Value.prototype.isSplice = function() {
      var lastProp, ref3;
      ref3 = this.properties, lastProp = ref3[ref3.length - 1];
      return lastProp instanceof Slice;
    };

    Value.prototype.looksStatic = function(className) {
      var ref3;
      return this.base.value === className && this.properties.length === 1 && ((ref3 = this.properties[0].name) != null ? ref3.value : void 0) !== 'prototype';
    };

    Value.prototype.unwrap = function() {
      if (this.properties.length) {
        return this;
      } else {
        return this.base;
      }
    };

    Value.prototype.cacheReference = function(o) {
      var base, bref, name, nref, ref3;
      ref3 = this.properties, name = ref3[ref3.length - 1];
      if (this.properties.length < 2 && !this.base.isComplex() && !(name != null ? name.isComplex() : void 0)) {
        return [this, this];
      }
      base = new Value(this.base, this.properties.slice(0, -1));
      if (base.isComplex()) {
        bref = new Literal(o.scope.freeVariable('base'));
        base = new Value(new Parens(new Assign(bref, base)));
      }
      if (!name) {
        return [base, bref];
      }
      if (name.isComplex()) {
        nref = new Literal(o.scope.freeVariable('name'));
        name = new Index(new Assign(nref, name.index));
        nref = new Index(nref);
      }
      return [base.add(name), new Value(bref || base.base, [nref || name])];
    };

    Value.prototype.compileNode = function(o) {
      var fragments, j, len1, prop, props;
      this.base.front = this.front;
      props = this.properties;
      fragments = this.base.compileToFragments(o, (props.length ? LEVEL_ACCESS : null));
      if ((this.base instanceof Parens || props.length) && SIMPLENUM.test(fragmentsToText(fragments))) {
        fragments.push(this.makeCode('.'));
      }
      for (j = 0, len1 = props.length; j < len1; j++) {
        prop = props[j];
        fragments.push.apply(fragments, prop.compileToFragments(o));
      }
      return fragments;
    };

    Value.prototype.unfoldSoak = function(o) {
      return this.unfoldedSoak != null ? this.unfoldedSoak : this.unfoldedSoak = (function(_this) {
        return function() {
          var fst, i, ifn, j, len1, prop, ref, ref3, ref4, snd;
          if (ifn = _this.base.unfoldSoak(o)) {
            (ref3 = ifn.body.properties).push.apply(ref3, _this.properties);
            return ifn;
          }
          ref4 = _this.properties;
          for (i = j = 0, len1 = ref4.length; j < len1; i = ++j) {
            prop = ref4[i];
            if (!prop.soak) {
              continue;
            }
            prop.soak = false;
            fst = new Value(_this.base, _this.properties.slice(0, i));
            snd = new Value(_this.base, _this.properties.slice(i));
            if (fst.isComplex()) {
              ref = new Literal(o.scope.freeVariable('ref'));
              fst = new Parens(new Assign(ref, fst));
              snd.base = ref;
            }
            return new If(new Existence(fst), snd, {
              soak: true
            });
          }
          return false;
        };
      })(this)();
    };

    return Value;

  })(Base);

  exports.Comment = Comment = (function(superClass1) {
    extend1(Comment, superClass1);

    function Comment(comment1) {
      this.comment = comment1;
    }

    Comment.prototype.isStatement = YES;

    Comment.prototype.makeReturn = THIS;

    Comment.prototype.compileNode = function(o, level) {
      var code, comment;
      comment = this.comment.replace(/^(\s*)#(?=\s)/gm, "$1 *");
      code = "/*" + (multident(comment, this.tab)) + (indexOf.call(comment, '\n') >= 0 ? "\n" + this.tab : '') + " */";
      if ((level || o.level) === LEVEL_TOP) {
        code = o.indent + code;
      }
      return [this.makeCode("\n"), this.makeCode(code)];
    };

    return Comment;

  })(Base);

  exports.Call = Call = (function(superClass1) {
    extend1(Call, superClass1);

    function Call(variable, args1, soak) {
      this.args = args1 != null ? args1 : [];
      this.soak = soak;
      this.isNew = false;
      this.isSuper = variable === 'super';
      this.variable = this.isSuper ? null : variable;
      if (variable instanceof Value && variable.isNotCallable()) {
        variable.error("literal is not a function");
      }
    }

    Call.prototype.children = ['variable', 'args'];

    Call.prototype.newInstance = function() {
      var base, ref3;
      base = ((ref3 = this.variable) != null ? ref3.base : void 0) || this.variable;
      if (base instanceof Call && !base.isNew) {
        base.newInstance();
      } else {
        this.isNew = true;
      }
      return this;
    };

    Call.prototype.superReference = function(o) {
      var accesses, base, bref, klass, method, name, nref, variable;
      method = o.scope.namedMethod();
      if (method != null ? method.klass : void 0) {
        klass = method.klass, name = method.name, variable = method.variable;
        if (klass.isComplex()) {
          bref = new Literal(o.scope.parent.freeVariable('base'));
          base = new Value(new Parens(new Assign(bref, klass)));
          variable.base = base;
          variable.properties.splice(0, klass.properties.length);
        }
        if (name.isComplex() || (name instanceof Index && name.index.isAssignable())) {
          nref = new Literal(o.scope.parent.freeVariable('name'));
          name = new Index(new Assign(nref, name.index));
          variable.properties.pop();
          variable.properties.push(name);
        }
        accesses = [new Access(new Literal('__super__'))];
        if (method["static"]) {
          accesses.push(new Access(new Literal('constructor')));
        }
        accesses.push(nref != null ? new Index(nref) : name);
        return (new Value(bref != null ? bref : klass, accesses)).compile(o);
      } else if (method != null ? method.ctor : void 0) {
        return method.name + ".__super__.constructor";
      } else {
        return this.error('cannot call super outside of an instance method.');
      }
    };

    Call.prototype.superThis = function(o) {
      var method;
      method = o.scope.method;
      return (method && !method.klass && method.context) || "this";
    };

    Call.prototype.unfoldSoak = function(o) {
      var call, ifn, j, left, len1, list, ref3, ref4, rite;
      if (this.soak) {
        if (this.variable) {
          if (ifn = unfoldSoak(o, this, 'variable')) {
            return ifn;
          }
          ref3 = new Value(this.variable).cacheReference(o), left = ref3[0], rite = ref3[1];
        } else {
          left = new Literal(this.superReference(o));
          rite = new Value(left);
        }
        rite = new Call(rite, this.args);
        rite.isNew = this.isNew;
        left = new Literal("typeof " + (left.compile(o)) + " === \"function\"");
        return new If(left, new Value(rite), {
          soak: true
        });
      }
      call = this;
      list = [];
      while (true) {
        if (call.variable instanceof Call) {
          list.push(call);
          call = call.variable;
          continue;
        }
        if (!(call.variable instanceof Value)) {
          break;
        }
        list.push(call);
        if (!((call = call.variable.base) instanceof Call)) {
          break;
        }
      }
      ref4 = list.reverse();
      for (j = 0, len1 = ref4.length; j < len1; j++) {
        call = ref4[j];
        if (ifn) {
          if (call.variable instanceof Call) {
            call.variable = ifn;
          } else {
            call.variable.base = ifn;
          }
        }
        ifn = unfoldSoak(o, call, 'variable');
      }
      return ifn;
    };

    Call.prototype.compileNode = function(o) {
      var arg, argIndex, compiledArgs, compiledArray, fragments, j, len1, preface, ref3, ref4;
      if ((ref3 = this.variable) != null) {
        ref3.front = this.front;
      }
      compiledArray = Splat.compileSplattedArray(o, this.args, true);
      if (compiledArray.length) {
        return this.compileSplat(o, compiledArray);
      }
      compiledArgs = [];
      ref4 = this.args;
      for (argIndex = j = 0, len1 = ref4.length; j < len1; argIndex = ++j) {
        arg = ref4[argIndex];
        if (argIndex) {
          compiledArgs.push(this.makeCode(", "));
        }
        compiledArgs.push.apply(compiledArgs, arg.compileToFragments(o, LEVEL_LIST));
      }
      fragments = [];
      if (this.isSuper) {
        preface = this.superReference(o) + (".call(" + (this.superThis(o)));
        if (compiledArgs.length) {
          preface += ", ";
        }
        fragments.push(this.makeCode(preface));
      } else {
        if (this.isNew) {
          fragments.push(this.makeCode('new '));
        }
        fragments.push.apply(fragments, this.variable.compileToFragments(o, LEVEL_ACCESS));
        fragments.push(this.makeCode("("));
      }
      fragments.push.apply(fragments, compiledArgs);
      fragments.push(this.makeCode(")"));
      return fragments;
    };

    Call.prototype.compileSplat = function(o, splatArgs) {
      var answer, base, fun, idt, name, ref;
      if (this.isSuper) {
        return [].concat(this.makeCode((this.superReference(o)) + ".apply(" + (this.superThis(o)) + ", "), splatArgs, this.makeCode(")"));
      }
      if (this.isNew) {
        idt = this.tab + TAB;
        return [].concat(this.makeCode("(function(func, args, ctor) {\n" + idt + "ctor.prototype = func.prototype;\n" + idt + "var child = new ctor, result = func.apply(child, args);\n" + idt + "return Object(result) === result ? result : child;\n" + this.tab + "})("), this.variable.compileToFragments(o, LEVEL_LIST), this.makeCode(", "), splatArgs, this.makeCode(", function(){})"));
      }
      answer = [];
      base = new Value(this.variable);
      if ((name = base.properties.pop()) && base.isComplex()) {
        ref = o.scope.freeVariable('ref');
        answer = answer.concat(this.makeCode("(" + ref + " = "), base.compileToFragments(o, LEVEL_LIST), this.makeCode(")"), name.compileToFragments(o));
      } else {
        fun = base.compileToFragments(o, LEVEL_ACCESS);
        if (SIMPLENUM.test(fragmentsToText(fun))) {
          fun = this.wrapInBraces(fun);
        }
        if (name) {
          ref = fragmentsToText(fun);
          fun.push.apply(fun, name.compileToFragments(o));
        } else {
          ref = 'null';
        }
        answer = answer.concat(fun);
      }
      return answer = answer.concat(this.makeCode(".apply(" + ref + ", "), splatArgs, this.makeCode(")"));
    };

    return Call;

  })(Base);

  exports.Extends = Extends = (function(superClass1) {
    extend1(Extends, superClass1);

    function Extends(child1, parent1) {
      this.child = child1;
      this.parent = parent1;
    }

    Extends.prototype.children = ['child', 'parent'];

    Extends.prototype.compileToFragments = function(o) {
      return new Call(new Value(new Literal(utility('extend', o))), [this.child, this.parent]).compileToFragments(o);
    };

    return Extends;

  })(Base);

  exports.Access = Access = (function(superClass1) {
    extend1(Access, superClass1);

    function Access(name1, tag) {
      this.name = name1;
      this.name.asKey = true;
      this.soak = tag === 'soak';
    }

    Access.prototype.children = ['name'];

    Access.prototype.compileToFragments = function(o) {
      var name;
      name = this.name.compileToFragments(o);
      if (IDENTIFIER.test(fragmentsToText(name))) {
        name.unshift(this.makeCode("."));
      } else {
        name.unshift(this.makeCode("["));
        name.push(this.makeCode("]"));
      }
      return name;
    };

    Access.prototype.isComplex = NO;

    return Access;

  })(Base);

  exports.Index = Index = (function(superClass1) {
    extend1(Index, superClass1);

    function Index(index1) {
      this.index = index1;
    }

    Index.prototype.children = ['index'];

    Index.prototype.compileToFragments = function(o) {
      return [].concat(this.makeCode("["), this.index.compileToFragments(o, LEVEL_PAREN), this.makeCode("]"));
    };

    Index.prototype.isComplex = function() {
      return this.index.isComplex();
    };

    return Index;

  })(Base);

  exports.Range = Range = (function(superClass1) {
    extend1(Range, superClass1);

    Range.prototype.children = ['from', 'to'];

    function Range(from1, to1, tag) {
      this.from = from1;
      this.to = to1;
      this.exclusive = tag === 'exclusive';
      this.equals = this.exclusive ? '' : '=';
    }

    Range.prototype.compileVariables = function(o) {
      var isComplex, ref3, ref4, ref5, ref6, step;
      o = merge(o, {
        top: true
      });
      isComplex = del(o, 'isComplex');
      ref3 = this.cacheToCodeFragments(this.from.cache(o, LEVEL_LIST, isComplex)), this.fromC = ref3[0], this.fromVar = ref3[1];
      ref4 = this.cacheToCodeFragments(this.to.cache(o, LEVEL_LIST, isComplex)), this.toC = ref4[0], this.toVar = ref4[1];
      if (step = del(o, 'step')) {
        ref5 = this.cacheToCodeFragments(step.cache(o, LEVEL_LIST, isComplex)), this.step = ref5[0], this.stepVar = ref5[1];
      }
      ref6 = [this.fromVar.match(NUMBER), this.toVar.match(NUMBER)], this.fromNum = ref6[0], this.toNum = ref6[1];
      if (this.stepVar) {
        return this.stepNum = this.stepVar.match(NUMBER);
      }
    };

    Range.prototype.compileNode = function(o) {
      var cond, condPart, from, gt, idx, idxName, known, lt, namedIndex, ref3, ref4, stepPart, to, varPart;
      if (!this.fromVar) {
        this.compileVariables(o);
      }
      if (!o.index) {
        return this.compileArray(o);
      }
      known = this.fromNum && this.toNum;
      idx = del(o, 'index');
      idxName = del(o, 'name');
      namedIndex = idxName && idxName !== idx;
      varPart = idx + " = " + this.fromC;
      if (this.toC !== this.toVar) {
        varPart += ", " + this.toC;
      }
      if (this.step !== this.stepVar) {
        varPart += ", " + this.step;
      }
      ref3 = [idx + " <" + this.equals, idx + " >" + this.equals], lt = ref3[0], gt = ref3[1];
      condPart = this.stepNum ? parseNum(this.stepNum[0]) > 0 ? lt + " " + this.toVar : gt + " " + this.toVar : known ? ((ref4 = [parseNum(this.fromNum[0]), parseNum(this.toNum[0])], from = ref4[0], to = ref4[1], ref4), from <= to ? lt + " " + to : gt + " " + to) : (cond = this.stepVar ? this.stepVar + " > 0" : this.fromVar + " <= " + this.toVar, cond + " ? " + lt + " " + this.toVar + " : " + gt + " " + this.toVar);
      stepPart = this.stepVar ? idx + " += " + this.stepVar : known ? namedIndex ? from <= to ? "++" + idx : "--" + idx : from <= to ? idx + "++" : idx + "--" : namedIndex ? cond + " ? ++" + idx + " : --" + idx : cond + " ? " + idx + "++ : " + idx + "--";
      if (namedIndex) {
        varPart = idxName + " = " + varPart;
      }
      if (namedIndex) {
        stepPart = idxName + " = " + stepPart;
      }
      return [this.makeCode(varPart + "; " + condPart + "; " + stepPart)];
    };

    Range.prototype.compileArray = function(o) {
      var args, body, cond, hasArgs, i, idt, j, post, pre, range, ref3, ref4, result, results, vars;
      if (this.fromNum && this.toNum && Math.abs(this.fromNum - this.toNum) <= 20) {
        range = (function() {
          results = [];
          for (var j = ref3 = +this.fromNum, ref4 = +this.toNum; ref3 <= ref4 ? j <= ref4 : j >= ref4; ref3 <= ref4 ? j++ : j--){ results.push(j); }
          return results;
        }).apply(this);
        if (this.exclusive) {
          range.pop();
        }
        return [this.makeCode("[" + (range.join(', ')) + "]")];
      }
      idt = this.tab + TAB;
      i = o.scope.freeVariable('i', {
        single: true
      });
      result = o.scope.freeVariable('results');
      pre = "\n" + idt + result + " = [];";
      if (this.fromNum && this.toNum) {
        o.index = i;
        body = fragmentsToText(this.compileNode(o));
      } else {
        vars = (i + " = " + this.fromC) + (this.toC !== this.toVar ? ", " + this.toC : '');
        cond = this.fromVar + " <= " + this.toVar;
        body = "var " + vars + "; " + cond + " ? " + i + " <" + this.equals + " " + this.toVar + " : " + i + " >" + this.equals + " " + this.toVar + "; " + cond + " ? " + i + "++ : " + i + "--";
      }
      post = "{ " + result + ".push(" + i + "); }\n" + idt + "return " + result + ";\n" + o.indent;
      hasArgs = function(node) {
        return node != null ? node.contains(isLiteralArguments) : void 0;
      };
      if (hasArgs(this.from) || hasArgs(this.to)) {
        args = ', arguments';
      }
      return [this.makeCode("(function() {" + pre + "\n" + idt + "for (" + body + ")" + post + "}).apply(this" + (args != null ? args : '') + ")")];
    };

    return Range;

  })(Base);

  exports.Slice = Slice = (function(superClass1) {
    extend1(Slice, superClass1);

    Slice.prototype.children = ['range'];

    function Slice(range1) {
      this.range = range1;
      Slice.__super__.constructor.call(this);
    }

    Slice.prototype.compileNode = function(o) {
      var compiled, compiledText, from, fromCompiled, ref3, to, toStr;
      ref3 = this.range, to = ref3.to, from = ref3.from;
      fromCompiled = from && from.compileToFragments(o, LEVEL_PAREN) || [this.makeCode('0')];
      if (to) {
        compiled = to.compileToFragments(o, LEVEL_PAREN);
        compiledText = fragmentsToText(compiled);
        if (!(!this.range.exclusive && +compiledText === -1)) {
          toStr = ', ' + (this.range.exclusive ? compiledText : SIMPLENUM.test(compiledText) ? "" + (+compiledText + 1) : (compiled = to.compileToFragments(o, LEVEL_ACCESS), "+" + (fragmentsToText(compiled)) + " + 1 || 9e9"));
        }
      }
      return [this.makeCode(".slice(" + (fragmentsToText(fromCompiled)) + (toStr || '') + ")")];
    };

    return Slice;

  })(Base);

  exports.Obj = Obj = (function(superClass1) {
    extend1(Obj, superClass1);

    function Obj(props, generated) {
      this.generated = generated != null ? generated : false;
      this.objects = this.properties = props || [];
    }

    Obj.prototype.children = ['properties'];

    Obj.prototype.compileNode = function(o) {
      var answer, dynamicIndex, hasDynamic, i, idt, indent, j, join, k, key, l, lastNoncom, len1, len2, len3, node, oref, prop, props, ref3, value;
      props = this.properties;
      if (this.generated) {
        for (j = 0, len1 = props.length; j < len1; j++) {
          node = props[j];
          if (node instanceof Value) {
            node.error('cannot have an implicit value in an implicit object');
          }
        }
      }
      for (dynamicIndex = k = 0, len2 = props.length; k < len2; dynamicIndex = ++k) {
        prop = props[dynamicIndex];
        if ((prop.variable || prop).base instanceof Parens) {
          break;
        }
      }
      hasDynamic = dynamicIndex < props.length;
      idt = o.indent += TAB;
      lastNoncom = this.lastNonComment(this.properties);
      answer = [];
      if (hasDynamic) {
        oref = o.scope.freeVariable('obj');
        answer.push(this.makeCode("(\n" + idt + oref + " = "));
      }
      answer.push(this.makeCode("{" + (props.length === 0 || dynamicIndex === 0 ? '}' : '\n')));
      for (i = l = 0, len3 = props.length; l < len3; i = ++l) {
        prop = props[i];
        if (i === dynamicIndex) {
          if (i !== 0) {
            answer.push(this.makeCode("\n" + idt + "}"));
          }
          answer.push(this.makeCode(',\n'));
        }
        join = i === props.length - 1 || i === dynamicIndex - 1 ? '' : prop === lastNoncom || prop instanceof Comment ? '\n' : ',\n';
        indent = prop instanceof Comment ? '' : idt;
        if (hasDynamic && i < dynamicIndex) {
          indent += TAB;
        }
        if (prop instanceof Assign) {
          if (prop.context !== 'object') {
            prop.operatorToken.error("unexpected " + prop.operatorToken.value);
          }
          if (prop.variable instanceof Value && prop.variable.hasProperties()) {
            prop.variable.error('invalid object key');
          }
        }
        if (prop instanceof Value && prop["this"]) {
          prop = new Assign(prop.properties[0].name, prop, 'object');
        }
        if (!(prop instanceof Comment)) {
          if (i < dynamicIndex) {
            if (!(prop instanceof Assign)) {
              prop = new Assign(prop, prop, 'object');
            }
            (prop.variable.base || prop.variable).asKey = true;
          } else {
            if (prop instanceof Assign) {
              key = prop.variable;
              value = prop.value;
            } else {
              ref3 = prop.base.cache(o), key = ref3[0], value = ref3[1];
            }
            prop = new Assign(new Value(new Literal(oref), [new Access(key)]), value);
          }
        }
        if (indent) {
          answer.push(this.makeCode(indent));
        }
        answer.push.apply(answer, prop.compileToFragments(o, LEVEL_TOP));
        if (join) {
          answer.push(this.makeCode(join));
        }
      }
      if (hasDynamic) {
        answer.push(this.makeCode(",\n" + idt + oref + "\n" + this.tab + ")"));
      } else {
        if (props.length !== 0) {
          answer.push(this.makeCode("\n" + this.tab + "}"));
        }
      }
      if (this.front && !hasDynamic) {
        return this.wrapInBraces(answer);
      } else {
        return answer;
      }
    };

    Obj.prototype.assigns = function(name) {
      var j, len1, prop, ref3;
      ref3 = this.properties;
      for (j = 0, len1 = ref3.length; j < len1; j++) {
        prop = ref3[j];
        if (prop.assigns(name)) {
          return true;
        }
      }
      return false;
    };

    return Obj;

  })(Base);

  exports.Arr = Arr = (function(superClass1) {
    extend1(Arr, superClass1);

    function Arr(objs) {
      this.objects = objs || [];
    }

    Arr.prototype.children = ['objects'];

    Arr.prototype.compileNode = function(o) {
      var answer, compiledObjs, fragments, index, j, len1, obj;
      if (!this.objects.length) {
        return [this.makeCode('[]')];
      }
      o.indent += TAB;
      answer = Splat.compileSplattedArray(o, this.objects);
      if (answer.length) {
        return answer;
      }
      answer = [];
      compiledObjs = (function() {
        var j, len1, ref3, results;
        ref3 = this.objects;
        results = [];
        for (j = 0, len1 = ref3.length; j < len1; j++) {
          obj = ref3[j];
          results.push(obj.compileToFragments(o, LEVEL_LIST));
        }
        return results;
      }).call(this);
      for (index = j = 0, len1 = compiledObjs.length; j < len1; index = ++j) {
        fragments = compiledObjs[index];
        if (index) {
          answer.push(this.makeCode(", "));
        }
        answer.push.apply(answer, fragments);
      }
      if (fragmentsToText(answer).indexOf('\n') >= 0) {
        answer.unshift(this.makeCode("[\n" + o.indent));
        answer.push(this.makeCode("\n" + this.tab + "]"));
      } else {
        answer.unshift(this.makeCode("["));
        answer.push(this.makeCode("]"));
      }
      return answer;
    };

    Arr.prototype.assigns = function(name) {
      var j, len1, obj, ref3;
      ref3 = this.objects;
      for (j = 0, len1 = ref3.length; j < len1; j++) {
        obj = ref3[j];
        if (obj.assigns(name)) {
          return true;
        }
      }
      return false;
    };

    return Arr;

  })(Base);

  exports.Class = Class = (function(superClass1) {
    extend1(Class, superClass1);

    function Class(variable1, parent1, body1) {
      this.variable = variable1;
      this.parent = parent1;
      this.body = body1 != null ? body1 : new Block;
      this.boundFuncs = [];
      this.body.classBody = true;
    }

    Class.prototype.children = ['variable', 'parent', 'body'];

    Class.prototype.determineName = function() {
      var decl, ref3, tail;
      if (!this.variable) {
        return null;
      }
      ref3 = this.variable.properties, tail = ref3[ref3.length - 1];
      decl = tail ? tail instanceof Access && tail.name.value : this.variable.base.value;
      if (indexOf.call(STRICT_PROSCRIBED, decl) >= 0) {
        this.variable.error("class variable name may not be " + decl);
      }
      return decl && (decl = IDENTIFIER.test(decl) && decl);
    };

    Class.prototype.setContext = function(name) {
      return this.body.traverseChildren(false, function(node) {
        if (node.classBody) {
          return false;
        }
        if (node instanceof Literal && node.value === 'this') {
          return node.value = name;
        } else if (node instanceof Code) {
          if (node.bound) {
            return node.context = name;
          }
        }
      });
    };

    Class.prototype.addBoundFunctions = function(o) {
      var bvar, j, len1, lhs, ref3;
      ref3 = this.boundFuncs;
      for (j = 0, len1 = ref3.length; j < len1; j++) {
        bvar = ref3[j];
        lhs = (new Value(new Literal("this"), [new Access(bvar)])).compile(o);
        this.ctor.body.unshift(new Literal(lhs + " = " + (utility('bind', o)) + "(" + lhs + ", this)"));
      }
    };

    Class.prototype.addProperties = function(node, name, o) {
      var acc, assign, base, exprs, func, props;
      props = node.base.properties.slice(0);
      exprs = (function() {
        var results;
        results = [];
        while (assign = props.shift()) {
          if (assign instanceof Assign) {
            base = assign.variable.base;
            delete assign.context;
            func = assign.value;
            if (base.value === 'constructor') {
              if (this.ctor) {
                assign.error('cannot define more than one constructor in a class');
              }
              if (func.bound) {
                assign.error('cannot define a constructor as a bound function');
              }
              if (func instanceof Code) {
                assign = this.ctor = func;
              } else {
                this.externalCtor = o.classScope.freeVariable('class');
                assign = new Assign(new Literal(this.externalCtor), func);
              }
            } else {
              if (assign.variable["this"]) {
                func["static"] = true;
              } else {
                acc = base.isComplex() ? new Index(base) : new Access(base);
                assign.variable = new Value(new Literal(name), [new Access(new Literal('prototype')), acc]);
                if (func instanceof Code && func.bound) {
                  this.boundFuncs.push(base);
                  func.bound = false;
                }
              }
            }
          }
          results.push(assign);
        }
        return results;
      }).call(this);
      return compact(exprs);
    };

    Class.prototype.walkBody = function(name, o) {
      return this.traverseChildren(false, (function(_this) {
        return function(child) {
          var cont, exps, i, j, len1, node, ref3;
          cont = true;
          if (child instanceof Class) {
            return false;
          }
          if (child instanceof Block) {
            ref3 = exps = child.expressions;
            for (i = j = 0, len1 = ref3.length; j < len1; i = ++j) {
              node = ref3[i];
              if (node instanceof Assign && node.variable.looksStatic(name)) {
                node.value["static"] = true;
              } else if (node instanceof Value && node.isObject(true)) {
                cont = false;
                exps[i] = _this.addProperties(node, name, o);
              }
            }
            child.expressions = exps = flatten(exps);
          }
          return cont && !(child instanceof Class);
        };
      })(this));
    };

    Class.prototype.hoistDirectivePrologue = function() {
      var expressions, index, node;
      index = 0;
      expressions = this.body.expressions;
      while ((node = expressions[index]) && node instanceof Comment || node instanceof Value && node.isString()) {
        ++index;
      }
      return this.directives = expressions.splice(0, index);
    };

    Class.prototype.ensureConstructor = function(name) {
      if (!this.ctor) {
        this.ctor = new Code;
        if (this.externalCtor) {
          this.ctor.body.push(new Literal(this.externalCtor + ".apply(this, arguments)"));
        } else if (this.parent) {
          this.ctor.body.push(new Literal(name + ".__super__.constructor.apply(this, arguments)"));
        }
        this.ctor.body.makeReturn();
        this.body.expressions.unshift(this.ctor);
      }
      this.ctor.ctor = this.ctor.name = name;
      this.ctor.klass = null;
      return this.ctor.noReturn = true;
    };

    Class.prototype.compileNode = function(o) {
      var args, argumentsNode, func, jumpNode, klass, lname, name, ref3, superClass;
      if (jumpNode = this.body.jumps()) {
        jumpNode.error('Class bodies cannot contain pure statements');
      }
      if (argumentsNode = this.body.contains(isLiteralArguments)) {
        argumentsNode.error("Class bodies shouldn't reference arguments");
      }
      name = this.determineName() || '_Class';
      if (name.reserved) {
        name = "_" + name;
      }
      lname = new Literal(name);
      func = new Code([], Block.wrap([this.body]));
      args = [];
      o.classScope = func.makeScope(o.scope);
      this.hoistDirectivePrologue();
      this.setContext(name);
      this.walkBody(name, o);
      this.ensureConstructor(name);
      this.addBoundFunctions(o);
      this.body.spaced = true;
      this.body.expressions.push(lname);
      if (this.parent) {
        superClass = new Literal(o.classScope.freeVariable('superClass', {
          reserve: false
        }));
        this.body.expressions.unshift(new Extends(lname, superClass));
        func.params.push(new Param(superClass));
        args.push(this.parent);
      }
      (ref3 = this.body.expressions).unshift.apply(ref3, this.directives);
      klass = new Parens(new Call(func, args));
      if (this.variable) {
        klass = new Assign(this.variable, klass);
      }
      return klass.compileToFragments(o);
    };

    return Class;

  })(Base);

  exports.Assign = Assign = (function(superClass1) {
    extend1(Assign, superClass1);

    function Assign(variable1, value1, context, options, type1) {
      var forbidden, name, ref3;
      this.variable = variable1;
      this.value = value1;
      this.context = context;
      if (options == null) {
        options = {};
      }
      this.type = type1;
      this.param = options.param, this.subpattern = options.subpattern, this.operatorToken = options.operatorToken;
      forbidden = (ref3 = (name = this.variable.unwrapAll().value), indexOf.call(STRICT_PROSCRIBED, ref3) >= 0);
      if (forbidden && this.context !== 'object') {
        this.variable.error("variable name may not be \"" + name + "\"");
      }
    }

    Assign.prototype.children = ['variable', 'value'];

    Assign.prototype.isStatement = function(o) {
      return (o != null ? o.level : void 0) === LEVEL_TOP && (this.context != null) && indexOf.call(this.context, "?") >= 0;
    };

    Assign.prototype.assigns = function(name) {
      return this[this.context === 'object' ? 'value' : 'variable'].assigns(name);
    };

    Assign.prototype.unfoldSoak = function(o) {
      return unfoldSoak(o, this, 'variable');
    };

    Assign.prototype.compileNode = function(o) {
      var answer, compiledName, isValue, j, name, properties, prototype, ref3, ref4, ref5, ref6, ref7, val, varBase;
      if (isValue = this.variable instanceof Value) {
        if (this.variable.isArray() || this.variable.isObject()) {
          return this.compilePatternMatch(o);
        }
        if (this.variable.isSplice()) {
          return this.compileSplice(o);
        }
        if ((ref3 = this.context) === '||=' || ref3 === '&&=' || ref3 === '?=') {
          return this.compileConditional(o);
        }
        if ((ref4 = this.context) === '**=' || ref4 === '//=' || ref4 === '%%=') {
          return this.compileSpecialMath(o);
        }
      }
      if (this.value instanceof Code) {
        if (this.value["static"]) {
          this.value.klass = this.variable.base;
          this.value.name = this.variable.properties[0];
          this.value.variable = this.variable;
        } else if (((ref5 = this.variable.properties) != null ? ref5.length : void 0) >= 2) {
          ref6 = this.variable.properties, properties = 3 <= ref6.length ? slice.call(ref6, 0, j = ref6.length - 2) : (j = 0, []), prototype = ref6[j++], name = ref6[j++];
          if (((ref7 = prototype.name) != null ? ref7.value : void 0) === 'prototype') {
            this.value.klass = new Value(this.variable.base, properties);
            this.value.name = name;
            this.value.variable = this.variable;
          }
        }
      }
      if (!this.context) {
        varBase = this.variable.unwrapAll();
        if (!varBase.isAssignable()) {
          this.variable.error("\"" + (this.variable.compile(o)) + "\" cannot be assigned");
        }
        if (!(typeof varBase.hasProperties === "function" ? varBase.hasProperties() : void 0)) {
          if (this.param) {
            o.scope.add(varBase.value, 'var');
          } else {
            o.scope.find(varBase.value);
          }
        }
      }
      val = this.value.compileToFragments(o, LEVEL_LIST);
      if (isValue && this.variable.base instanceof Obj) {
        this.variable.front = true;
      }
      compiledName = this.variable.compileToFragments(o, LEVEL_LIST);
      if (this.context === 'object') {
        return compiledName.concat(this.makeCode(": "), val);
      }
      answer = compiledName.concat(this.makeCode(" " + (this.context || '=') + " "), val);
      if (o.level <= LEVEL_LIST) {
        return answer;
      } else {
        return this.wrapInBraces(answer);
      }
    };

    Assign.prototype.compilePatternMatch = function(o) {
      var acc, assigns, code, defaultValue, expandedIdx, fragments, i, idx, isObject, ivar, j, len1, name, obj, objects, olen, ref, ref3, ref4, ref5, ref6, ref7, rest, top, val, value, vvar, vvarText;
      top = o.level === LEVEL_TOP;
      value = this.value;
      objects = this.variable.base.objects;
      if (!(olen = objects.length)) {
        code = value.compileToFragments(o);
        if (o.level >= LEVEL_OP) {
          return this.wrapInBraces(code);
        } else {
          return code;
        }
      }
      obj = objects[0];
      if (olen === 1 && obj instanceof Expansion) {
        obj.error('Destructuring assignment has no target');
      }
      isObject = this.variable.isObject();
      if (top && olen === 1 && !(obj instanceof Splat)) {
        defaultValue = null;
        if (obj instanceof Assign && obj.context === 'object') {
          ref3 = obj, (ref4 = ref3.variable, idx = ref4.base), obj = ref3.value;
          if (obj instanceof Assign) {
            defaultValue = obj.value;
            obj = obj.variable;
          }
        } else {
          if (obj instanceof Assign) {
            defaultValue = obj.value;
            obj = obj.variable;
          }
          idx = isObject ? obj["this"] ? obj.properties[0].name : obj : new Literal(0);
        }
        acc = IDENTIFIER.test(idx.unwrap().value);
        value = new Value(value);
        value.properties.push(new (acc ? Access : Index)(idx));
        if (ref5 = obj.unwrap().value, indexOf.call(RESERVED, ref5) >= 0) {
          obj.error("assignment to a reserved word: " + (obj.compile(o)));
        }
        if (defaultValue) {
          value = new Op('?', value, defaultValue);
        }
        return new Assign(obj, value, null, {
          param: this.param
        }).compileToFragments(o, LEVEL_TOP);
      }
      vvar = value.compileToFragments(o, LEVEL_LIST);
      vvarText = fragmentsToText(vvar);
      assigns = [];
      expandedIdx = false;
      if (!IDENTIFIER.test(vvarText) || this.variable.assigns(vvarText)) {
        assigns.push([this.makeCode((ref = o.scope.freeVariable('ref')) + " = ")].concat(slice.call(vvar)));
        vvar = [this.makeCode(ref)];
        vvarText = ref;
      }
      for (i = j = 0, len1 = objects.length; j < len1; i = ++j) {
        obj = objects[i];
        idx = i;
        if (!expandedIdx && obj instanceof Splat) {
          name = obj.name.unwrap().value;
          obj = obj.unwrap();
          val = olen + " <= " + vvarText + ".length ? " + (utility('slice', o)) + ".call(" + vvarText + ", " + i;
          if (rest = olen - i - 1) {
            ivar = o.scope.freeVariable('i', {
              single: true
            });
            val += ", " + ivar + " = " + vvarText + ".length - " + rest + ") : (" + ivar + " = " + i + ", [])";
          } else {
            val += ") : []";
          }
          val = new Literal(val);
          expandedIdx = ivar + "++";
        } else if (!expandedIdx && obj instanceof Expansion) {
          if (rest = olen - i - 1) {
            if (rest === 1) {
              expandedIdx = vvarText + ".length - 1";
            } else {
              ivar = o.scope.freeVariable('i', {
                single: true
              });
              val = new Literal(ivar + " = " + vvarText + ".length - " + rest);
              expandedIdx = ivar + "++";
              assigns.push(val.compileToFragments(o, LEVEL_LIST));
            }
          }
          continue;
        } else {
          if (obj instanceof Splat || obj instanceof Expansion) {
            obj.error("multiple splats/expansions are disallowed in an assignment");
          }
          defaultValue = null;
          if (obj instanceof Assign && obj.context === 'object') {
            ref6 = obj, (ref7 = ref6.variable, idx = ref7.base), obj = ref6.value;
            if (obj instanceof Assign) {
              defaultValue = obj.value;
              obj = obj.variable;
            }
          } else {
            if (obj instanceof Assign) {
              defaultValue = obj.value;
              obj = obj.variable;
            }
            idx = isObject ? obj["this"] ? obj.properties[0].name : obj : new Literal(expandedIdx || idx);
          }
          name = obj.unwrap().value;
          acc = IDENTIFIER.test(idx.unwrap().value);
          val = new Value(new Literal(vvarText), [new (acc ? Access : Index)(idx)]);
          if (defaultValue) {
            val = new Op('?', val, defaultValue);
          }
        }
        if ((name != null) && indexOf.call(RESERVED, name) >= 0) {
          obj.error("assignment to a reserved word: " + (obj.compile(o)));
        }
        assigns.push(new Assign(obj, val, null, {
          param: this.param,
          subpattern: true
        }).compileToFragments(o, LEVEL_LIST));
      }
      if (!(top || this.subpattern)) {
        assigns.push(vvar);
      }
      fragments = this.joinFragmentArrays(assigns, ', ');
      if (o.level < LEVEL_LIST) {
        return fragments;
      } else {
        return this.wrapInBraces(fragments);
      }
    };

    Assign.prototype.compileConditional = function(o) {
      var fragments, left, ref3, right;
      ref3 = this.variable.cacheReference(o), left = ref3[0], right = ref3[1];
      if (!left.properties.length && left.base instanceof Literal && left.base.value !== "this" && !o.scope.check(left.base.value)) {
        this.variable.error("the variable \"" + left.base.value + "\" can't be assigned with " + this.context + " because it has not been declared before");
      }
      if (indexOf.call(this.context, "?") >= 0) {
        o.isExistentialEquals = true;
        return new If(new Existence(left), right, {
          type: 'if'
        }).addElse(new Assign(right, this.value, '=')).compileToFragments(o);
      } else {
        fragments = new Op(this.context.slice(0, -1), left, new Assign(right, this.value, '=')).compileToFragments(o);
        if (o.level <= LEVEL_LIST) {
          return fragments;
        } else {
          return this.wrapInBraces(fragments);
        }
      }
    };

    Assign.prototype.compileSpecialMath = function(o) {
      var left, ref3, right;
      ref3 = this.variable.cacheReference(o), left = ref3[0], right = ref3[1];
      return new Assign(left, new Op(this.context.slice(0, -1), right, this.value)).compileToFragments(o);
    };

    Assign.prototype.compileSplice = function(o) {
      var answer, exclusive, from, fromDecl, fromRef, name, ref3, ref4, ref5, to, valDef, valRef;
      ref3 = this.variable.properties.pop().range, from = ref3.from, to = ref3.to, exclusive = ref3.exclusive;
      name = this.variable.compile(o);
      if (from) {
        ref4 = this.cacheToCodeFragments(from.cache(o, LEVEL_OP)), fromDecl = ref4[0], fromRef = ref4[1];
      } else {
        fromDecl = fromRef = '0';
      }
      if (to) {
        if (from instanceof Value && from.isSimpleNumber() && to instanceof Value && to.isSimpleNumber()) {
          to = to.compile(o) - fromRef;
          if (!exclusive) {
            to += 1;
          }
        } else {
          to = to.compile(o, LEVEL_ACCESS) + ' - ' + fromRef;
          if (!exclusive) {
            to += ' + 1';
          }
        }
      } else {
        to = "9e9";
      }
      ref5 = this.value.cache(o, LEVEL_LIST), valDef = ref5[0], valRef = ref5[1];
      answer = [].concat(this.makeCode("[].splice.apply(" + name + ", [" + fromDecl + ", " + to + "].concat("), valDef, this.makeCode(")), "), valRef);
      if (o.level > LEVEL_TOP) {
        return this.wrapInBraces(answer);
      } else {
        return answer;
      }
    };

    return Assign;

  })(Base);

  exports.Code = Code = (function(superClass1) {
    extend1(Code, superClass1);

    function Code(params, body, tag) {
      this.params = params || [];
      this.body = body || new Block;
      this.bound = tag === 'boundfunc';
      this.isGenerator = !!this.body.contains(function(node) {
        return (node instanceof Op && node.isYield()) || node instanceof YieldReturn;
      });
    }

    Code.prototype.children = ['params', 'body'];

    Code.prototype.isStatement = function() {
      return !!this.ctor;
    };

    Code.prototype.jumps = NO;

    Code.prototype.makeScope = function(parentScope) {
      return new Scope(parentScope, this.body, this);
    };

    Code.prototype.compileNode = function(o) {
      var answer, boundfunc, code, exprs, i, j, k, l, len1, len2, len3, len4, len5, len6, lit, m, p, param, params, q, r, ref, ref3, ref4, ref5, ref6, ref7, ref8, splats, uniqs, val, wasEmpty, wrapper;
      if (this.bound && ((ref3 = o.scope.method) != null ? ref3.bound : void 0)) {
        this.context = o.scope.method.context;
      }
      if (this.bound && !this.context) {
        this.context = '_this';
        wrapper = new Code([new Param(new Literal(this.context))], new Block([this]));
        boundfunc = new Call(wrapper, [new Literal('this')]);
        boundfunc.updateLocationDataIfMissing(this.locationData);
        return boundfunc.compileNode(o);
      }
      o.scope = del(o, 'classScope') || this.makeScope(o.scope);
      o.scope.shared = del(o, 'sharedScope');
      o.indent += TAB;
      delete o.bare;
      delete o.isExistentialEquals;
      params = [];
      exprs = [];
      ref4 = this.params;
      for (j = 0, len1 = ref4.length; j < len1; j++) {
        param = ref4[j];
        if (!(param instanceof Expansion)) {
          o.scope.parameter(param.asReference(o));
        }
      }
      ref5 = this.params;
      for (k = 0, len2 = ref5.length; k < len2; k++) {
        param = ref5[k];
        if (!(param.splat || param instanceof Expansion)) {
          continue;
        }
        ref6 = this.params;
        for (l = 0, len3 = ref6.length; l < len3; l++) {
          p = ref6[l];
          if (!(p instanceof Expansion) && p.name.value) {
            o.scope.add(p.name.value, 'var', true);
          }
        }
        splats = new Assign(new Value(new Arr((function() {
          var len4, m, ref7, results;
          ref7 = this.params;
          results = [];
          for (m = 0, len4 = ref7.length; m < len4; m++) {
            p = ref7[m];
            results.push(p.asReference(o));
          }
          return results;
        }).call(this))), new Value(new Literal('arguments')));
        break;
      }
      ref7 = this.params;
      for (m = 0, len4 = ref7.length; m < len4; m++) {
        param = ref7[m];
        if (param.isComplex()) {
          val = ref = param.asReference(o);
          if (param.value) {
            val = new Op('?', ref, param.value);
          }
          exprs.push(new Assign(new Value(param.name), val, '=', {
            param: true
          }));
        } else {
          ref = param;
          if (param.value) {
            lit = new Literal(ref.name.value + ' == null');
            val = new Assign(new Value(param.name), param.value, '=');
            exprs.push(new If(lit, val));
          }
        }
        if (!splats) {
          params.push(ref);
        }
      }
      wasEmpty = this.body.isEmpty();
      if (splats) {
        exprs.unshift(splats);
      }
      if (exprs.length) {
        (ref8 = this.body.expressions).unshift.apply(ref8, exprs);
      }
      for (i = q = 0, len5 = params.length; q < len5; i = ++q) {
        p = params[i];
        params[i] = p.compileToFragments(o);
        o.scope.parameter(fragmentsToText(params[i]));
      }
      uniqs = [];
      this.eachParamName(function(name, node) {
        if (indexOf.call(uniqs, name) >= 0) {
          node.error("multiple parameters named " + name);
        }
        return uniqs.push(name);
      });
      if (!(wasEmpty || this.noReturn)) {
        this.body.makeReturn();
      }
      code = 'function';
      if (this.isGenerator) {
        code += '*';
      }
      if (this.ctor) {
        code += ' ' + this.name;
      }
      code += '(';
      answer = [this.makeCode(code)];
      for (i = r = 0, len6 = params.length; r < len6; i = ++r) {
        p = params[i];
        if (i) {
          answer.push(this.makeCode(", "));
        }
        answer.push.apply(answer, p);
      }
      answer.push(this.makeCode(') {'));
      if (!this.body.isEmpty()) {
        answer = answer.concat(this.makeCode("\n"), this.body.compileWithDeclarations(o), this.makeCode("\n" + this.tab));
      }
      answer.push(this.makeCode('}'));
      if (this.ctor) {
        return [this.makeCode(this.tab)].concat(slice.call(answer));
      }
      if (this.front || (o.level >= LEVEL_ACCESS)) {
        return this.wrapInBraces(answer);
      } else {
        return answer;
      }
    };

    Code.prototype.eachParamName = function(iterator) {
      var j, len1, param, ref3, results;
      ref3 = this.params;
      results = [];
      for (j = 0, len1 = ref3.length; j < len1; j++) {
        param = ref3[j];
        results.push(param.eachName(iterator));
      }
      return results;
    };

    Code.prototype.traverseChildren = function(crossScope, func) {
      if (crossScope) {
        return Code.__super__.traverseChildren.call(this, crossScope, func);
      }
    };

    return Code;

  })(Base);

  exports.Param = Param = (function(superClass1) {
    extend1(Param, superClass1);

    function Param(name1, value1, splat) {
      var name, ref3, token;
      this.name = name1;
      this.value = value1;
      this.splat = splat;
      if (ref3 = (name = this.name.unwrapAll().value), indexOf.call(STRICT_PROSCRIBED, ref3) >= 0) {
        this.name.error("parameter name \"" + name + "\" is not allowed");
      }
      if (this.name instanceof Obj && this.name.generated) {
        token = this.name.objects[0].operatorToken;
        token.error("unexpected " + token.value);
      }
    }

    Param.prototype.children = ['name', 'value'];

    Param.prototype.compileToFragments = function(o) {
      return this.name.compileToFragments(o, LEVEL_LIST);
    };

    Param.prototype.asReference = function(o) {
      var name, node;
      if (this.reference) {
        return this.reference;
      }
      node = this.name;
      if (node["this"]) {
        name = node.properties[0].name.value;
        if (name.reserved) {
          name = "_" + name;
        }
        node = new Literal(o.scope.freeVariable(name));
      } else if (node.isComplex()) {
        node = new Literal(o.scope.freeVariable('arg'));
      }
      node = new Value(node);
      if (this.splat) {
        node = new Splat(node);
      }
      node.updateLocationDataIfMissing(this.locationData);
      return this.reference = node;
    };

    Param.prototype.isComplex = function() {
      return this.name.isComplex();
    };

    Param.prototype.eachName = function(iterator, name) {
      var atParam, j, len1, node, obj, ref3;
      if (name == null) {
        name = this.name;
      }
      atParam = function(obj) {
        return iterator("@" + obj.properties[0].name.value, obj);
      };
      if (name instanceof Literal) {
        return iterator(name.value, name);
      }
      if (name instanceof Value) {
        return atParam(name);
      }
      ref3 = name.objects;
      for (j = 0, len1 = ref3.length; j < len1; j++) {
        obj = ref3[j];
        if (obj instanceof Assign && (obj.context == null)) {
          obj = obj.variable;
        }
        if (obj instanceof Assign) {
          this.eachName(iterator, obj.value.unwrap());
        } else if (obj instanceof Splat) {
          node = obj.name.unwrap();
          iterator(node.value, node);
        } else if (obj instanceof Value) {
          if (obj.isArray() || obj.isObject()) {
            this.eachName(iterator, obj.base);
          } else if (obj["this"]) {
            atParam(obj);
          } else {
            iterator(obj.base.value, obj.base);
          }
        } else if (!(obj instanceof Expansion)) {
          obj.error("illegal parameter " + (obj.compile()));
        }
      }
    };

    return Param;

  })(Base);

  exports.Splat = Splat = (function(superClass1) {
    extend1(Splat, superClass1);

    Splat.prototype.children = ['name'];

    Splat.prototype.isAssignable = YES;

    function Splat(name) {
      this.name = name.compile ? name : new Literal(name);
    }

    Splat.prototype.assigns = function(name) {
      return this.name.assigns(name);
    };

    Splat.prototype.compileToFragments = function(o) {
      return this.name.compileToFragments(o);
    };

    Splat.prototype.unwrap = function() {
      return this.name;
    };

    Splat.compileSplattedArray = function(o, list, apply) {
      var args, base, compiledNode, concatPart, fragments, i, index, j, last, len1, node;
      index = -1;
      while ((node = list[++index]) && !(node instanceof Splat)) {
        continue;
      }
      if (index >= list.length) {
        return [];
      }
      if (list.length === 1) {
        node = list[0];
        fragments = node.compileToFragments(o, LEVEL_LIST);
        if (apply) {
          return fragments;
        }
        return [].concat(node.makeCode((utility('slice', o)) + ".call("), fragments, node.makeCode(")"));
      }
      args = list.slice(index);
      for (i = j = 0, len1 = args.length; j < len1; i = ++j) {
        node = args[i];
        compiledNode = node.compileToFragments(o, LEVEL_LIST);
        args[i] = node instanceof Splat ? [].concat(node.makeCode((utility('slice', o)) + ".call("), compiledNode, node.makeCode(")")) : [].concat(node.makeCode("["), compiledNode, node.makeCode("]"));
      }
      if (index === 0) {
        node = list[0];
        concatPart = node.joinFragmentArrays(args.slice(1), ', ');
        return args[0].concat(node.makeCode(".concat("), concatPart, node.makeCode(")"));
      }
      base = (function() {
        var k, len2, ref3, results;
        ref3 = list.slice(0, index);
        results = [];
        for (k = 0, len2 = ref3.length; k < len2; k++) {
          node = ref3[k];
          results.push(node.compileToFragments(o, LEVEL_LIST));
        }
        return results;
      })();
      base = list[0].joinFragmentArrays(base, ', ');
      concatPart = list[index].joinFragmentArrays(args, ', ');
      last = list[list.length - 1];
      return [].concat(list[0].makeCode("["), base, list[index].makeCode("].concat("), concatPart, last.makeCode(")"));
    };

    return Splat;

  })(Base);

  exports.Expansion = Expansion = (function(superClass1) {
    extend1(Expansion, superClass1);

    function Expansion() {
      return Expansion.__super__.constructor.apply(this, arguments);
    }

    Expansion.prototype.isComplex = NO;

    Expansion.prototype.compileNode = function(o) {
      return this.error('Expansion must be used inside a destructuring assignment or parameter list');
    };

    Expansion.prototype.asReference = function(o) {
      return this;
    };

    Expansion.prototype.eachName = function(iterator) {};

    return Expansion;

  })(Base);

  exports.While = While = (function(superClass1) {
    extend1(While, superClass1);

    function While(condition, options) {
      this.condition = (options != null ? options.invert : void 0) ? condition.invert() : condition;
      this.guard = options != null ? options.guard : void 0;
    }

    While.prototype.children = ['condition', 'guard', 'body'];

    While.prototype.isStatement = YES;

    While.prototype.makeReturn = function(res) {
      if (res) {
        return While.__super__.makeReturn.apply(this, arguments);
      } else {
        this.returns = !this.jumps({
          loop: true
        });
        return this;
      }
    };

    While.prototype.addBody = function(body1) {
      this.body = body1;
      return this;
    };

    While.prototype.jumps = function() {
      var expressions, j, jumpNode, len1, node;
      expressions = this.body.expressions;
      if (!expressions.length) {
        return false;
      }
      for (j = 0, len1 = expressions.length; j < len1; j++) {
        node = expressions[j];
        if (jumpNode = node.jumps({
          loop: true
        })) {
          return jumpNode;
        }
      }
      return false;
    };

    While.prototype.compileNode = function(o) {
      var answer, body, rvar, set;
      o.indent += TAB;
      set = '';
      body = this.body;
      if (body.isEmpty()) {
        body = this.makeCode('');
      } else {
        if (this.returns) {
          body.makeReturn(rvar = o.scope.freeVariable('results'));
          set = "" + this.tab + rvar + " = [];\n";
        }
        if (this.guard) {
          if (body.expressions.length > 1) {
            body.expressions.unshift(new If((new Parens(this.guard)).invert(), new Literal("continue")));
          } else {
            if (this.guard) {
              body = Block.wrap([new If(this.guard, body)]);
            }
          }
        }
        body = [].concat(this.makeCode("\n"), body.compileToFragments(o, LEVEL_TOP), this.makeCode("\n" + this.tab));
      }
      answer = [].concat(this.makeCode(set + this.tab + "while ("), this.condition.compileToFragments(o, LEVEL_PAREN), this.makeCode(") {"), body, this.makeCode("}"));
      if (this.returns) {
        answer.push(this.makeCode("\n" + this.tab + "return " + rvar + ";"));
      }
      return answer;
    };

    return While;

  })(Base);

  exports.Op = Op = (function(superClass1) {
    var CONVERSIONS, INVERSIONS;

    extend1(Op, superClass1);

    function Op(op, first, second, flip) {
      if (op === 'in') {
        return new In(first, second);
      }
      if (op === 'do') {
        return this.generateDo(first);
      }
      if (op === 'new') {
        if (first instanceof Call && !first["do"] && !first.isNew) {
          return first.newInstance();
        }
        if (first instanceof Code && first.bound || first["do"]) {
          first = new Parens(first);
        }
      }
      this.operator = CONVERSIONS[op] || op;
      this.first = first;
      this.second = second;
      this.flip = !!flip;
      return this;
    }

    CONVERSIONS = {
      '==': '===',
      '!=': '!==',
      'of': 'in',
      'yieldfrom': 'yield*'
    };

    INVERSIONS = {
      '!==': '===',
      '===': '!=='
    };

    Op.prototype.children = ['first', 'second'];

    Op.prototype.isSimpleNumber = NO;

    Op.prototype.isYield = function() {
      var ref3;
      return (ref3 = this.operator) === 'yield' || ref3 === 'yield*';
    };

    Op.prototype.isUnary = function() {
      return !this.second;
    };

    Op.prototype.isComplex = function() {
      var ref3;
      return !(this.isUnary() && ((ref3 = this.operator) === '+' || ref3 === '-') && this.first instanceof Value && this.first.isSimpleNumber());
    };

    Op.prototype.isChainable = function() {
      var ref3;
      return (ref3 = this.operator) === '<' || ref3 === '>' || ref3 === '>=' || ref3 === '<=' || ref3 === '===' || ref3 === '!==';
    };

    Op.prototype.invert = function() {
      var allInvertable, curr, fst, op, ref3;
      if (this.isChainable() && this.first.isChainable()) {
        allInvertable = true;
        curr = this;
        while (curr && curr.operator) {
          allInvertable && (allInvertable = curr.operator in INVERSIONS);
          curr = curr.first;
        }
        if (!allInvertable) {
          return new Parens(this).invert();
        }
        curr = this;
        while (curr && curr.operator) {
          curr.invert = !curr.invert;
          curr.operator = INVERSIONS[curr.operator];
          curr = curr.first;
        }
        return this;
      } else if (op = INVERSIONS[this.operator]) {
        this.operator = op;
        if (this.first.unwrap() instanceof Op) {
          this.first.invert();
        }
        return this;
      } else if (this.second) {
        return new Parens(this).invert();
      } else if (this.operator === '!' && (fst = this.first.unwrap()) instanceof Op && ((ref3 = fst.operator) === '!' || ref3 === 'in' || ref3 === 'instanceof')) {
        return fst;
      } else {
        return new Op('!', this);
      }
    };

    Op.prototype.unfoldSoak = function(o) {
      var ref3;
      return ((ref3 = this.operator) === '++' || ref3 === '--' || ref3 === 'delete') && unfoldSoak(o, this, 'first');
    };

    Op.prototype.generateDo = function(exp) {
      var call, func, j, len1, param, passedParams, ref, ref3;
      passedParams = [];
      func = exp instanceof Assign && (ref = exp.value.unwrap()) instanceof Code ? ref : exp;
      ref3 = func.params || [];
      for (j = 0, len1 = ref3.length; j < len1; j++) {
        param = ref3[j];
        if (param.value) {
          passedParams.push(param.value);
          delete param.value;
        } else {
          passedParams.push(param);
        }
      }
      call = new Call(exp, passedParams);
      call["do"] = true;
      return call;
    };

    Op.prototype.compileNode = function(o) {
      var answer, isChain, lhs, ref3, ref4, rhs;
      isChain = this.isChainable() && this.first.isChainable();
      if (!isChain) {
        this.first.front = this.front;
      }
      if (this.operator === 'delete' && o.scope.check(this.first.unwrapAll().value)) {
        this.error('delete operand may not be argument or var');
      }
      if (((ref3 = this.operator) === '--' || ref3 === '++') && (ref4 = this.first.unwrapAll().value, indexOf.call(STRICT_PROSCRIBED, ref4) >= 0)) {
        this.error("cannot increment/decrement \"" + (this.first.unwrapAll().value) + "\"");
      }
      if (this.isYield()) {
        return this.compileYield(o);
      }
      if (this.isUnary()) {
        return this.compileUnary(o);
      }
      if (isChain) {
        return this.compileChain(o);
      }
      switch (this.operator) {
        case '?':
          return this.compileExistence(o);
        case '**':
          return this.compilePower(o);
        case '//':
          return this.compileFloorDivision(o);
        case '%%':
          return this.compileModulo(o);
        default:
          lhs = this.first.compileToFragments(o, LEVEL_OP);
          rhs = this.second.compileToFragments(o, LEVEL_OP);
          answer = [].concat(lhs, this.makeCode(" " + this.operator + " "), rhs);
          if (o.level <= LEVEL_OP) {
            return answer;
          } else {
            return this.wrapInBraces(answer);
          }
      }
    };

    Op.prototype.compileChain = function(o) {
      var fragments, fst, ref3, shared;
      ref3 = this.first.second.cache(o), this.first.second = ref3[0], shared = ref3[1];
      fst = this.first.compileToFragments(o, LEVEL_OP);
      fragments = fst.concat(this.makeCode(" " + (this.invert ? '&&' : '||') + " "), shared.compileToFragments(o), this.makeCode(" " + this.operator + " "), this.second.compileToFragments(o, LEVEL_OP));
      return this.wrapInBraces(fragments);
    };

    Op.prototype.compileExistence = function(o) {
      var fst, ref;
      if (this.first.isComplex()) {
        ref = new Literal(o.scope.freeVariable('ref'));
        fst = new Parens(new Assign(ref, this.first));
      } else {
        fst = this.first;
        ref = fst;
      }
      return new If(new Existence(fst), ref, {
        type: 'if'
      }).addElse(this.second).compileToFragments(o);
    };

    Op.prototype.compileUnary = function(o) {
      var op, parts, plusMinus;
      parts = [];
      op = this.operator;
      parts.push([this.makeCode(op)]);
      if (op === '!' && this.first instanceof Existence) {
        this.first.negated = !this.first.negated;
        return this.first.compileToFragments(o);
      }
      if (o.level >= LEVEL_ACCESS) {
        return (new Parens(this)).compileToFragments(o);
      }
      plusMinus = op === '+' || op === '-';
      if ((op === 'new' || op === 'typeof' || op === 'delete') || plusMinus && this.first instanceof Op && this.first.operator === op) {
        parts.push([this.makeCode(' ')]);
      }
      if ((plusMinus && this.first instanceof Op) || (op === 'new' && this.first.isStatement(o))) {
        this.first = new Parens(this.first);
      }
      parts.push(this.first.compileToFragments(o, LEVEL_OP));
      if (this.flip) {
        parts.reverse();
      }
      return this.joinFragmentArrays(parts, '');
    };

    Op.prototype.compileYield = function(o) {
      var op, parts, ref3;
      parts = [];
      op = this.operator;
      if (o.scope.parent == null) {
        this.error('yield can only occur inside functions');
      }
      if (indexOf.call(Object.keys(this.first), 'expression') >= 0 && !(this.first instanceof Throw)) {
        if (this.first.expression != null) {
          parts.push(this.first.expression.compileToFragments(o, LEVEL_OP));
        }
      } else {
        if (o.level >= LEVEL_PAREN) {
          parts.push([this.makeCode("(")]);
        }
        parts.push([this.makeCode(op)]);
        if (((ref3 = this.first.base) != null ? ref3.value : void 0) !== '') {
          parts.push([this.makeCode(" ")]);
        }
        parts.push(this.first.compileToFragments(o, LEVEL_OP));
        if (o.level >= LEVEL_PAREN) {
          parts.push([this.makeCode(")")]);
        }
      }
      return this.joinFragmentArrays(parts, '');
    };

    Op.prototype.compilePower = function(o) {
      var pow;
      pow = new Value(new Literal('Math'), [new Access(new Literal('pow'))]);
      return new Call(pow, [this.first, this.second]).compileToFragments(o);
    };

    Op.prototype.compileFloorDivision = function(o) {
      var div, floor;
      floor = new Value(new Literal('Math'), [new Access(new Literal('floor'))]);
      div = new Op('/', this.first, this.second);
      return new Call(floor, [div]).compileToFragments(o);
    };

    Op.prototype.compileModulo = function(o) {
      var mod;
      mod = new Value(new Literal(utility('modulo', o)));
      return new Call(mod, [this.first, this.second]).compileToFragments(o);
    };

    Op.prototype.toString = function(idt) {
      return Op.__super__.toString.call(this, idt, this.constructor.name + ' ' + this.operator);
    };

    return Op;

  })(Base);

  exports.In = In = (function(superClass1) {
    extend1(In, superClass1);

    function In(object, array) {
      this.object = object;
      this.array = array;
    }

    In.prototype.children = ['object', 'array'];

    In.prototype.invert = NEGATE;

    In.prototype.compileNode = function(o) {
      var hasSplat, j, len1, obj, ref3;
      if (this.array instanceof Value && this.array.isArray() && this.array.base.objects.length) {
        ref3 = this.array.base.objects;
        for (j = 0, len1 = ref3.length; j < len1; j++) {
          obj = ref3[j];
          if (!(obj instanceof Splat)) {
            continue;
          }
          hasSplat = true;
          break;
        }
        if (!hasSplat) {
          return this.compileOrTest(o);
        }
      }
      return this.compileLoopTest(o);
    };

    In.prototype.compileOrTest = function(o) {
      var cmp, cnj, i, item, j, len1, ref, ref3, ref4, ref5, sub, tests;
      ref3 = this.object.cache(o, LEVEL_OP), sub = ref3[0], ref = ref3[1];
      ref4 = this.negated ? [' !== ', ' && '] : [' === ', ' || '], cmp = ref4[0], cnj = ref4[1];
      tests = [];
      ref5 = this.array.base.objects;
      for (i = j = 0, len1 = ref5.length; j < len1; i = ++j) {
        item = ref5[i];
        if (i) {
          tests.push(this.makeCode(cnj));
        }
        tests = tests.concat((i ? ref : sub), this.makeCode(cmp), item.compileToFragments(o, LEVEL_ACCESS));
      }
      if (o.level < LEVEL_OP) {
        return tests;
      } else {
        return this.wrapInBraces(tests);
      }
    };

    In.prototype.compileLoopTest = function(o) {
      var fragments, ref, ref3, sub;
      ref3 = this.object.cache(o, LEVEL_LIST), sub = ref3[0], ref = ref3[1];
      fragments = [].concat(this.makeCode(utility('indexOf', o) + ".call("), this.array.compileToFragments(o, LEVEL_LIST), this.makeCode(", "), ref, this.makeCode(") " + (this.negated ? '< 0' : '>= 0')));
      if (fragmentsToText(sub) === fragmentsToText(ref)) {
        return fragments;
      }
      fragments = sub.concat(this.makeCode(', '), fragments);
      if (o.level < LEVEL_LIST) {
        return fragments;
      } else {
        return this.wrapInBraces(fragments);
      }
    };

    In.prototype.toString = function(idt) {
      return In.__super__.toString.call(this, idt, this.constructor.name + (this.negated ? '!' : ''));
    };

    return In;

  })(Base);

  exports.Try = Try = (function(superClass1) {
    extend1(Try, superClass1);

    function Try(attempt, errorVariable, recovery, ensure) {
      this.attempt = attempt;
      this.errorVariable = errorVariable;
      this.recovery = recovery;
      this.ensure = ensure;
    }

    Try.prototype.children = ['attempt', 'recovery', 'ensure'];

    Try.prototype.isStatement = YES;

    Try.prototype.jumps = function(o) {
      var ref3;
      return this.attempt.jumps(o) || ((ref3 = this.recovery) != null ? ref3.jumps(o) : void 0);
    };

    Try.prototype.makeReturn = function(res) {
      if (this.attempt) {
        this.attempt = this.attempt.makeReturn(res);
      }
      if (this.recovery) {
        this.recovery = this.recovery.makeReturn(res);
      }
      return this;
    };

    Try.prototype.compileNode = function(o) {
      var catchPart, ensurePart, generatedErrorVariableName, placeholder, tryPart;
      o.indent += TAB;
      tryPart = this.attempt.compileToFragments(o, LEVEL_TOP);
      catchPart = this.recovery ? (generatedErrorVariableName = o.scope.freeVariable('error', {
        reserve: false
      }), placeholder = new Literal(generatedErrorVariableName), this.errorVariable ? this.recovery.unshift(new Assign(this.errorVariable, placeholder)) : void 0, [].concat(this.makeCode(" catch ("), placeholder.compileToFragments(o), this.makeCode(") {\n"), this.recovery.compileToFragments(o, LEVEL_TOP), this.makeCode("\n" + this.tab + "}"))) : !(this.ensure || this.recovery) ? [this.makeCode(" catch (" + generatedErrorVariableName + ") {}")] : [];
      ensurePart = this.ensure ? [].concat(this.makeCode(" finally {\n"), this.ensure.compileToFragments(o, LEVEL_TOP), this.makeCode("\n" + this.tab + "}")) : [];
      return [].concat(this.makeCode(this.tab + "try {\n"), tryPart, this.makeCode("\n" + this.tab + "}"), catchPart, ensurePart);
    };

    return Try;

  })(Base);

  exports.Throw = Throw = (function(superClass1) {
    extend1(Throw, superClass1);

    function Throw(expression) {
      this.expression = expression;
    }

    Throw.prototype.children = ['expression'];

    Throw.prototype.isStatement = YES;

    Throw.prototype.jumps = NO;

    Throw.prototype.makeReturn = THIS;

    Throw.prototype.compileNode = function(o) {
      return [].concat(this.makeCode(this.tab + "throw "), this.expression.compileToFragments(o), this.makeCode(";"));
    };

    return Throw;

  })(Base);

  exports.Existence = Existence = (function(superClass1) {
    extend1(Existence, superClass1);

    function Existence(expression) {
      this.expression = expression;
    }

    Existence.prototype.children = ['expression'];

    Existence.prototype.invert = NEGATE;

    Existence.prototype.compileNode = function(o) {
      var cmp, cnj, code, ref3;
      this.expression.front = this.front;
      code = this.expression.compile(o, LEVEL_OP);
      if (IDENTIFIER.test(code) && !o.scope.check(code)) {
        ref3 = this.negated ? ['===', '||'] : ['!==', '&&'], cmp = ref3[0], cnj = ref3[1];
        code = "typeof " + code + " " + cmp + " \"undefined\" " + cnj + " " + code + " " + cmp + " null";
      } else {
        code = code + " " + (this.negated ? '==' : '!=') + " null";
      }
      return [this.makeCode(o.level <= LEVEL_COND ? code : "(" + code + ")")];
    };

    return Existence;

  })(Base);

  exports.Parens = Parens = (function(superClass1) {
    extend1(Parens, superClass1);

    function Parens(body1) {
      this.body = body1;
    }

    Parens.prototype.children = ['body'];

    Parens.prototype.unwrap = function() {
      return this.body;
    };

    Parens.prototype.isComplex = function() {
      return this.body.isComplex();
    };

    Parens.prototype.compileNode = function(o) {
      var bare, expr, fragments;
      expr = this.body.unwrap();
      if (expr instanceof Value && expr.isAtomic()) {
        expr.front = this.front;
        return expr.compileToFragments(o);
      }
      fragments = expr.compileToFragments(o, LEVEL_PAREN);
      bare = o.level < LEVEL_OP && (expr instanceof Op || expr instanceof Call || (expr instanceof For && expr.returns));
      if (bare) {
        return fragments;
      } else {
        return this.wrapInBraces(fragments);
      }
    };

    return Parens;

  })(Base);

  exports.For = For = (function(superClass1) {
    extend1(For, superClass1);

    function For(body, source) {
      var ref3;
      this.source = source.source, this.guard = source.guard, this.step = source.step, this.name = source.name, this.index = source.index;
      this.body = Block.wrap([body]);
      this.own = !!source.own;
      this.object = !!source.object;
      if (this.object) {
        ref3 = [this.index, this.name], this.name = ref3[0], this.index = ref3[1];
      }
      if (this.index instanceof Value) {
        this.index.error('index cannot be a pattern matching expression');
      }
      this.range = this.source instanceof Value && this.source.base instanceof Range && !this.source.properties.length;
      this.pattern = this.name instanceof Value;
      if (this.range && this.index) {
        this.index.error('indexes do not apply to range loops');
      }
      if (this.range && this.pattern) {
        this.name.error('cannot pattern match over range loops');
      }
      if (this.own && !this.object) {
        this.name.error('cannot use own with for-in');
      }
      this.returns = false;
    }

    For.prototype.children = ['body', 'source', 'guard', 'step'];

    For.prototype.compileNode = function(o) {
      var body, bodyFragments, compare, compareDown, declare, declareDown, defPart, defPartFragments, down, forPartFragments, guardPart, idt1, increment, index, ivar, kvar, kvarAssign, last, lvar, name, namePart, ref, ref3, ref4, resultPart, returnResult, rvar, scope, source, step, stepNum, stepVar, svar, varPart;
      body = Block.wrap([this.body]);
      ref3 = body.expressions, last = ref3[ref3.length - 1];
      if ((last != null ? last.jumps() : void 0) instanceof Return) {
        this.returns = false;
      }
      source = this.range ? this.source.base : this.source;
      scope = o.scope;
      if (!this.pattern) {
        name = this.name && (this.name.compile(o, LEVEL_LIST));
      }
      index = this.index && (this.index.compile(o, LEVEL_LIST));
      if (name && !this.pattern) {
        scope.find(name);
      }
      if (index) {
        scope.find(index);
      }
      if (this.returns) {
        rvar = scope.freeVariable('results');
      }
      ivar = (this.object && index) || scope.freeVariable('i', {
        single: true
      });
      kvar = (this.range && name) || index || ivar;
      kvarAssign = kvar !== ivar ? kvar + " = " : "";
      if (this.step && !this.range) {
        ref4 = this.cacheToCodeFragments(this.step.cache(o, LEVEL_LIST, isComplexOrAssignable)), step = ref4[0], stepVar = ref4[1];
        stepNum = stepVar.match(NUMBER);
      }
      if (this.pattern) {
        name = ivar;
      }
      varPart = '';
      guardPart = '';
      defPart = '';
      idt1 = this.tab + TAB;
      if (this.range) {
        forPartFragments = source.compileToFragments(merge(o, {
          index: ivar,
          name: name,
          step: this.step,
          isComplex: isComplexOrAssignable
        }));
      } else {
        svar = this.source.compile(o, LEVEL_LIST);
        if ((name || this.own) && !IDENTIFIER.test(svar)) {
          defPart += "" + this.tab + (ref = scope.freeVariable('ref')) + " = " + svar + ";\n";
          svar = ref;
        }
        if (name && !this.pattern) {
          namePart = name + " = " + svar + "[" + kvar + "]";
        }
        if (!this.object) {
          if (step !== stepVar) {
            defPart += "" + this.tab + step + ";\n";
          }
          if (!(this.step && stepNum && (down = parseNum(stepNum[0]) < 0))) {
            lvar = scope.freeVariable('len');
          }
          declare = "" + kvarAssign + ivar + " = 0, " + lvar + " = " + svar + ".length";
          declareDown = "" + kvarAssign + ivar + " = " + svar + ".length - 1";
          compare = ivar + " < " + lvar;
          compareDown = ivar + " >= 0";
          if (this.step) {
            if (stepNum) {
              if (down) {
                compare = compareDown;
                declare = declareDown;
              }
            } else {
              compare = stepVar + " > 0 ? " + compare + " : " + compareDown;
              declare = "(" + stepVar + " > 0 ? (" + declare + ") : " + declareDown + ")";
            }
            increment = ivar + " += " + stepVar;
          } else {
            increment = "" + (kvar !== ivar ? "++" + ivar : ivar + "++");
          }
          forPartFragments = [this.makeCode(declare + "; " + compare + "; " + kvarAssign + increment)];
        }
      }
      if (this.returns) {
        resultPart = "" + this.tab + rvar + " = [];\n";
        returnResult = "\n" + this.tab + "return " + rvar + ";";
        body.makeReturn(rvar);
      }
      if (this.guard) {
        if (body.expressions.length > 1) {
          body.expressions.unshift(new If((new Parens(this.guard)).invert(), new Literal("continue")));
        } else {
          if (this.guard) {
            body = Block.wrap([new If(this.guard, body)]);
          }
        }
      }
      if (this.pattern) {
        body.expressions.unshift(new Assign(this.name, new Literal(svar + "[" + kvar + "]")));
      }
      defPartFragments = [].concat(this.makeCode(defPart), this.pluckDirectCall(o, body));
      if (namePart) {
        varPart = "\n" + idt1 + namePart + ";";
      }
      if (this.object) {
        forPartFragments = [this.makeCode(kvar + " in " + svar)];
        if (this.own) {
          guardPart = "\n" + idt1 + "if (!" + (utility('hasProp', o)) + ".call(" + svar + ", " + kvar + ")) continue;";
        }
      }
      bodyFragments = body.compileToFragments(merge(o, {
        indent: idt1
      }), LEVEL_TOP);
      if (bodyFragments && (bodyFragments.length > 0)) {
        bodyFragments = [].concat(this.makeCode("\n"), bodyFragments, this.makeCode("\n"));
      }
      return [].concat(defPartFragments, this.makeCode("" + (resultPart || '') + this.tab + "for ("), forPartFragments, this.makeCode(") {" + guardPart + varPart), bodyFragments, this.makeCode(this.tab + "}" + (returnResult || '')));
    };

    For.prototype.pluckDirectCall = function(o, body) {
      var base, defs, expr, fn, idx, j, len1, ref, ref3, ref4, ref5, ref6, ref7, ref8, ref9, val;
      defs = [];
      ref3 = body.expressions;
      for (idx = j = 0, len1 = ref3.length; j < len1; idx = ++j) {
        expr = ref3[idx];
        expr = expr.unwrapAll();
        if (!(expr instanceof Call)) {
          continue;
        }
        val = (ref4 = expr.variable) != null ? ref4.unwrapAll() : void 0;
        if (!((val instanceof Code) || (val instanceof Value && ((ref5 = val.base) != null ? ref5.unwrapAll() : void 0) instanceof Code && val.properties.length === 1 && ((ref6 = (ref7 = val.properties[0].name) != null ? ref7.value : void 0) === 'call' || ref6 === 'apply')))) {
          continue;
        }
        fn = ((ref8 = val.base) != null ? ref8.unwrapAll() : void 0) || val;
        ref = new Literal(o.scope.freeVariable('fn'));
        base = new Value(ref);
        if (val.base) {
          ref9 = [base, val], val.base = ref9[0], base = ref9[1];
        }
        body.expressions[idx] = new Call(base, expr.args);
        defs = defs.concat(this.makeCode(this.tab), new Assign(ref, fn).compileToFragments(o, LEVEL_TOP), this.makeCode(';\n'));
      }
      return defs;
    };

    return For;

  })(While);

  exports.Switch = Switch = (function(superClass1) {
    extend1(Switch, superClass1);

    function Switch(subject, cases, otherwise) {
      this.subject = subject;
      this.cases = cases;
      this.otherwise = otherwise;
    }

    Switch.prototype.children = ['subject', 'cases', 'otherwise'];

    Switch.prototype.isStatement = YES;

    Switch.prototype.jumps = function(o) {
      var block, conds, j, jumpNode, len1, ref3, ref4, ref5;
      if (o == null) {
        o = {
          block: true
        };
      }
      ref3 = this.cases;
      for (j = 0, len1 = ref3.length; j < len1; j++) {
        ref4 = ref3[j], conds = ref4[0], block = ref4[1];
        if (jumpNode = block.jumps(o)) {
          return jumpNode;
        }
      }
      return (ref5 = this.otherwise) != null ? ref5.jumps(o) : void 0;
    };

    Switch.prototype.makeReturn = function(res) {
      var j, len1, pair, ref3, ref4;
      ref3 = this.cases;
      for (j = 0, len1 = ref3.length; j < len1; j++) {
        pair = ref3[j];
        pair[1].makeReturn(res);
      }
      if (res) {
        this.otherwise || (this.otherwise = new Block([new Literal('void 0')]));
      }
      if ((ref4 = this.otherwise) != null) {
        ref4.makeReturn(res);
      }
      return this;
    };

    Switch.prototype.compileNode = function(o) {
      var block, body, cond, conditions, expr, fragments, i, idt1, idt2, j, k, len1, len2, ref3, ref4, ref5;
      idt1 = o.indent + TAB;
      idt2 = o.indent = idt1 + TAB;
      fragments = [].concat(this.makeCode(this.tab + "switch ("), (this.subject ? this.subject.compileToFragments(o, LEVEL_PAREN) : this.makeCode("false")), this.makeCode(") {\n"));
      ref3 = this.cases;
      for (i = j = 0, len1 = ref3.length; j < len1; i = ++j) {
        ref4 = ref3[i], conditions = ref4[0], block = ref4[1];
        ref5 = flatten([conditions]);
        for (k = 0, len2 = ref5.length; k < len2; k++) {
          cond = ref5[k];
          if (!this.subject) {
            cond = cond.invert();
          }
          fragments = fragments.concat(this.makeCode(idt1 + "case "), cond.compileToFragments(o, LEVEL_PAREN), this.makeCode(":\n"));
        }
        if ((body = block.compileToFragments(o, LEVEL_TOP)).length > 0) {
          fragments = fragments.concat(body, this.makeCode('\n'));
        }
        if (i === this.cases.length - 1 && !this.otherwise) {
          break;
        }
        expr = this.lastNonComment(block.expressions);
        if (expr instanceof Return || (expr instanceof Literal && expr.jumps() && expr.value !== 'debugger')) {
          continue;
        }
        fragments.push(cond.makeCode(idt2 + 'break;\n'));
      }
      if (this.otherwise && this.otherwise.expressions.length) {
        fragments.push.apply(fragments, [this.makeCode(idt1 + "default:\n")].concat(slice.call(this.otherwise.compileToFragments(o, LEVEL_TOP)), [this.makeCode("\n")]));
      }
      fragments.push(this.makeCode(this.tab + '}'));
      return fragments;
    };

    return Switch;

  })(Base);

  exports.If = If = (function(superClass1) {
    extend1(If, superClass1);

    function If(condition, body1, options) {
      this.body = body1;
      if (options == null) {
        options = {};
      }
      this.condition = options.type === 'unless' ? condition.invert() : condition;
      this.elseBody = null;
      this.isChain = false;
      this.soak = options.soak;
    }

    If.prototype.children = ['condition', 'body', 'elseBody'];

    If.prototype.bodyNode = function() {
      var ref3;
      return (ref3 = this.body) != null ? ref3.unwrap() : void 0;
    };

    If.prototype.elseBodyNode = function() {
      var ref3;
      return (ref3 = this.elseBody) != null ? ref3.unwrap() : void 0;
    };

    If.prototype.addElse = function(elseBody) {
      if (this.isChain) {
        this.elseBodyNode().addElse(elseBody);
      } else {
        this.isChain = elseBody instanceof If;
        this.elseBody = this.ensureBlock(elseBody);
        this.elseBody.updateLocationDataIfMissing(elseBody.locationData);
      }
      return this;
    };

    If.prototype.isStatement = function(o) {
      var ref3;
      return (o != null ? o.level : void 0) === LEVEL_TOP || this.bodyNode().isStatement(o) || ((ref3 = this.elseBodyNode()) != null ? ref3.isStatement(o) : void 0);
    };

    If.prototype.jumps = function(o) {
      var ref3;
      return this.body.jumps(o) || ((ref3 = this.elseBody) != null ? ref3.jumps(o) : void 0);
    };

    If.prototype.compileNode = function(o) {
      if (this.isStatement(o)) {
        return this.compileStatement(o);
      } else {
        return this.compileExpression(o);
      }
    };

    If.prototype.makeReturn = function(res) {
      if (res) {
        this.elseBody || (this.elseBody = new Block([new Literal('void 0')]));
      }
      this.body && (this.body = new Block([this.body.makeReturn(res)]));
      this.elseBody && (this.elseBody = new Block([this.elseBody.makeReturn(res)]));
      return this;
    };

    If.prototype.ensureBlock = function(node) {
      if (node instanceof Block) {
        return node;
      } else {
        return new Block([node]);
      }
    };

    If.prototype.compileStatement = function(o) {
      var answer, body, child, cond, exeq, ifPart, indent;
      child = del(o, 'chainChild');
      exeq = del(o, 'isExistentialEquals');
      if (exeq) {
        return new If(this.condition.invert(), this.elseBodyNode(), {
          type: 'if'
        }).compileToFragments(o);
      }
      indent = o.indent + TAB;
      cond = this.condition.compileToFragments(o, LEVEL_PAREN);
      body = this.ensureBlock(this.body).compileToFragments(merge(o, {
        indent: indent
      }));
      ifPart = [].concat(this.makeCode("if ("), cond, this.makeCode(") {\n"), body, this.makeCode("\n" + this.tab + "}"));
      if (!child) {
        ifPart.unshift(this.makeCode(this.tab));
      }
      if (!this.elseBody) {
        return ifPart;
      }
      answer = ifPart.concat(this.makeCode(' else '));
      if (this.isChain) {
        o.chainChild = true;
        answer = answer.concat(this.elseBody.unwrap().compileToFragments(o, LEVEL_TOP));
      } else {
        answer = answer.concat(this.makeCode("{\n"), this.elseBody.compileToFragments(merge(o, {
          indent: indent
        }), LEVEL_TOP), this.makeCode("\n" + this.tab + "}"));
      }
      return answer;
    };

    If.prototype.compileExpression = function(o) {
      var alt, body, cond, fragments;
      cond = this.condition.compileToFragments(o, LEVEL_COND);
      body = this.bodyNode().compileToFragments(o, LEVEL_LIST);
      alt = this.elseBodyNode() ? this.elseBodyNode().compileToFragments(o, LEVEL_LIST) : [this.makeCode('void 0')];
      fragments = cond.concat(this.makeCode(" ? "), body, this.makeCode(" : "), alt);
      if (o.level >= LEVEL_COND) {
        return this.wrapInBraces(fragments);
      } else {
        return fragments;
      }
    };

    If.prototype.unfoldSoak = function() {
      return this.soak && this;
    };

    return If;

  })(Base);

  UTILITIES = {
    extend: function(o) {
      return "function(child, parent) { for (var key in parent) { if (" + (utility('hasProp', o)) + ".call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }";
    },
    bind: function() {
      return 'function(fn, me){ return function(){ return fn.apply(me, arguments); }; }';
    },
    indexOf: function() {
      return "[].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; }";
    },
    modulo: function() {
      return "function(a, b) { return (+a % (b = +b) + b) % b; }";
    },
    hasProp: function() {
      return '{}.hasOwnProperty';
    },
    slice: function() {
      return '[].slice';
    }
  };

  LEVEL_TOP = 1;

  LEVEL_PAREN = 2;

  LEVEL_LIST = 3;

  LEVEL_COND = 4;

  LEVEL_OP = 5;

  LEVEL_ACCESS = 6;

  TAB = '  ';

  IDENTIFIER = /^(?!\d)[$\w\x7f-\uffff]+$/;

  SIMPLENUM = /^[+-]?\d+$/;

  HEXNUM = /^[+-]?0x[\da-f]+/i;

  NUMBER = /^[+-]?(?:0x[\da-f]+|\d*\.?\d+(?:e[+-]?\d+)?)$/i;

  IS_STRING = /^['"]/;

  IS_REGEX = /^\//;

  utility = function(name, o) {
    var ref, root;
    root = o.scope.root;
    if (name in root.utilities) {
      return root.utilities[name];
    } else {
      ref = root.freeVariable(name);
      root.assign(ref, UTILITIES[name](o));
      return root.utilities[name] = ref;
    }
  };

  multident = function(code, tab) {
    code = code.replace(/\n/g, '$&' + tab);
    return code.replace(/\s+$/, '');
  };

  parseNum = function(x) {
    if (x == null) {
      return 0;
    } else if (x.match(HEXNUM)) {
      return parseInt(x, 16);
    } else {
      return parseFloat(x);
    }
  };

  isLiteralArguments = function(node) {
    return node instanceof Literal && node.value === 'arguments' && !node.asKey;
  };

  isLiteralThis = function(node) {
    return (node instanceof Literal && node.value === 'this' && !node.asKey) || (node instanceof Code && node.bound) || (node instanceof Call && node.isSuper);
  };

  isComplexOrAssignable = function(node) {
    return node.isComplex() || (typeof node.isAssignable === "function" ? node.isAssignable() : void 0);
  };

  unfoldSoak = function(o, parent, name) {
    var ifn;
    if (!(ifn = parent[name].unfoldSoak(o))) {
      return;
    }
    parent[name] = ifn.body;
    ifn.body = new Value(parent);
    return ifn;
  };

}).call(this);

  return module.exports;
})();require['./sourcemap'] = (function() {
  var exports = {}, module = {exports: exports};
  // Generated by CoffeeScript 1.10.0
(function() {
  var LineMap, SourceMap;

  LineMap = (function() {
    function LineMap(line1) {
      this.line = line1;
      this.columns = [];
    }

    LineMap.prototype.add = function(column, arg, options) {
      var sourceColumn, sourceLine;
      sourceLine = arg[0], sourceColumn = arg[1];
      if (options == null) {
        options = {};
      }
      if (this.columns[column] && options.noReplace) {
        return;
      }
      return this.columns[column] = {
        line: this.line,
        column: column,
        sourceLine: sourceLine,
        sourceColumn: sourceColumn
      };
    };

    LineMap.prototype.sourceLocation = function(column) {
      var mapping;
      while (!((mapping = this.columns[column]) || (column <= 0))) {
        column--;
      }
      return mapping && [mapping.sourceLine, mapping.sourceColumn];
    };

    return LineMap;

  })();

  SourceMap = (function() {
    var BASE64_CHARS, VLQ_CONTINUATION_BIT, VLQ_SHIFT, VLQ_VALUE_MASK;

    function SourceMap() {
      this.lines = [];
    }

    SourceMap.prototype.add = function(sourceLocation, generatedLocation, options) {
      var base, column, line, lineMap;
      if (options == null) {
        options = {};
      }
      line = generatedLocation[0], column = generatedLocation[1];
      lineMap = ((base = this.lines)[line] || (base[line] = new LineMap(line)));
      return lineMap.add(column, sourceLocation, options);
    };

    SourceMap.prototype.sourceLocation = function(arg) {
      var column, line, lineMap;
      line = arg[0], column = arg[1];
      while (!((lineMap = this.lines[line]) || (line <= 0))) {
        line--;
      }
      return lineMap && lineMap.sourceLocation(column);
    };

    SourceMap.prototype.generate = function(options, code) {
      var buffer, i, j, lastColumn, lastSourceColumn, lastSourceLine, len, len1, lineMap, lineNumber, mapping, needComma, ref, ref1, v3, writingline;
      if (options == null) {
        options = {};
      }
      if (code == null) {
        code = null;
      }
      writingline = 0;
      lastColumn = 0;
      lastSourceLine = 0;
      lastSourceColumn = 0;
      needComma = false;
      buffer = "";
      ref = this.lines;
      for (lineNumber = i = 0, len = ref.length; i < len; lineNumber = ++i) {
        lineMap = ref[lineNumber];
        if (lineMap) {
          ref1 = lineMap.columns;
          for (j = 0, len1 = ref1.length; j < len1; j++) {
            mapping = ref1[j];
            if (!(mapping)) {
              continue;
            }
            while (writingline < mapping.line) {
              lastColumn = 0;
              needComma = false;
              buffer += ";";
              writingline++;
            }
            if (needComma) {
              buffer += ",";
              needComma = false;
            }
            buffer += this.encodeVlq(mapping.column - lastColumn);
            lastColumn = mapping.column;
            buffer += this.encodeVlq(0);
            buffer += this.encodeVlq(mapping.sourceLine - lastSourceLine);
            lastSourceLine = mapping.sourceLine;
            buffer += this.encodeVlq(mapping.sourceColumn - lastSourceColumn);
            lastSourceColumn = mapping.sourceColumn;
            needComma = true;
          }
        }
      }
      v3 = {
        version: 3,
        file: options.generatedFile || '',
        sourceRoot: options.sourceRoot || '',
        sources: options.sourceFiles || [''],
        names: [],
        mappings: buffer
      };
      if (options.inline) {
        v3.sourcesContent = [code];
      }
      return JSON.stringify(v3, null, 2);
    };

    VLQ_SHIFT = 5;

    VLQ_CONTINUATION_BIT = 1 << VLQ_SHIFT;

    VLQ_VALUE_MASK = VLQ_CONTINUATION_BIT - 1;

    SourceMap.prototype.encodeVlq = function(value) {
      var answer, nextChunk, signBit, valueToEncode;
      answer = '';
      signBit = value < 0 ? 1 : 0;
      valueToEncode = (Math.abs(value) << 1) + signBit;
      while (valueToEncode || !answer) {
        nextChunk = valueToEncode & VLQ_VALUE_MASK;
        valueToEncode = valueToEncode >> VLQ_SHIFT;
        if (valueToEncode) {
          nextChunk |= VLQ_CONTINUATION_BIT;
        }
        answer += this.encodeBase64(nextChunk);
      }
      return answer;
    };

    BASE64_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

    SourceMap.prototype.encodeBase64 = function(value) {
      return BASE64_CHARS[value] || (function() {
        throw new Error("Cannot Base64 encode value: " + value);
      })();
    };

    return SourceMap;

  })();

  module.exports = SourceMap;

}).call(this);

  return module.exports;
})();require['./coffee-script'] = (function() {
  var exports = {}, module = {exports: exports};
  // Generated by CoffeeScript 1.10.0
(function() {
  var Lexer, SourceMap, base, compile, ext, formatSourcePosition, fs, getSourceMap, helpers, i, len, lexer, parser, path, ref, sourceMaps, vm, withPrettyErrors,
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  fs = require('fs');

  vm = require('vm');

  path = require('path');

  Lexer = require('./lexer').Lexer;

  parser = require('./parser').parser;

  helpers = require('./helpers');

  SourceMap = require('./sourcemap');

  exports.VERSION = '1.10.0';

  exports.FILE_EXTENSIONS = ['.coffee', '.litcoffee', '.coffee.md'];

  exports.helpers = helpers;

  withPrettyErrors = function(fn) {
    return function(code, options) {
      var err, error;
      if (options == null) {
        options = {};
      }
      try {
        return fn.call(this, code, options);
      } catch (error) {
        err = error;
        if (typeof code !== 'string') {
          throw err;
        }
        throw helpers.updateSyntaxError(err, code, options.filename);
      }
    };
  };

  exports.compile = compile = withPrettyErrors(function(code, options) {
    var answer, currentColumn, currentLine, extend, fragment, fragments, header, i, js, len, map, merge, newLines, token, tokens;
    merge = helpers.merge, extend = helpers.extend;
    options = extend({}, options);
    if (options.sourceMap) {
      map = new SourceMap;
    }
    tokens = lexer.tokenize(code, options);
    options.referencedVars = (function() {
      var i, len, results;
      results = [];
      for (i = 0, len = tokens.length; i < len; i++) {
        token = tokens[i];
        if (token.variable) {
          results.push(token[1]);
        }
      }
      return results;
    })();
    fragments = parser.parse(tokens).compileToFragments(options);
    currentLine = 0;
    if (options.header) {
      currentLine += 1;
    }
    if (options.shiftLine) {
      currentLine += 1;
    }
    currentColumn = 0;
    js = "";
    for (i = 0, len = fragments.length; i < len; i++) {
      fragment = fragments[i];
      if (options.sourceMap) {
        if (fragment.locationData && !/^[;\s]*$/.test(fragment.code)) {
          map.add([fragment.locationData.first_line, fragment.locationData.first_column], [currentLine, currentColumn], {
            noReplace: true
          });
        }
        newLines = helpers.count(fragment.code, "\n");
        currentLine += newLines;
        if (newLines) {
          currentColumn = fragment.code.length - (fragment.code.lastIndexOf("\n") + 1);
        } else {
          currentColumn += fragment.code.length;
        }
      }
      js += fragment.code;
    }
    if (options.header) {
      header = "Generated by CoffeeScript " + this.VERSION;
      js = "// " + header + "\n" + js;
    }
    if (options.sourceMap) {
      answer = {
        js: js
      };
      answer.sourceMap = map;
      answer.v3SourceMap = map.generate(options, code);
      return answer;
    } else {
      return js;
    }
  });

  exports.tokens = withPrettyErrors(function(code, options) {
    return lexer.tokenize(code, options);
  });

  exports.nodes = withPrettyErrors(function(source, options) {
    if (typeof source === 'string') {
      return parser.parse(lexer.tokenize(source, options));
    } else {
      return parser.parse(source);
    }
  });

  exports.run = function(code, options) {
    var answer, dir, mainModule, ref;
    if (options == null) {
      options = {};
    }
    mainModule = require.main;
    mainModule.filename = process.argv[1] = options.filename ? fs.realpathSync(options.filename) : '.';
    mainModule.moduleCache && (mainModule.moduleCache = {});
    dir = options.filename ? path.dirname(fs.realpathSync(options.filename)) : fs.realpathSync('.');
    mainModule.paths = require('module')._nodeModulePaths(dir);
    if (!helpers.isCoffee(mainModule.filename) || require.extensions) {
      answer = compile(code, options);
      code = (ref = answer.js) != null ? ref : answer;
    }
    return mainModule._compile(code, mainModule.filename);
  };

  exports["eval"] = function(code, options) {
    var Module, _module, _require, createContext, i, isContext, js, k, len, o, r, ref, ref1, ref2, ref3, sandbox, v;
    if (options == null) {
      options = {};
    }
    if (!(code = code.trim())) {
      return;
    }
    createContext = (ref = vm.Script.createContext) != null ? ref : vm.createContext;
    isContext = (ref1 = vm.isContext) != null ? ref1 : function(ctx) {
      return options.sandbox instanceof createContext().constructor;
    };
    if (createContext) {
      if (options.sandbox != null) {
        if (isContext(options.sandbox)) {
          sandbox = options.sandbox;
        } else {
          sandbox = createContext();
          ref2 = options.sandbox;
          for (k in ref2) {
            if (!hasProp.call(ref2, k)) continue;
            v = ref2[k];
            sandbox[k] = v;
          }
        }
        sandbox.global = sandbox.root = sandbox.GLOBAL = sandbox;
      } else {
        sandbox = global;
      }
      sandbox.__filename = options.filename || 'eval';
      sandbox.__dirname = path.dirname(sandbox.__filename);
      if (!(sandbox !== global || sandbox.module || sandbox.require)) {
        Module = require('module');
        sandbox.module = _module = new Module(options.modulename || 'eval');
        sandbox.require = _require = function(path) {
          return Module._load(path, _module, true);
        };
        _module.filename = sandbox.__filename;
        ref3 = Object.getOwnPropertyNames(require);
        for (i = 0, len = ref3.length; i < len; i++) {
          r = ref3[i];
          if (r !== 'paths' && r !== 'arguments' && r !== 'caller') {
            _require[r] = require[r];
          }
        }
        _require.paths = _module.paths = Module._nodeModulePaths(process.cwd());
        _require.resolve = function(request) {
          return Module._resolveFilename(request, _module);
        };
      }
    }
    o = {};
    for (k in options) {
      if (!hasProp.call(options, k)) continue;
      v = options[k];
      o[k] = v;
    }
    o.bare = true;
    js = compile(code, o);
    if (sandbox === global) {
      return vm.runInThisContext(js);
    } else {
      return vm.runInContext(js, sandbox);
    }
  };

  exports.register = function() {
    return require('./register');
  };

  if (require.extensions) {
    ref = this.FILE_EXTENSIONS;
    for (i = 0, len = ref.length; i < len; i++) {
      ext = ref[i];
      if ((base = require.extensions)[ext] == null) {
        base[ext] = function() {
          throw new Error("Use CoffeeScript.register() or require the coffee-script/register module to require " + ext + " files.");
        };
      }
    }
  }

  exports._compileFile = function(filename, sourceMap) {
    var answer, err, error, raw, stripped;
    if (sourceMap == null) {
      sourceMap = false;
    }
    raw = fs.readFileSync(filename, 'utf8');
    stripped = raw.charCodeAt(0) === 0xFEFF ? raw.substring(1) : raw;
    try {
      answer = compile(stripped, {
        filename: filename,
        sourceMap: sourceMap,
        literate: helpers.isLiterate(filename)
      });
    } catch (error) {
      err = error;
      throw helpers.updateSyntaxError(err, stripped, filename);
    }
    return answer;
  };

  lexer = new Lexer;

  parser.lexer = {
    lex: function() {
      var tag, token;
      token = parser.tokens[this.pos++];
      if (token) {
        tag = token[0], this.yytext = token[1], this.yylloc = token[2];
        parser.errorToken = token.origin || token;
        this.yylineno = this.yylloc.first_line;
      } else {
        tag = '';
      }
      return tag;
    },
    setInput: function(tokens) {
      parser.tokens = tokens;
      return this.pos = 0;
    },
    upcomingInput: function() {
      return "";
    }
  };

  parser.yy = require('./nodes');

  parser.yy.parseError = function(message, arg) {
    var errorLoc, errorTag, errorText, errorToken, token, tokens;
    token = arg.token;
    errorToken = parser.errorToken, tokens = parser.tokens;
    errorTag = errorToken[0], errorText = errorToken[1], errorLoc = errorToken[2];
    errorText = (function() {
      switch (false) {
        case errorToken !== tokens[tokens.length - 1]:
          return 'end of input';
        case errorTag !== 'INDENT' && errorTag !== 'OUTDENT':
          return 'indentation';
        case errorTag !== 'IDENTIFIER' && errorTag !== 'NUMBER' && errorTag !== 'STRING' && errorTag !== 'STRING_START' && errorTag !== 'REGEX' && errorTag !== 'REGEX_START':
          return errorTag.replace(/_START$/, '').toLowerCase();
        default:
          return helpers.nameWhitespaceCharacter(errorText);
      }
    })();
    return helpers.throwSyntaxError("unexpected " + errorText, errorLoc);
  };

  formatSourcePosition = function(frame, getSourceMapping) {
    var as, column, fileLocation, fileName, functionName, isConstructor, isMethodCall, line, methodName, source, tp, typeName;
    fileName = void 0;
    fileLocation = '';
    if (frame.isNative()) {
      fileLocation = "native";
    } else {
      if (frame.isEval()) {
        fileName = frame.getScriptNameOrSourceURL();
        if (!fileName) {
          fileLocation = (frame.getEvalOrigin()) + ", ";
        }
      } else {
        fileName = frame.getFileName();
      }
      fileName || (fileName = "<anonymous>");
      line = frame.getLineNumber();
      column = frame.getColumnNumber();
      source = getSourceMapping(fileName, line, column);
      fileLocation = source ? fileName + ":" + source[0] + ":" + source[1] : fileName + ":" + line + ":" + column;
    }
    functionName = frame.getFunctionName();
    isConstructor = frame.isConstructor();
    isMethodCall = !(frame.isToplevel() || isConstructor);
    if (isMethodCall) {
      methodName = frame.getMethodName();
      typeName = frame.getTypeName();
      if (functionName) {
        tp = as = '';
        if (typeName && functionName.indexOf(typeName)) {
          tp = typeName + ".";
        }
        if (methodName && functionName.indexOf("." + methodName) !== functionName.length - methodName.length - 1) {
          as = " [as " + methodName + "]";
        }
        return "" + tp + functionName + as + " (" + fileLocation + ")";
      } else {
        return typeName + "." + (methodName || '<anonymous>') + " (" + fileLocation + ")";
      }
    } else if (isConstructor) {
      return "new " + (functionName || '<anonymous>') + " (" + fileLocation + ")";
    } else if (functionName) {
      return functionName + " (" + fileLocation + ")";
    } else {
      return fileLocation;
    }
  };

  sourceMaps = {};

  getSourceMap = function(filename) {
    var answer, ref1;
    if (sourceMaps[filename]) {
      return sourceMaps[filename];
    }
    if (ref1 = path != null ? path.extname(filename) : void 0, indexOf.call(exports.FILE_EXTENSIONS, ref1) < 0) {
      return;
    }
    answer = exports._compileFile(filename, true);
    return sourceMaps[filename] = answer.sourceMap;
  };

  Error.prepareStackTrace = function(err, stack) {
    var frame, frames, getSourceMapping;
    getSourceMapping = function(filename, line, column) {
      var answer, sourceMap;
      sourceMap = getSourceMap(filename);
      if (sourceMap) {
        answer = sourceMap.sourceLocation([line - 1, column - 1]);
      }
      if (answer) {
        return [answer[0] + 1, answer[1] + 1];
      } else {
        return null;
      }
    };
    frames = (function() {
      var j, len1, results;
      results = [];
      for (j = 0, len1 = stack.length; j < len1; j++) {
        frame = stack[j];
        if (frame.getFunction() === exports.run) {
          break;
        }
        results.push("  at " + (formatSourcePosition(frame, getSourceMapping)));
      }
      return results;
    })();
    return (err.toString()) + "\n" + (frames.join('\n')) + "\n";
  };

}).call(this);

  return module.exports;
})();require['./browser'] = (function() {
  var exports = {}, module = {exports: exports};
  // Generated by CoffeeScript 1.10.0
(function() {
  var CoffeeScript, compile, runScripts,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  CoffeeScript = require('./coffee-script');

  CoffeeScript.require = require;

  compile = CoffeeScript.compile;

  CoffeeScript["eval"] = function(code, options) {
    if (options == null) {
      options = {};
    }
    if (options.bare == null) {
      options.bare = true;
    }
    return eval(compile(code, options));
  };

  CoffeeScript.run = function(code, options) {
    if (options == null) {
      options = {};
    }
    options.bare = true;
    options.shiftLine = true;
    return Function(compile(code, options))();
  };

  if (typeof window === "undefined" || window === null) {
    return;
  }

  if ((typeof btoa !== "undefined" && btoa !== null) && (typeof JSON !== "undefined" && JSON !== null) && (typeof unescape !== "undefined" && unescape !== null) && (typeof encodeURIComponent !== "undefined" && encodeURIComponent !== null)) {
    compile = function(code, options) {
      var js, ref, v3SourceMap;
      if (options == null) {
        options = {};
      }
      options.sourceMap = true;
      options.inline = true;
      ref = CoffeeScript.compile(code, options), js = ref.js, v3SourceMap = ref.v3SourceMap;
      return js + "\n//# sourceMappingURL=data:application/json;base64," + (btoa(unescape(encodeURIComponent(v3SourceMap)))) + "\n//# sourceURL=coffeescript";
    };
  }

  CoffeeScript.load = function(url, callback, options, hold) {
    var xhr;
    if (options == null) {
      options = {};
    }
    if (hold == null) {
      hold = false;
    }
    options.sourceFiles = [url];
    xhr = window.ActiveXObject ? new window.ActiveXObject('Microsoft.XMLHTTP') : new window.XMLHttpRequest();
    xhr.open('GET', url, true);
    if ('overrideMimeType' in xhr) {
      xhr.overrideMimeType('text/plain');
    }
    xhr.onreadystatechange = function() {
      var param, ref;
      if (xhr.readyState === 4) {
        if ((ref = xhr.status) === 0 || ref === 200) {
          param = [xhr.responseText, options];
          if (!hold) {
            CoffeeScript.run.apply(CoffeeScript, param);
          }
        } else {
          throw new Error("Could not load " + url);
        }
        if (callback) {
          return callback(param);
        }
      }
    };
    return xhr.send(null);
  };

  runScripts = function() {
    var coffees, coffeetypes, execute, fn, i, index, j, len, s, script, scripts;
    scripts = window.document.getElementsByTagName('script');
    coffeetypes = ['text/coffeescript', 'text/literate-coffeescript'];
    coffees = (function() {
      var j, len, ref, results;
      results = [];
      for (j = 0, len = scripts.length; j < len; j++) {
        s = scripts[j];
        if (ref = s.type, indexOf.call(coffeetypes, ref) >= 0) {
          results.push(s);
        }
      }
      return results;
    })();
    index = 0;
    execute = function() {
      var param;
      param = coffees[index];
      if (param instanceof Array) {
        CoffeeScript.run.apply(CoffeeScript, param);
        index++;
        return execute();
      }
    };
    fn = function(script, i) {
      var options, source;
      options = {
        literate: script.type === coffeetypes[1]
      };
      source = script.src || script.getAttribute('data-src');
      if (source) {
        return CoffeeScript.load(source, function(param) {
          coffees[i] = param;
          return execute();
        }, options, true);
      } else {
        options.sourceFiles = ['embedded'];
        return coffees[i] = [script.innerHTML, options];
      }
    };
    for (i = j = 0, len = coffees.length; j < len; i = ++j) {
      script = coffees[i];
      fn(script, i);
    }
    return execute();
  };

  if (window.addEventListener) {
    window.addEventListener('DOMContentLoaded', runScripts, false);
  } else {
    window.attachEvent('onload', runScripts);
  }

}).call(this);

  return module.exports;
})();
    return require['./coffee-script'];
  }();

  if (typeof define === 'function' && define.amd) {
    define(function() { return CoffeeScript; });
  } else {
    root.CoffeeScript = CoffeeScript;
  }
}(this));